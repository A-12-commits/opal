opal_filter "Method" do
  fails "Method#define_method when passed a Method object defines a method with the same #parameters as the original"
  fails "Method#define_method when passed an UnboundMethod object defines a method with the same #arity as the original"
  fails "Method#define_method when passed an UnboundMethod object defines a method with the same #parameters as the original"
  fails "Method#== returns true if methods are the same"
  fails "Method#== returns true on aliased methods"
  fails "Method#== returns true if the two core methods are aliases"
  fails "Method#== returns true if a method was defined using the other one"
  fails "Method#== missing methods returns true for the same method missing"
  fails "Method#== missing methods calls respond_to_missing? with true to include private methods"
  fails "Method#source_location returns an Array"
  fails "Method#source_location sets the first value to the path of the file in which the method was defined"
  fails "Method#source_location sets the last value to a Fixnum representing the line on which the method was defined"
  fails "Method#source_location returns the last place the method was defined"
  fails "Method#source_location returns the location of the original method even if it was aliased"
  fails "Method#source_location works for methods defined with a block"
  fails "Method#source_location works for methods defined with a Method"
  fails "Method#source_location works for methods defined with an UnboundMethod"
  fails "Method#source_location works for methods whose visibility has been overridden in a subclass"
  fails "Method#source_location for a Method generated by respond_to_missing? returns nil"
  fails "Method#to_proc returns a Proc object with the correct arity"
  fails "Method#to_proc returns a proc that can be used by define_method"
  fails "Method#to_proc returns a proc that can receive a block"
  fails "Method#eql? returns true if methods are the same"
  fails "Method#eql? returns true on aliased methods"
  fails "Method#eql? returns true if the two core methods are aliases"
  fails "Method#eql? returns true if a method was defined using the other one"
  fails "Method#eql? missing methods returns true for the same method missing"
  fails "Method#eql? missing methods calls respond_to_missing? with true to include private methods"
  fails "Method#to_s returns a String containing the method name"
  fails "Method#to_s returns a String containing the Module the method is defined in"
  fails "Method#to_s returns a String containing the Module the method is referenced from"
  fails "Method#unbind returns a String containing the Module the method is defined in"
  fails "Method#unbind rebinding UnboundMethod to Method's obj produces exactly equivalent Methods"
  fails "Method#owner returns the class/module it was defined in"
  fails "Method#owner for a Method generated by respond_to_missing? returns the owner of the method"
  fails "Method#hash returns the same value for user methods that are eql?"
  fails "Method#hash returns the same value for builtin methods that are eql?"
  fails "Method#arity returns negative values for method definition \n    def m(a=1) end\n    def n(a=1, b=2) end"
  fails "Method#arity returns negative values for method definition \n    def m(a, b=1) end\n    def n(a, b, c=1, d=2) end"
  fails "Method#arity returns negative values for method definition \n    def m(a=1, *b) end\n    def n(a=1, b=2, *c) end"
  fails "Method#arity returns negative values for method definition \n    def m(*) end\n    def n(*a) end"
  fails "Method#arity returns negative values for method definition \n    def m(a, *) end\n    def n(a, *b) end\n    def o(a, b, *c) end\n    def p(a, b, c, *d) end"
  fails "Method#arity returns negative values for method definition \n    def m(*a, b) end\n    def n(*a, b, c) end\n    def o(*a, b, c, d) end"
  fails "Method#arity returns negative values for method definition \n    def m(a, *b, c) end\n    def n(a, b, *c, d, e) end"
  fails "Method#arity returns negative values for method definition \n    def m(a, b=1, c=2, *d, e, f) end\n    def n(a, b, c=1, *d, e, f, g) end"
  fails "Method#arity returns negative values for method definition \n    def m(a: 1) end\n    def n(a: 1, b: 2) end"
  fails "Method#arity returns negative values for method definition \n    def m(a=1, b: 2) end\n    def n(*a, b: 1) end\n    def o(a=1, b: 2) end\n    def p(a=1, *b, c: 2, &l) end"
  fails "Method#arity returns negative values for method definition \n    def m(**k, &l) end\n    def n(*a, **k) end\n    def o(a: 1, b: 2, **k) end"
  fails "Method#arity returns negative values for method definition 'def m(a=1, *b, c:, d: 2, **k, &l) end'"
  fails "Method#arity returns negative values for method definition \n    def m(a, b=1, *c, d, e:, f: 2, **k, &l) end\n    def n(a, b=1, *c, d:, e:, f: 2, **k, &l) end\n    def o(a=0, b=1, *c, d, e:, f: 2, **k, &l) end\n    def p(a=0, b=1, *c, d:, e:, f: 2, **k, &l) end"
  fails "Method#arity for a Method generated by respond_to_missing? returns -1"
  fails "Method#name for a Method generated by respond_to_missing? returns the name passed to respond_to_missing?"
  fails "Method#inspect returns a String containing the Module the method is defined in"
  fails "Method#[] for a Method generated by respond_to_missing? invokes method_missing with the specified arguments and returns the result"
  fails "Method#[] for a Method generated by respond_to_missing? invokes method_missing with the method name and the specified arguments"
  fails "Method#[] for a Method generated by respond_to_missing? invokes method_missing dynamically"
  fails "Method#[] for a Method generated by respond_to_missing? does not call the original method name even if it now exists"
  fails "Method#super_method returns the method that would be called by super in the method"
  fails "Method#super_method returns nil when there's no super method in the parent"
  fails "Method#super_method returns nil when the parent's method is removed"
  fails "Method#call for a Method generated by respond_to_missing? invokes method_missing with the specified arguments and returns the result"
  fails "Method#call for a Method generated by respond_to_missing? invokes method_missing with the method name and the specified arguments"
  fails "Method#call for a Method generated by respond_to_missing? invokes method_missing dynamically"
  fails "Method#call for a Method generated by respond_to_missing? does not call the original method name even if it now exists"
  fails "Method#receiver for a Method generated by respond_to_missing? returns the receiver of the method"
  fails "Method#curry returns a curried proc"
  fails "Method#curry with optional arity argument returns a curried proc when given correct arity"
  fails "Method#curry with optional arity argument raises ArgumentError when the method requires more arguments than the given arity"
  fails "Method#curry with optional arity argument raises ArgumentError when the method requires less arguments than the given arity"
  fails "Method#clone returns a copy of the method"
  fails "Method#parameters returns an empty Array when the method expects no arguments"
  fails "Method#parameters returns [[:req,:name]] for a method expecting one required argument called 'name'"
  fails "Method#parameters returns [[:req,:a],[:req,:b]] for a method expecting two required arguments called 'a' and 'b''"
  fails "Method#parameters returns [[:block,:blk]] for a method expecting one block argument called 'a'"
  fails "Method#parameters returns [[:req,:a],[:block,:b] for a method expecting a required argument ('a') and a block argument ('b')"
  fails "Method#parameters returns [[:req,:a],[:req,:b],[:block,:c] for a method expecting two required arguments ('a','b') and a block argument ('c')"
  fails "Method#parameters returns [[:opt,:a]] for a method expecting one optional argument ('a')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b]] for a method expecting one required argument ('a') and one optional argument ('b')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b],[:opt,:c]] for a method expecting one required argument ('a') and two optional arguments ('b','c')"
  fails "Method#parameters returns [[:req,:a],[:req,:b],[:opt,:c]] for a method expecting two required arguments ('a','b') and one optional arguments ('c')"
  fails "Method#parameters returns [[:opt,:a],[:block,:b]] for a method expecting one required argument ('a') and one block argument ('b')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b],[:block,:c]] for a method expecting one required argument ('a'), one optional argument ('b'), and a block ('c')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b],[:opt,:c],[:block,:d]] for a method expecting one required argument ('a'), two optional arguments ('b','c'), and a block ('d')"
  fails "Method#parameters returns [[:rest,:a]] for a method expecting a single splat argument ('a')"
  fails "Method#parameters returns [[:req,:a],[:rest,:b]] for a method expecting a splat argument ('a') and a required argument ('b')"
  fails "Method#parameters returns [[:req,:a],[:req,:b],[:rest,:c]] for a method expecting two required arguments ('a','b') and a splat argument ('c')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b],[:rest,:c]] for a method expecting a required argument ('a','b'), an optional argument ('b'), and a splat argument ('c')"
  fails "Method#parameters returns [[:req,:a],[:req,:b],[:opt,:b],[:rest,:d]] for a method expecting two required arguments ('a','b'), an optional argument ('c'), and a splat argument ('d')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b],[:opt,:c],[:rest,:d]] for a method expecting a required argument ('a'), two optional arguments ('b','c'), and a splat argument ('d')"
  fails "Method#parameters returns [[:rest,:a],[:block,:b]] for a method expecting a splat argument ('a') and a block argument ('b')"
  fails "Method#parameters returns [[:req,:a],[:rest,:b],[:block,:c]] for a method expecting a required argument ('a'), a splat argument ('b'), and a block ('c')"
  fails "Method#parameters returns [[:req,:a],[:req,:b],[:rest,:c],[:block,:d]] for a method expecting two required arguments ('a','b'), a splat argument ('c'), and a block ('d')"
  fails "Method#parameters returns [[:req,:a],[:opt,:b],[:rest,:c],[:block,:d]] for a method expecting a required argument ('a'), a splat argument ('c'), and a block ('d')"
  fails "Method#parameters returns [[:req,:a],[:req,:b],[:opt,:c],[:block,:d]] for a method expecting two required arguments ('a','b'), an optional argument ('c'), a splat argument ('d'), and a block ('e')"
  fails "Method#parameters returns [[:rest,:a],[:req,:b]] for a method expecting a splat argument ('a') and a required argument ('b')"
  fails "Method#parameters returns [[:rest,:a],[:req,:b],[:req,:c]] for a method expecting a splat argument ('a') and two required arguments ('b','c')"
  fails "Method#parameters returns [[:rest,:a],[:req,:b],[:block,:c]] for a method expecting a splat argument ('a'), a required argument ('b'), and a block ('c')"
  fails "Method#parameters returns [[:key,:a]] for a method with a single optional keyword argument"
  fails "Method#parameters returns [[:keyrest,:a]] for a method with a keyword rest argument"
  fails "Method#parameters returns [[:keyreq,:a]] for a method with a single required keyword argument"
  fails "Method#parameters works with ->(){} as the value of an optional argument"
  fails "Method#parameters returns [] for a define_method method with explicit no-args || specification"
  fails "Method#parameters returns [[:rest, :x]] for a define_method method with rest arg 'x' only"
  fails "Method#parameters returns [[:req, :x]] for a define_method method expecting one required argument 'x'"
  fails "Method#parameters returns [[:req, :x], [:req, :y]] for a define_method method expecting two required arguments 'x' and 'y'"
  fails "Method#parameters returns [] for a define_method method with no args specification"
  fails "Method#parameters returns [[:req]] for a define_method method with a grouping as its only argument"
  fails "Method#parameters returns [[:opt, :x]] for a define_method method with an optional argument 'x'"
  fails "Method#parameters returns [[:rest]] for a Method generated by respond_to_missing?"
  fails "Method#parameters adds nameless rest arg for \"star\" argument"
  fails "Method#parameters returns the args and block for a splat and block argument"
  fails "An element assignment method send with a single splatted Object argument does not call #to_ary"
  fails "An element assignment method send with a single splatted Object argument calls #to_a"
  fails "An element assignment method send with a single splatted Object argument wraps the argument in an Array if #to_a returns nil"
  fails "An element assignment method send with a leading splatted Object argument does not call #to_ary"
  fails "An element assignment method send with a leading splatted Object argument calls #to_a"
  fails "An element assignment method send with a leading splatted Object argument wraps the argument in an Array if #to_a returns nil"
  fails "An element assignment method send with a middle splatted Object argument does not call #to_ary"
  fails "An element assignment method send with a middle splatted Object argument calls #to_a"
  fails "An element assignment method send with a middle splatted Object argument wraps the argument in an Array if #to_a returns nil"
  fails "An element assignment method send with a trailing splatted Object argument does not call #to_ary"
  fails "An element assignment method send with a trailing splatted Object argument calls #to_a"
  fails "An element assignment method send with a trailing splatted Object argument wraps the argument in an Array if #to_a returns nil"
  fails "A method assigns local variables from method parameters for definition 'def m(a:) a end'"
  fails "A method assigns local variables from method parameters for definition 'def m((*), (*)) end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, b) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, (b, c)) [a, b, c] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, (b, (c, *d))) [a, b, c, d] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, (b, (c, *d), *e)) [a, b, c, d, e] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, (b), (c)) [a, b, c] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, (*b), (*c)) [a, b, c] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, (b, c), (d, e)) [a, b, c, d, e] end'"
  fails "A method assigns local variables from method parameters for definition \n    def m(a=1, (b, *c), (*d, e))\n      [a, b, c, d, e]\n    end"
  fails "A method assigns local variables from method parameters for definition \n    def m(a=1, (b, *c), (d, (*e, f)))\n      [a, b, c, d, e, f]\n    end"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, b:) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, b: 2) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a=1, **) a end'"
  fails "A method assigns local variables from method parameters for definition 'def m(*a, b:) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(*a, b: 1) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(*a, **) a end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a = nil, **k) [a, k] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(*a, **k) [a, k] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a:, b:) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a:, b: 1) [a, b] end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a:, **) a end'"
  fails "A method assigns local variables from method parameters for definition 'def m(a:, **k) [a, k] end'"
  fails "A method assigns local variables from method parameters for definition \n    def m a, b=1, *c, d, e:, f: 2, g:, **k, &l\n      [a, b, c, d, e, f, g, k, l]\n    end"
end
