$:.unshift '../lib'
require 'opal'
require 'fileutils'

HEADER = <<-HEAD
/*!
 * opal v#{Opal::VERSION}
 * http://opalscript.org
 *
 * Copyright 2011, Adam Beynon
 * Released under the MIT license
 */
HEAD

# Opal::BuilderTask.new do |s|
#   # :opal_test group in gemspec
#   s.config :test do
#     # output into runtime/spec/
#     s.out = 'runtime/spec/opal.test.js'
#     # additional files (runtime has no ruby files, but here we use just specs)
#     s.files = Dir['spec/**/*.rb']
#     #s.main  = 'spec/spec_helper.rb'
#     #s.gem 'opaltest', git: 'git://github.com/adambeynon/opaltest.git'
#     s.stdlib = %w[rbconfig optparse forwardable]
#   end
# end

desc "Rebuild core opal runtime into opal.js"
task :opal do
  File.open('opal.js', 'w+') { |f| f.write build_runtime }
end

task :opal_debug do
  File.open('opal.debug.js', 'w+') { |f| f.write build_runtime(true) }
end

def build_runtime debug = false
  parser  = Opal::Parser.new :debug => debug
  order   = File.read('corelib/load_order').strip.split
  core    = order.map { |c| File.read "corelib/#{c}.rb" }
  jsorder = File.read('runtime/load_order').strip.split
  jscode  = jsorder.map { |j| File.read "runtime/#{j}.js" }
  
  parsed  = parser.parse core.join
  code    = "var core_lib = #{parser.wrap_core_with_runtime_helpers parsed};"
  methods = Opal::Parser::METHOD_NAMES.to_a.map { |a| "'#{a[0]}': '#{a[1]}'" }
  result  = []
  
  result << HEADER
  result << "(function(undefined) {"
  result << jscode.join
  result << code
  result << "var method_names = {#{methods.join ', '}};"
  result << "var reverse_method_names = {}; for (var id in method_names) {"
  result << "reverse_method_names[method_names[id]] = id;}"
  result << "core_lib(rb_top_self, '(runtime)');"
  result << "}).call(this);"
  result.join "\n"
end