$:.unshift '../lib'
require 'opal'
require 'opal/builder_task'
require 'fileutils'

HEADER = <<-HEAD
/*!
 * opal v#{Opal::VERSION}
 * http://opalscript.org
 *
 * Copyright 2011, Adam Beynon
 * Released under the MIT license
 */
HEAD

Opal::BuilderTask.new do |s|
  s.config :debug do
    s.out = 'opal.debug.js'
  end
  s.config :test do
    s.out = 'opal.test.js'
    s.files = Dir['spec/**/*.rb']
    s.stdlib = %w[forwardable]
    # we dont have a 'main' as we do it manually in spec_runner so we can
    # benchmark code
  end
end

desc "Rebuild core opal runtime into opal.js"
task :opal do
  File.open('opal.js', 'w+') { |f| f.write build_runtime }
end

task :opal_debug do
  File.open('opal.debug.js', 'w+') { |f| f.write build_runtime(true) }
end

desc "Run opal tests"
task :test => :opal do
  Opal::Context.runner 'spec/**/*.rb'
end

desc "Check file sizes for core builds"
task :sizes do
  sizes 'opal.js'
  sizes 'opal.debug.js'
end

def sizes file
  o = File.read file
  m = uglify o
  g = gzip m
  
  puts "#{file}:"
  puts "development: #{o.size}, minified: #{m.size}, gzipped: #{g.size}"
end

# Used for uglifying source to minify
def uglify(str)
  IO.popen('uglifyjs -nc', 'r+') do |i|
    i.puts str
    i.close_write
    return i.read
  end
end

# Gzip code to check file size
def gzip(str)
  IO.popen('gzip -f', 'r+') do |i|
    i.puts str
    i.close_write
    return i.read
  end
end

def build_runtime debug = false
  parser  = Opal::Parser.new :debug => debug
  order   = File.read('corelib/load_order').strip.split
  core    = order.map { |c| File.read "corelib/#{c}.rb" }
  jsorder = File.read('runtime/load_order').strip.split
  jscode  = jsorder.map { |j| File.read "runtime/#{j}.js" }
  
  parsed  = parser.parse core.join
  code    = "var core_lib = #{parser.wrap_core_with_runtime_helpers parsed};"
  methods = Opal::Parser::METHOD_NAMES.to_a.map { |a| "'#{a[0]}': '#{a[1]}'" }
  result  = []
  
  result << HEADER
  result << "(function(undefined) {"
  result << jscode.join
  result << code
  result << "var method_names = {#{methods.join ', '}};"
  result << "var reverse_method_names = {}; for (var id in method_names) {"
  result << "reverse_method_names[method_names[id]] = id;}"
  result << "core_lib(rb_top_self, '(runtime)');"
  result << "}).call(this);"
  result.join "\n"
end
