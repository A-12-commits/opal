#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Opal
  class Parser < Racc::Parser


##### State transition tables begin ###

clist = [
'16,18,26,30,34,518,587,720,55,63,235,-501,518,81,235,92,94,3,9,13,20',
'23,-83,311,312,393,301,57,61,66,69,73,78,83,840,-64,5,865,235,311,312',
'-439,37,42,46,51,52,59,-439,70,75,79,84,88,-275,1,7,11,645,21,28,-275',
'38,43,-435,647,-441,-87,625,311,312,-435,-75,-441,-95,251,-501,478,796',
'-255,378,382,360,364,56,394,390,72,-503,-83,86,797,778,4,641,14,233',
'-501,625,36,233,626,565,251,566,292,295,74,721,-275,586,297,2,8,12,17',
'22,29,295,-435,520,47,53,297,233,295,-83,520,292,90,297,626,10,-83,-507',
'25,16,18,26,477,34,-507,-507,-507,55,63,-507,-507,-507,81,-507,92,94',
'3,184,185,20,23,292,-507,-507,-507,292,193,61,66,69,73,78,83,-507,-507',
'182,-507,-507,-507,-507,-507,405,42,331,407,52,59,397,70,75,79,84,88',
'210,1,7,11,393,21,28,759,38,43,625,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,-507,-507,821,8,-507,-507,-507,203,740,-507',
'206,47,-507,86,412,-507,4,-507,216,-507,626,-507,36,-507,-507,-507,-507',
'-507,-507,-507,207,-507,-507,-507,522,2,8,12,17,22,29,394,390,421,47',
'53,-507,-507,-507,-507,-89,-507,90,737,-507,10,-91,-274,25,16,18,26',
'-95,34,-274,-274,-274,55,63,-274,-274,-274,81,-274,92,94,3,184,185,20',
'23,331,-94,-274,-274,761,193,194,196,69,73,78,83,-274,-274,182,-274',
'-274,-274,-274,-274,-92,190,311,312,52,59,331,70,75,79,84,88,472,1,7',
'11,393,21,28,474,763,738,625,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-444,764,-274,-274,-274,192,680,-274,72',
'405,-274,86,407,-274,4,-274,14,-274,626,-274,616,-274,-274,-274,-274',
'-274,-274,-274,331,-274,-92,-274,-90,2,8,12,17,22,29,394,390,392,47',
'53,-274,-274,-274,-274,-88,-274,90,402,-274,10,-93,-507,187,16,18,26',
'-442,34,-507,-507,-507,55,63,-442,-507,-507,81,-507,92,94,3,184,185',
'20,23,405,-507,331,429,720,193,194,196,69,73,78,83,-507,-507,182,-507',
'-507,-507,-507,-507,405,42,331,407,52,59,695,70,75,79,84,88,210,1,7',
'11,393,21,28,767,38,43,-75,-507,-507,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,311,312,-507,-507,-507,203,683,-92,206,-92',
'-507,86,-92,295,4,360,364,-507,297,-507,36,-507,-507,-507,-507,-507',
'-507,-507,207,-507,-507,-507,-84,2,8,12,17,22,29,394,390,458,47,53,-507',
'-507,295,-83,721,-507,90,297,-507,10,-91,-274,25,16,18,26,388,34,-274',
'-274,-274,55,63,389,-274,-274,81,-274,92,94,3,9,13,20,23,778,769,566',
'771,720,57,61,66,69,73,78,83,-274,-274,5,-274,-274,-274,-274,-274,-84',
'42,311,312,52,59,-503,70,75,79,84,88,409,1,7,11,393,21,28,411,38,43',
'774,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-84,775,-274,-274,-274,203,680,-84,206,213,-274,86,693,444,4,797',
'778,-274,778,-274,36,-274,-274,-274,-274,-274,-274,-274,74,-274,410',
'-274,213,2,8,12,17,22,29,394,390,433,47,53,-274,-274,295,-85,721,-274',
'90,297,-274,10,-93,-269,25,16,18,26,30,34,-269,-269,-269,55,63,-269',
'-269,-269,81,-269,92,94,3,9,13,20,23,255,256,-269,-269,-269,57,61,66',
'69,73,78,83,-269,-269,5,-269,-269,-269,-269,-269,37,42,691,51,52,59',
'469,70,75,79,84,88,423,1,7,11,689,21,28,445,38,43,688,-269,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,673,295,-269',
'-269,-269,56,297,-269,72,469,-269,86,358,-269,4,-269,14,-269,425,-269',
'36,-269,-269,-269,-269,-269,-269,-269,74,-269,622,-269,645,2,8,12,17',
'22,29,647,686,-84,47,53,-269,-269,-269,-269,-92,-269,90,-269,-269,10',
'701,-370,25,16,18,26,414,34,-370,-370,-370,55,63,-370,-370,-370,81,-370',
'92,94,3,184,185,20,23,292,-370,-370,-370,778,193,61,66,69,73,78,83,-370',
'-370,182,-370,-370,-370,-370,-370,684,42,360,364,52,59,750,70,75,79',
'84,88,210,1,7,11,393,21,28,448,38,43,703,-370,-370,-370,-370,-370,-370',
'-370,-370,-370,-370,-370,-370,-370,-370,790,295,-370,-370,-370,203,297',
'-370,206,251,-370,86,802,-370,4,-370,216,-370,219,-370,36,-370,-370',
'-370,-370,-370,-370,-370,207,-370,-370,-370,803,2,8,12,17,22,29,394',
'390,-81,47,53,-370,-370,-370,-370,-89,-370,90,308,-370,10,705,-282,25',
'16,18,26,806,34,-282,-282,-282,55,63,-282,-282,-282,81,-282,92,94,3',
'184,185,20,23,395,396,-282,-282,706,193,61,66,69,73,78,83,-282,-282',
'182,-282,-282,-282,-282,-282,583,42,811,812,52,59,813,70,75,79,84,88',
'210,1,7,11,431,21,28,815,38,43,583,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,-282,-282,-282,678,295,-282,-282,-282,203,297,-282',
'206,308,-282,86,589,-282,4,-282,216,-282,819,-282,36,-282,-282,-282',
'-282,-282,-282,-282,207,-282,251,-282,-438,2,8,12,17,22,29,-438,292',
'-82,47,53,-282,-282,-282,-282,-90,-282,90,679,-282,10,305,-523,25,16',
'18,26,671,34,-523,-523,-523,55,63,-523,-523,-523,81,-523,92,94,3,184',
'185,20,23,302,-523,-523,-523,822,193,61,66,69,73,78,83,-523,-523,182',
'-523,-523,-523,-523,-523,823,42,824,826,52,59,827,70,75,79,84,88,210',
'1,7,11,669,21,28,-256,38,43,-254,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,358,667,-523,-523,-523,203,518,-523',
'206,251,-523,86,-90,-523,4,-523,216,-523,219,-523,36,-523,-523,-523',
'-523,-523,-523,-523,207,-523,-523,-523,-82,2,8,12,17,22,29,518,518,251',
'47,53,-523,-523,-523,-523,-91,-523,90,251,-523,10,300,-523,25,16,18',
'26,831,34,-523,-523,-523,55,63,-523,-523,-523,81,-523,92,94,3,184,185',
'20,23,292,442,-523,251,299,193,194,196,69,73,78,83,-523,-523,182,-523',
'-523,-523,-523,-523,-82,190,292,841,52,59,414,70,75,79,84,88,-440,1',
'7,11,295,21,28,-440,295,297,520,855,295,297,-90,-503,-90,297,331,-90',
'-435,398,-523,845,439,-82,846,-435,400,-523,192,441,-82,206,251,-523',
'86,-254,-437,4,358,295,295,520,520,-437,297,297,643,353,-91,292,-91',
'335,338,-91,-523,-432,2,8,12,17,22,29,-432,311,312,47,53,-523,642,-523',
'232,638,-523,90,399,622,10,440,-523,187,16,18,26,30,34,-523,-523,-523',
'55,63,-523,-523,-523,81,-523,92,94,3,9,13,20,23,425,852,-523,-444,522',
'57,61,66,69,73,78,83,-523,-523,5,-523,-523,-523,-523,-523,37,42,853',
'51,52,59,456,70,75,79,84,88,-443,1,7,11,622,21,28,-443,38,43,416,331',
'-80,-86,856,403,469,417,295,-88,-94,-268,-523,297,285,-275,470,471,-268',
'-523,56,287,-275,72,251,-523,86,-274,295,4,280,14,353,297,-274,36,335',
'338,278,-504,-268,277,-257,74,864,-443,-523,-268,2,8,12,17,22,29,566',
'410,-276,47,53,-523,510,-523,868,-276,-523,90,-268,771,10,286,-275,25',
'16,18,26,870,34,771,492,-443,55,63,-274,490,491,81,-443,92,94,3,184',
'185,20,23,774,-268,591,271,589,193,194,196,69,73,78,83,890,585,182,-276',
'584,-276,583,892,639,190,-276,404,52,59,583,70,75,79,84,243,-504,1,7',
'11,884,21,28,885,-443,581,887,248,331,332,334,337,340,343,346,348,350',
'352,328,246,333,336,513,236,342,345,239,739,708,206,-274,891,86,439',
'-276,4,893,-274,479,353,814,330,-504,335,338,341,344,347,349,351,480',
'329,484,414,2,8,12,17,22,29,899,-274,900,47,53,771,251,339,-274,-227',
'508,90,331,-504,10,413,671,187,16,18,26,30,34,736,-63,-274,55,63,440',
'533,909,81,251,92,94,3,9,13,20,23,315,316,317,318,319,57,61,66,69,73',
'78,83,535,408,5,-321,-274,,,639,37,42,-321,51,52,59,,70,75,79,84,88',
'-275,1,7,11,,21,28,-275,38,43,,331,332,334,337,340,343,346,348,350,352',
'328,,333,336,840,,342,345,,56,,,72,,,86,,-321,4,,14,353,,330,36,335',
'338,341,344,347,349,351,74,329,-275,,,2,8,12,17,22,29,,,,47,53,,339',
'378,382,360,364,90,,,10,,,25,16,18,26,331,34,,732,733,55,63,729,7,11',
'81,,92,94,3,184,185,20,23,315,316,317,318,319,193,194,196,69,73,78,83',
'353,,182,,335,338,341,344,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,331,332,334,337,340,343,346,348,350,352,328,,333,336,,,342,345',
',203,,,206,,,86,,,4,,617,353,219,330,36,335,338,341,344,347,349,351',
'207,329,,,,2,8,12,17,22,29,,,,47,53,,339,,-227,718,,90,,,10,,,25,16',
'18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,315,316,317,318,319,57',
'61,66,69,73,78,83,,,5,378,382,360,364,,37,42,,51,52,59,,70,75,79,84',
'88,,1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,348,350,352,328',
',333,336,,,342,345,,56,,,72,,,86,,,4,,14,353,,330,36,335,338,341,344',
'347,349,351,74,329,,,,2,8,12,17,22,29,,,,47,53,,339,697,,718,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,,182,378,382,360,364,,,42,,,52,59,,70,75,79,84,88,',
'1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,348,350,352,328,,333',
'336,,,342,345,,203,,,206,,,86,,,4,,617,353,,330,36,335,338,341,344,347',
'349,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10,,,25,16',
'18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78',
'83,,574,5,380,383,362,,367,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,',
'21,28,,38,43,,331,332,334,337,340,343,346,348,350,352,328,,333,336,',
',342,345,,56,,,72,,,86,,,4,,14,353,,330,36,335,338,341,344,347,349,351',
'74,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10,,,25,16,18,26,331',
'34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83',
'353,,182,,335,338,341,344,,190,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
'331,332,334,337,340,343,346,348,350,352,328,331,333,336,,,342,345,574',
',380,383,362,877,367,,206,342,345,86,,353,4,330,,335,338,341,344,347',
'349,351,353,329,330,,335,338,341,344,,2,8,12,17,22,29,,,339,47,53,,574',
',380,383,362,90,367,,10,,,187,16,18,26,30,34,,,,55,63,,,,81,,92,94,3',
'9,13,20,23,,,,,570,57,61,66,69,73,78,83,808,,5,,,,,,37,42,,51,52,59',
',70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,348',
'350,352,328,,333,336,,,342,345,,56,,,72,,,86,,,4,,14,353,,330,36,335',
'338,341,344,347,349,351,74,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,',
'90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,',
'57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11',
',21,28,,38,43,,331,332,334,337,340,343,346,348,350,352,328,,333,336',
',,342,345,,56,,,72,,,86,,,4,,14,353,,330,36,335,338,341,344,347,349',
'351,74,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10,,,25,16,18,26',
',34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78',
'83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331',
'332,334,337,340,343,346,348,350,352,328,,333,336,,,342,345,,203,,,206',
',,86,,,4,,,353,,330,36,335,338,341,344,347,349,351,207,329,,,,2,8,12',
'17,22,29,,,,47,53,,339,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81',
',92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346',
'348,350,352,328,,333,336,,,342,345,,56,,,72,,,86,,,4,,14,353,,330,36',
'335,338,341,344,347,349,351,74,329,,,,2,8,12,17,22,29,,,,47,53,,339',
',,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23',
',,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,348,350,352,328,',
'333,336,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341,344',
'347,349,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10,,,25',
'16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73',
'78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43',
',331,332,334,337,340,343,346,348,350,352,328,,333,336,,,342,345,,56',
',,72,,,86,,,4,,14,353,,330,36,335,338,341,344,347,349,351,74,329,,,',
'2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,332,334,337',
'340,343,346,348,350,352,328,,333,336,,,342,345,,203,,,206,,,86,,,4,',
',353,,330,36,335,338,341,344,347,349,351,207,329,,,,2,8,12,17,22,29',
',,,47,53,,339,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3',
'9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79',
'84,88,,1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,348,350,352',
'328,,333,336,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341',
'344,347,349,351,74,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,,182,,,,,,,190,,,52,59,,70,75,79,84,88,,1,7,11,,21',
'28,331,332,334,337,340,343,346,348,350,352,328,331,333,336,,,342,345',
',,,,,192,,,290,342,345,86,,353,4,330,288,335,338,341,344,347,349,351',
'353,329,330,,335,338,341,344,,2,8,12,17,22,29,,,339,47,53,,574,,380',
'383,362,90,367,,10,,,187,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20',
'23,,,,,570,57,61,66,69,73,78,83,575,,182,,,,,,,42,,,52,59,,70,75,79',
'84,88,,1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,348,350,352',
'328,,333,336,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341',
'344,347,349,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,339,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,574,182,380,383,362,,367,,42,,,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,,331,,,,,,,570,,,,,,,,575,342,345,203,,,206,',
',86,,,4,,,,353,,36,,335,338,341,344,,,207,,,,,2,8,12,17,22,29,,,,47',
'53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20',
'23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,331,-524,-524,-524,-524,343,346,,,-524,-524,',
',,,,342,345,,56,,,72,,,86,,,4,,14,353,,330,36,335,338,341,344,347,349',
'351,74,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,',
'34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83',
',,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,-524',
'-524,-524,-524,343,346,,,-524,-524,,,,,,342,345,,203,,,206,,,86,,,4',
',,353,,330,36,335,338,341,344,347,349,351,207,329,,,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,331,-524,-524,-524,-524,343,346,,,-524',
'-524,,,,,,342,345,,203,,,206,,,86,,,4,,216,353,,330,36,335,338,341,344',
'347,349,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16',
'18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69',
'73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43',
',331,,,,,,,,,,,,,,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338',
'341,344,,,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196',
'69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38',
'43,,331,-524,-524,-524,-524,343,346,,,-524,-524,,,,,,342,345,,203,,',
'206,,,86,,,4,,,353,,330,36,335,338,341,344,347,349,351,207,329,,,,2',
'8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81',
',92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,',
'70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,-524,-524,-524,-524,343,346',
',,-524,-524,,,,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341',
'344,347,349,351,74,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196',
'69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38',
'43,,331,,,,,,,,,,,,,,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335',
'338,341,344,,,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,61',
'66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11,,21',
'28,,38,43,,331,,,,,,,,,,,,,,,,342,345,,203,,,206,,,86,,,4,,216,353,219',
'330,36,335,338,341,344,,,351,207,329,,,,2,8,12,17,22,29,,,,47,53,,,',
',,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,',
',,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,',
'1,7,11,,21,28,,38,43,,331,332,334,337,340,343,346,,,352,328,,,,,,342',
'345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341,344,347,349,351,207',
'329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55',
'63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,',
',,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,,,,,,,,,',
',,,,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341,344,,,351',
'207,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30,34',
',,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,',
',,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,332,334',
'337,340,343,346,348,,352,328,,,,,,342,345,,56,,,72,,,86,,,4,,14,353',
',330,36,335,338,341,344,347,349,351,74,329,,,,2,8,12,17,22,29,,,,47',
'53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23',
',,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7',
'11,,21,28,,38,43,,331,332,334,337,340,343,346,348,350,352,328,,-524',
'-524,,,342,345,,203,,,206,,,86,,,4,,,353,,330,36,335,338,341,344,347',
'349,351,74,329,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18',
'26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73',
'78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,',
'331,-524,-524,-524,-524,343,346,,,-524,-524,,,,,,342,345,,203,,,206',
',,86,,,4,,216,353,,330,36,335,338,341,344,347,349,351,207,329,,,,2,8',
'12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81',
',92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,331,332,334,337,340,343',
'346,348,350,352,328,,-524,-524,,,342,345,,203,,,206,,,86,,,4,,,353,',
'330,36,335,338,341,344,347,349,351,207,329,,,,2,8,12,17,22,29,,,,47',
'53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20',
'23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84',
'88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,',
',36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,-500',
'-500,-500,,-500,,,,-500,-500,,,,-500,,-500,-500,-500,-500,-500,-500',
'-500,,-500,,,,-500,-500,-500,-500,-500,-500,-500,,,-500,,,,,,,-500,',
',-500,-500,,-500,-500,-500,-500,-500,-500,-500,-500,-500,,-500,-500',
',-500,-500,,,,,,,,,,,,,,,,,,,,,-500,,,-500,-500,,-500,,,-500,,-500,',
'-500,,-500,,,,,,,,-500,,-500,,,-500,-500,-500,-500,-500,-500,,,,-500',
'-500,,,,,,,-500,,,-500,,,-500,16,18,26,30,34,,,,55,63,,,,81,,92,94,3',
'9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,323,,,86,,,4',
',14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73',
'78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,',
',,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12',
'17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92',
'94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,',
'10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193',
'194,196,69,73,78,83,,,182,,,,,,,190,,,52,59,,70,75,79,84,88,,1,7,11',
',21,28,376,,380,383,362,,367,,,,,,,,,,,,,,,,,192,,,290,,,86,,,4,,,,',
',365,,,,,,,,378,382,360,364,,2,8,12,17,22,29,747,,,47,53,,,,,,,90,,',
'10,,,187,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61',
'66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,',
'38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2',
'8,12,17,22,29,,,,47,53,295,,,,,297,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,',
',90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57',
'61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,',
'2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,-501,-501,-501,,-501,,,',
'-501,-501,,,,-501,,-501,-501,-501,-501,-501,-501,-501,,-501,,,,-501',
'-501,-501,-501,-501,-501,-501,,,-501,,,,,,,-501,,,-501,-501,,-501,-501',
'-501,-501,-501,-501,-501,-501,-501,,-501,-501,,-501,-501,,,,,,,,,,,',
',,,,,,,,,-501,,,-501,-501,,-501,,,-501,,-501,,-501,,-501,,,,,,,,-501',
',-501,,,-501,-501,-501,-501,-501,-501,,,,-501,-501,,,,,,,-501,,,-501',
',,-501,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,',
',2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,',
',,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,182,,,,,,,42,,',
'52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,',
',90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57',
'61,66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21',
'28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207',
',,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,',
',,,203,,,206,,,86,,,4,,450,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47',
'53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20',
'23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36',
',,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30',
'34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5',
',,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,',
',,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,61,66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79',
'84,88,210,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,617,,219,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,',
',2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,',
',,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,',
',42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,',
',,203,,,206,,,86,,,4,,754,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47',
'53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20',
'23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36',
',,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30',
'34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5',
',,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,',
',,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9',
'13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79',
'84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14',
',,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18',
'26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83',
',,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,',
',,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22',
'29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3',
'184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,190,,,52,59,',
'70,75,79,84,88,,1,7,11,,21,28,664,,380,383,362,,367,,,,,,,,,,,,,,,,',
'192,,,290,,,86,,,4,,,,,,365,,,,,,,,378,382,360,364,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,187,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73',
'78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,',
',,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17',
'22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92',
'94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,',
'70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86',
',,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,',
',25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,,182,,,,,,,190,,,52,59,,70,75,79,84,88,,1,7,11,,21',
'28,376,,380,383,362,,367,,,,,,,,,,,,,,,,,716,,,206,,,86,,,4,,,,,,365',
',577,,,,,,378,382,360,364,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,',
'187,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66',
'69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,',
'2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63',
',,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,',
'51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56',
',,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,',
',90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,',
',57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7',
'11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,',
',,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30,34',
',,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,',
',,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,',
',,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,',
'47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185',
'20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79',
'84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,',
',,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16',
'18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78',
'83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,',
',,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17',
'22,29,,,,47,53,,,,,,513,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92',
'94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,',
'10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61',
'66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21',
'28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,',
',,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',419,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90',
',,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193',
'194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,',
'21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207',
',,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,',
',,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53',
',,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23',
',,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,',
'1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36',
',,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,',
'34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5',
',,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,',
',,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47',
'53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20',
'23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84',
'88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,',
',36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18',
'26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73',
'78,83,,,182,,,,,,,190,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,376,,380',
'383,362,,367,,,,,,,,,,,,,,,,,192,,,290,,,86,,,4,,,,,,365,368,,,,,,,378',
'382,360,364,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,187,-506,-506',
'-506,,-506,,,,-506,-506,,,,-506,,-506,-506,-506,-506,-506,-506,-506',
',,,,,-506,-506,-506,-506,-506,-506,-506,,,-506,,,,,,,-506,,,-506,-506',
',-506,-506,-506,-506,-506,-506,-506,-506,-506,,-506,-506,,-506,-506',
',,,,,,,,,,,,,,,,,,,,-506,,,-506,-506,,-506,,,-506,,-506,,-506,,-506',
',,,,,,,-506,,,,,-506,-506,-506,-506,-506,-506,,,,-506,-506,,,,,,,-506',
',,-506,,,-506,-505,-505,-505,,-505,,,,-505,-505,,,,-505,,-505,-505,-505',
'-505,-505,-505,-505,,,,,,-505,-505,-505,-505,-505,-505,-505,,,-505,',
',,,,,-505,,,-505,-505,,-505,-505,-505,-505,-505,-505,-505,-505,-505',
',-505,-505,,-505,-505,,,,,,,,,,,,,,,,,,,,,-505,,,-505,-505,,-505,,,-505',
',-505,,-505,,-505,,,,,,,,-505,,,,,-505,-505,-505,-505,-505,-505,,,,-505',
'-505,,,,,,,-505,,,-505,,,-505,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196',
'69,73,78,83,,,182,,,,,,,190,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,376',
',380,383,362,,367,,,,,,,,,,,,,,,,,192,,,290,,,86,,,4,,,,,,365,,,,,,',
',378,382,360,364,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,187,16,18',
'26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73',
'78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,',
',,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12',
'17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92',
'94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,',
'10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66',
'69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38',
'43,,,,,,,,,,,,,,,,,,,,,203,,,206,,652,86,,,4,,,,219,,36,,,,,,,,74,,',
',,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,',
',,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53',
',,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,',
',,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11',
',21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,',
'74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55',
'63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,',
',,,,,190,,,52,59,,70,75,79,84,243,,1,7,11,,21,28,664,,380,383,362,,367',
',,,,,,,,,,,,,,,,239,,,206,,,86,,,4,,,,,,365,659,,,,,,,378,382,360,364',
',2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,187,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,,,86,,,4,,450,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,',
',,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23',
',,,,,193,61,66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210',
'1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,216,,,',
'36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18',
'26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83',
',,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,',
',,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,61,66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79',
'84,88,210,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,216,,219,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,61',
'66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11,,21',
'28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,466,,,4,,216,,219,,36,,,,',
',,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34',
',,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,',
',182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11,,21,28,,38,43,,,,,',
',,,,,,,,,,,,,,,203,,,206,,,86,,,4,,617,,,,36,,,,,,,,207,,,,,2,8,12,17',
'22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94',
'3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59',
',70,75,79,84,88,210,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,219,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90',
',,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193',
'194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11',
',21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,617,,219,,36,',
',,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,',
'34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83',
',,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,',
',,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22',
'29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3',
'184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70',
'75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86',
',,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,',
'25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,61,66',
'69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,216,,,,36,,,,,,,,207',
',,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,',
',,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53',
',,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23',
',,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88',
'210,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,',
',36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18',
'26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83',
',,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,',
',,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,61,66,69',
'73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11,,21,28,,38',
'43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,216,,,,36,,,,,,,,207,,,,',
'2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,',
',81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69',
'73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43',
',,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12',
'17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92',
'94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,',
'10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193',
'194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,',
'21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207',
',,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,',
',,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53',
',,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23',
',,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36',
',,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26',
',34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,182',
',,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,',
',,,,,,,203,,,206,,,86,,,4,,450,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29',
',,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184',
'185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73',
'78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43',
',,,,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12',
'17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92',
'94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70',
'75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86',
',,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,',
'25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196',
'69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38',
'43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8',
'12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81',
',92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,',
',90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,',
',,193,61,66,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1',
'7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,216,,,,36',
',,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26',
',34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78',
'83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,',
',,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17',
'22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94',
'3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,190,,,52,59',
',70,75,79,84,88,,1,7,11,,21,28,664,,380,383,362,,367,,,,,,,,,,,,,,,',
',192,,,206,,,86,,,4,,,,,,365,,,,,,,,378,382,360,364,,2,8,12,17,22,29',
',,,47,53,,,,507,,,90,,,10,,,187,16,18,26,,34,,,,55,63,,,,81,,92,94,3',
'184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70',
'75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86',
',,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,',
'25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69',
'73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38',
'43,,,,,,,,,,,,,,,,,,,,,56,,,323,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8',
'12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81',
',92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,510,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,',
',,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23',
',,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36',
',,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26',
'30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,',
',5,,,,,,37,42,46,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,',
',,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22',
'29,,,,47,53,,,,,,513,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92',
'94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,46,51,52,59',
',70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,',
'86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69',
'73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43',
',,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12',
'17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,',
'92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59',
',70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,72,,',
'86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194',
'196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,',
',2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,',
',,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,',
',42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,',
',,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53',
',,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23',
',,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88',
',1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36',
',,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26',
',34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,61,66,69,73,78,83',
',,182,,,,,,,42,,,52,59,,70,75,79,84,88,210,1,7,11,,21,28,,38,43,,,,',
',,,,,,,,,,,,,,,,203,,,206,,523,86,,,4,,216,,219,,36,,,,,,,,207,,,,,2',
'8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81',
',92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,',
',90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57',
'61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28',
',38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,',
'2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,',
',81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52',
'59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10',
',,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69',
'73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43',
',,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12',
'17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92',
'94,3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75',
'79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,',
'4,,,,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25',
'16,18,26,,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73',
'78,83,,,5,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,',
',,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,74,,,,,2,8,12,17',
'22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94',
'3,9,13,20,23,,,,,,57,61,66,69,73,78,83,,,5,,,,,,,42,,,52,59,,70,75,79',
'84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,',
',,,,36,,,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16',
'18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23,,,,,,57,61,66,69,73,78',
'83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,',
',,,,,,,,,,,,,,,,,,56,,,72,,,86,,,4,,14,,,,36,,,,,,,,74,,,,,2,8,12,17',
'22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94',
'3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59',
',70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206',
',,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,',
'10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193',
'194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,',
'21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207',
',,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63',
',,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,',
',,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,',
',,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53',
',,,,,,90,,,10,,,25,16,18,26,30,34,,,,55,63,,,,81,,92,94,3,9,13,20,23',
',,,,,57,61,66,69,73,78,83,,,5,,,,,,37,42,,51,52,59,,70,75,79,84,88,',
'1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,56,,,323,,,86,,,4,,14,,,,36',
',,,,,,,74,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,',
'34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83',
',,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,',
',,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22',
'29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3',
'184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70',
'75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86',
',,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,',
'25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,,,,193,194,196',
'69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1,7,11,,21,28,,38',
'43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8',
'12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81',
',92,94,3,184,185,20,23,,,,,,193,194,196,69,73,78,83,,,182,,,,,,,42,',
',52,59,,70,75,79,84,88,,1,7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203',
',,206,,,86,,,4,,,,,,36,,,,,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,',
',90,,,10,,,25,16,18,26,,34,,,,55,63,,,,81,,92,94,3,184,185,20,23,,,',
',,193,194,196,69,73,78,83,,,182,,,,,,,42,,,52,59,,70,75,79,84,88,,1',
'7,11,,21,28,,38,43,,,,,,,,,,,,,,,,,,,,,203,,,206,,,86,,,4,,,,,,36,,',
',,,,,207,,,,,2,8,12,17,22,29,,,,47,53,,,,,,,90,,,10,,,25,107,111,114',
'117,121,127,132,136,139,144,152,157,163,169,172,176,179,98,102,105,112',
'115,119,123,,,,140,145,149,153,164,166,174,177,180,99,101,104,109,113',
'116,125,130,135,138,142,147,,155,161,,,178,,,,,,,,,126,131,,143,148',
'151,156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110',
',120,124,129,134,137,141,146,150,154,160,170,,,181,272,,,,,,,,,,53,107',
'111,114,117,121,127,132,136,139,144,152,157,163,169,172,176,179,98,102',
'105,112,115,119,123,,,,140,145,149,153,164,166,174,177,180,99,101,104',
'109,113,116,125,130,135,138,142,147,,155,161,283,,178,,,,,,,,,126,131',
',143,148,151,156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,,,,,,',
',106,110,,120,124,129,134,137,141,146,150,154,160,170,,,181,272,,,,',
',,,,,53,107,111,114,117,121,127,132,136,139,144,152,157,163,169,172',
'176,179,98,102,105,112,115,119,123,,,,140,145,149,153,164,166,174,177',
'180,99,101,104,109,113,116,125,130,135,138,142,147,,155,161,,,178,,',
',,,,,,126,131,,143,148,151,156,162,168,173,,,97,103,,,,118,122,128,133',
',,,,,,,,,,,,106,110,,120,124,129,134,137,141,146,150,154,160,170,,,181',
'272,,,,,,,,,,53,107,111,114,117,121,127,132,136,139,144,152,157,163',
'169,172,176,179,98,102,105,112,115,119,123,,,,140,145,149,153,164,166',
'174,177,180,99,101,104,109,113,116,125,130,135,138,142,147,,155,161',
',,178,,,,,,,,,126,131,,143,148,151,156,162,168,173,,,97,103,,,,118,122',
'128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137,141,146,150,154,160',
'170,,,181,272,,,,,,,,,,53,107,111,114,117,121,127,132,136,139,144,152',
'157,163,169,172,176,179,98,102,105,112,115,119,123,,,,140,145,149,153',
'164,166,174,177,180,99,101,104,109,113,116,125,130,135,138,142,147,',
'155,161,,,178,,,,,,,,,126,131,,143,148,151,156,162,168,173,,,97,103',
',,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137,141,146',
'150,154,160,170,,,181,107,111,114,117,121,127,132,136,139,144,152,157',
'163,169,172,176,179,98,102,105,112,115,119,123,,,,140,145,149,153,164',
'166,174,177,180,99,101,104,109,113,116,125,130,135,138,142,147,,155',
'161,165,171,178,,96,,,,,,,126,131,,143,148,151,156,162,168,173,,,97',
'103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137,141',
'146,150,154,160,170,,,181,107,111,114,117,121,127,132,136,139,144,152',
'157,163,169,172,176,179,98,102,105,112,115,119,123,,,,140,145,149,153',
'164,166,174,177,180,99,101,104,109,113,116,125,130,135,138,142,147,',
'155,161,165,171,178,,96,,,,,,,126,131,,143,148,151,156,162,168,173,',
',97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137',
'141,146,150,154,160,170,,,181,107,111,114,117,121,127,132,136,139,144',
'152,157,163,169,172,176,179,98,102,105,112,115,119,123,,,,140,145,149',
'260,264,265,266,177,180,99,101,104,109,113,116,125,130,135,138,257,259',
',261,161,79,84,267,,1,,,,,,,126,131,,143,148,151,156,162,168,173,,,97',
'103,,,,118,122,128,133,,,,,,262,,,,,,,106,110,,120,124,129,134,137,141',
'146,150,154,160,170,495,496,181,,493,,,,,,,,,126,131,,143,148,151,156',
'162,168,173,,,97,103,,,,118,122,128,133,,,,,,251,,,,,,,106,110,,120',
'124,129,134,137,141,146,150,154,160,170,607,504,181,,605,,,,,,,,,126',
'131,,143,148,151,156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,,',
',,,,,106,110,,120,124,129,134,137,141,146,150,154,160,170,596,496,181',
',594,,,,,,,,,126,131,,143,148,151,156,162,168,173,,,97,103,,,,118,122',
'128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137,141,146,150,154,160',
'170,596,496,181,,594,,,,,,,,,126,131,,143,148,151,156,162,168,173,,',
'97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137,141',
'146,150,154,160,170,596,496,181,,594,,,,,,,,,126,131,,143,148,151,156',
'162,168,173,,,97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124',
'129,134,137,141,146,150,154,160,170,611,496,181,,610,,,,,,,,,126,131',
',143,148,151,156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,251,,',
',,,,106,110,,120,124,129,134,137,141,146,150,154,160,170,903,496,181',
',902,,,,,,,,,126,131,,143,148,151,156,162,168,173,,,97,103,,,,118,122',
'128,133,,,,,,251,,,,,,,106,110,,120,124,129,134,137,141,146,150,154',
'160,170,614,504,181,,613,,,,,,,,,126,131,,143,148,151,156,162,168,173',
',,97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137',
'141,146,150,154,160,170,631,504,181,,630,,,,,,,,,126,131,,143,148,151',
'156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120',
'124,129,134,137,141,146,150,154,160,170,596,496,181,,594,,,,,,,,,126',
'131,,143,148,151,156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,251',
',,,,,,106,110,,120,124,129,134,137,141,146,150,154,160,170,611,496,181',
',610,,,,,,,,,126,131,,143,148,151,156,162,168,173,,,97,103,,,,118,122',
'128,133,,,,,,251,,,,,,,106,110,,120,124,129,134,137,141,146,150,154',
'160,170,614,504,181,,613,,,,,,,,,126,131,,143,148,151,156,162,168,173',
',,97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137',
'141,146,150,154,160,170,596,496,181,,594,,,,,,,,,126,131,,143,148,151',
'156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,,,,,,,,106,110,,120',
'124,129,134,137,141,146,150,154,160,170,503,504,181,,500,,,,,,,,,126',
'131,,143,148,151,156,162,168,173,,,97,103,,,,118,122,128,133,,,,,,,',
',,,,,106,110,,120,124,129,134,137,141,146,150,154,160,170,631,504,181',
',859,,,,,,,,,126,131,,143,148,151,156,162,168,173,,,97,103,,,,118,122',
'128,133,,,,,,,,,,,,,106,110,,120,124,129,134,137,141,146,150,154,160',
'170,603,496,181,,601,,,,,,,,,126,131,,143,148,151,156,162,168,173,,',
'97,103,,,,118,122,128,133,,,,,,251,,,,,,,106,110,,120,124,129,134,137',
'141,146,150,154,160,170,906,504,181,,905,,,,,,,,,126,131,,143,148,151',
'156,162,168,173,,,97,103,,,,118,122,128,133,664,,380,383,362,,367,,',
',,,106,110,,120,124,129,134,137,141,146,150,154,160,170,,,181,,,,,,',
',,,365,659,,,,,,,378,382,360,364' ]
        racc_action_table = arr = ::Array.new(23197, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,0,0,310,375,592,0,0,24,243,303,0,15,0,0,0,0,0,0,0,607,687,687',
'459,49,0,0,0,0,0,0,0,775,695,0,830,186,475,475,265,0,0,0,0,0,0,265,0',
'0,0,0,0,402,0,0,0,464,0,0,402,0,0,243,464,259,49,568,359,359,243,695',
'259,49,24,243,269,687,637,775,775,775,775,0,459,459,0,607,607,0,895',
'895,0,459,0,24,243,436,0,15,568,355,186,355,464,592,0,592,402,375,592',
'0,0,0,0,0,0,310,243,310,0,0,310,186,303,607,303,475,0,303,436,0,607',
'614,0,891,891,891,269,891,614,614,614,891,891,614,614,614,891,614,891',
'891,891,891,891,891,891,359,614,614,614,190,891,891,891,891,891,891',
'891,614,614,891,614,614,614,614,614,621,891,563,621,891,891,188,891',
'891,891,891,891,891,891,891,891,215,891,891,644,891,891,437,614,614',
'614,614,614,614,614,614,614,614,614,614,614,614,739,60,614,614,614,891',
'614,614,891,60,614,891,202,614,891,614,891,614,437,614,891,614,614,614',
'614,614,614,614,891,614,614,614,413,891,891,891,891,891,891,215,215',
'215,891,891,614,614,614,614,739,614,891,610,614,891,614,613,891,3,3',
'3,202,3,613,613,613,3,3,613,613,613,3,613,3,3,3,3,3,3,3,548,413,613',
'613,646,3,3,3,3,3,3,3,613,613,3,613,613,613,613,613,610,3,418,418,3',
'3,545,3,3,3,3,3,258,3,3,3,159,3,3,258,649,611,469,613,613,613,613,613',
'613,613,613,613,613,613,613,613,613,205,650,613,613,613,3,613,613,3',
'199,613,3,199,613,3,613,3,613,469,613,418,613,613,613,613,613,613,613',
'541,613,902,613,611,3,3,3,3,3,3,159,159,159,3,3,613,613,613,613,205',
'613,3,192,613,3,613,503,3,4,4,4,257,4,503,503,503,4,4,257,503,503,4',
'503,4,4,4,4,4,4,4,225,503,654,225,735,4,4,4,4,4,4,4,503,503,4,503,503',
'503,503,503,226,4,655,226,4,4,534,4,4,4,4,4,4,4,4,4,249,4,4,657,4,4',
'533,503,503,503,503,503,503,503,503,503,503,503,503,503,503,65,65,503',
'503,503,4,503,902,4,902,503,4,902,325,4,771,771,503,325,503,4,503,503',
'503,503,503,503,503,4,503,503,503,601,4,4,4,4,4,4,249,249,249,4,4,503',
'503,735,503,735,503,4,735,503,4,503,500,4,5,5,5,95,5,500,500,500,5,5',
'95,500,500,5,500,5,5,5,5,5,5,5,881,660,881,662,593,5,5,5,5,5,5,5,500',
'500,5,500,500,500,500,500,601,5,304,304,5,5,631,5,5,5,5,5,201,5,5,5',
'229,5,5,201,5,5,664,500,500,500,500,500,500,500,500,500,500,500,500',
'500,500,601,665,500,500,500,5,500,601,5,5,500,5,524,242,5,690,690,500',
'670,500,5,500,500,500,500,500,500,500,5,500,201,500,182,5,5,5,5,5,5',
'229,229,229,5,5,500,500,593,500,593,500,5,593,500,5,500,75,5,880,880',
'880,880,880,75,75,75,880,880,75,75,75,880,75,880,880,880,880,880,880',
'880,25,25,75,75,75,880,880,880,880,880,880,880,75,75,880,75,75,75,75',
'75,880,880,521,880,880,880,675,880,880,880,880,880,217,880,880,880,517',
'880,880,242,880,880,514,75,75,75,75,75,75,75,75,75,75,75,75,75,75,493',
'242,75,75,75,880,242,75,880,681,75,880,82,75,880,75,880,75,218,75,880',
'75,75,75,75,75,75,75,880,75,685,75,758,880,880,880,880,880,880,758,509',
'493,880,880,75,75,75,75,493,75,880,75,75,880,567,66,880,9,9,9,221,9',
'66,66,66,9,9,66,66,66,9,66,9,9,9,9,9,9,9,758,66,66,66,694,9,9,9,9,9',
'9,9,66,66,9,66,66,66,66,66,506,9,583,583,9,9,629,9,9,9,9,9,9,9,9,9,244',
'9,9,244,9,9,569,66,66,66,66,66,66,66,66,66,66,66,66,66,66,679,663,66',
'66,66,9,663,66,9,66,66,9,698,66,9,66,9,66,9,66,9,66,66,66,66,66,66,66',
'9,66,66,66,699,9,9,9,9,9,9,244,244,679,9,9,66,66,66,66,679,66,9,194',
'66,9,571,61,9,10,10,10,704,10,61,61,61,10,10,61,61,61,10,61,10,10,10',
'10,10,10,10,187,187,61,61,573,10,10,10,10,10,10,10,61,61,10,61,61,61',
'61,61,711,10,712,713,10,10,714,10,10,10,10,10,10,10,10,10,227,10,10',
'716,10,10,717,61,61,61,61,61,61,61,61,61,61,61,61,61,61,495,444,61,61',
'61,10,444,61,10,61,61,10,718,61,10,61,10,61,734,61,10,61,61,61,61,61',
'61,61,10,61,501,61,260,10,10,10,10,10,10,260,228,495,10,10,61,61,61',
'61,495,61,10,499,61,10,56,494,10,13,13,13,486,13,494,494,494,13,13,494',
'494,494,13,494,13,13,13,13,13,13,13,51,494,494,494,745,13,13,13,13,13',
'13,13,494,494,13,494,494,494,494,494,746,13,748,752,13,13,753,13,13',
'13,13,13,13,13,13,13,485,13,13,755,13,13,483,494,494,494,494,494,494',
'494,494,494,494,494,494,494,494,757,478,494,494,494,13,804,494,13,494',
'494,13,903,494,13,494,13,494,13,494,13,494,494,494,494,494,494,494,13',
'494,494,494,603,13,13,13,13,13,13,847,851,760,13,13,494,494,494,494',
'906,494,13,762,494,13,46,595,13,14,14,14,765,14,595,595,595,14,14,595',
'595,595,14,595,14,14,14,14,14,14,14,768,239,595,196,45,14,14,14,14,14',
'14,14,595,595,14,595,595,595,595,595,603,14,463,777,14,14,620,14,14',
'14,14,14,266,14,14,14,634,14,14,266,804,634,804,804,354,804,903,906',
'903,354,551,903,267,189,595,780,237,603,782,267,189,595,14,237,603,14',
'595,595,14,784,264,14,462,847,851,847,851,264,847,851,461,551,906,42',
'906,551,551,906,595,261,14,14,14,14,14,14,261,628,628,14,14,595,460',
'595,14,451,595,14,189,795,14,237,597,14,879,879,879,879,879,597,597',
'597,879,879,597,597,597,879,597,879,879,879,879,879,879,879,618,798',
'597,62,305,879,879,879,879,879,879,879,597,597,879,597,597,597,597,597',
'879,879,800,879,879,879,248,879,879,879,879,879,195,879,879,879,435',
'879,879,195,879,879,211,554,62,305,805,197,253,211,628,62,305,191,597',
'628,40,442,255,256,191,597,879,40,442,879,597,597,879,630,44,879,35',
'879,554,44,630,879,554,554,33,630,876,31,828,879,829,195,597,876,879',
'879,879,879,879,879,564,211,909,879,879,597,401,597,833,909,597,879',
'191,835,879,40,442,879,16,16,16,836,16,839,283,878,16,16,630,283,283',
'16,878,16,16,16,16,16,16,16,840,876,381,29,376,16,16,16,16,16,16,16',
'875,374,16,736,373,909,371,875,455,16,736,198,16,16,858,16,16,16,16',
'16,859,16,16,16,860,16,16,861,878,369,863,22,455,455,455,455,455,455',
'455,455,455,455,455,19,455,455,356,16,455,455,16,612,578,16,905,875',
'16,715,736,16,877,905,271,455,715,455,905,455,455,455,455,455,455,455',
'274,455,278,204,16,16,16,16,16,16,886,605,888,16,16,889,606,455,605',
'455,289,16,293,605,16,203,894,16,867,867,867,867,867,604,320,905,867',
'867,715,321,904,867,602,867,867,867,867,867,867,867,322,322,322,322',
'322,867,867,867,867,867,867,867,324,200,867,6,605,,,608,867,867,6,867',
'867,867,,867,867,867,867,867,893,867,867,867,,867,867,893,867,867,,608',
'608,608,608,608,608,608,608,608,608,608,,608,608,870,,608,608,,867,',
',867,,,867,,6,867,,867,608,,608,867,608,608,608,608,608,608,608,867',
'608,893,,,867,867,867,867,867,867,,,,867,867,,608,870,870,870,870,867',
',,867,,,867,865,865,865,555,865,,598,598,865,865,598,598,598,865,,865',
'865,865,865,865,865,865,68,68,68,68,68,865,865,865,865,865,865,865,555',
',865,,555,555,555,555,,865,,,865,865,,865,865,865,865,865,,865,865,865',
',865,865,,865,865,,651,651,651,651,651,651,651,651,651,651,651,,651',
'651,,,651,651,,865,,,865,,,865,,,865,,865,651,865,651,865,651,651,651',
'651,651,651,651,865,651,,,,865,865,865,865,865,865,,,,865,865,,651,',
'651,591,,865,,,865,,,865,862,862,862,862,862,,,,862,862,,,,862,,862',
'862,862,862,862,862,862,696,696,696,696,696,862,862,862,862,862,862',
'862,,,862,591,591,591,591,,862,862,,862,862,862,,862,862,862,862,862',
',862,862,862,,862,862,,862,862,,549,549,549,549,549,549,549,549,549',
'549,549,,549,549,,,549,549,,862,,,862,,,862,,,862,,862,549,,549,862',
'549,549,549,549,549,549,549,862,549,,,,862,862,862,862,862,862,,,,862',
'862,,549,549,,811,,862,,,862,,,862,855,855,855,,855,,,,855,855,,,,855',
',855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,,,855',
'811,811,811,811,,,855,,,855,855,,855,855,855,855,855,,855,855,855,,855',
'855,,855,855,,516,516,516,516,516,516,516,516,516,516,516,,516,516,',
',516,516,,855,,,855,,,855,,,855,,855,516,,516,855,516,516,516,516,516',
'516,516,855,516,,,,855,855,855,855,855,855,,,,855,855,,516,,,,,855,',
',855,,,855,854,854,854,854,854,,,,854,854,,,,854,,854,854,854,854,854',
'854,854,,,,,,854,854,854,854,854,854,854,,808,854,808,808,808,,808,854',
'854,,854,854,854,,854,854,854,854,854,,854,854,854,,854,854,,854,854',
',511,511,511,511,511,511,511,511,511,511,511,,511,511,,,511,511,,854',
',,854,,,854,,,854,,854,511,,511,854,511,511,511,511,511,511,511,854',
'511,,,,854,854,854,854,854,854,,,,854,854,,511,,,,,854,,,854,,,854,846',
'846,846,552,846,,,,846,846,,,,846,,846,846,846,846,846,846,846,,,,,',
'846,846,846,846,846,846,846,552,,846,,552,552,552,552,,846,,,846,846',
',846,846,846,846,846,,846,846,846,,846,846,756,756,756,756,756,756,756',
'756,756,756,756,561,756,756,,,756,756,575,,575,575,575,846,575,,846',
'561,561,846,,756,846,756,,756,756,756,756,756,756,756,561,756,561,,561',
'561,561,561,,846,846,846,846,846,846,,,756,846,846,,706,,706,706,706',
'846,706,,846,,,846,845,845,845,845,845,,,,845,845,,,,845,,845,845,845',
'845,845,845,845,,,,,706,845,845,845,845,845,845,845,706,,845,,,,,,845',
'845,,845,845,845,,845,845,845,845,845,,845,845,845,,845,845,,845,845',
',850,850,850,850,850,850,850,850,850,850,850,,850,850,,,850,850,,845',
',,845,,,845,,,845,,845,850,,850,845,850,850,850,850,850,850,850,845',
'850,,,,845,845,845,845,845,845,,,,845,845,,850,,,,,845,,,845,,,845,825',
'825,825,825,825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,,',
'825,825,825,825,825,825,825,,,825,,,,,,825,825,,825,825,825,,825,825',
'825,825,825,,825,825,825,,825,825,,825,825,,488,488,488,488,488,488',
'488,488,488,488,488,,488,488,,,488,488,,825,,,825,,,825,,,825,,825,488',
',488,825,488,488,488,488,488,488,488,825,488,,,,825,825,825,825,825',
'825,,,,825,825,,488,,,,,825,,,825,,,825,821,821,821,,821,,,,821,821',
',,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821,821,821,821',
',,821,,,,,,,821,,,821,821,,821,821,821,821,821,,821,821,821,,821,821',
',821,821,,801,801,801,801,801,801,801,801,801,801,801,,801,801,,,801',
'801,,821,,,821,,,821,,,821,,,801,,801,821,801,801,801,801,801,801,801',
'821,801,,,,821,821,821,821,821,821,,,,821,821,,801,,,,,821,,,821,,,821',
'818,818,818,818,818,,,,818,818,,,,818,,818,818,818,818,818,818,818,',
',,,,818,818,818,818,818,818,818,,,818,,,,,,818,818,,818,818,818,,818',
'818,818,818,818,,818,818,818,,818,818,,818,818,,794,794,794,794,794',
'794,794,794,794,794,794,,794,794,,,794,794,,818,,,818,,,818,,,818,,818',
'794,,794,818,794,794,794,794,794,794,794,818,794,,,,818,818,818,818',
'818,818,,,,818,818,,794,,,,,818,,,818,,,818,36,36,36,,36,,,,36,36,,',
',36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,',
'36,36,,36,36,36,36,36,,36,36,36,,36,36,,36,36,,208,208,208,208,208,208',
'208,208,208,208,208,,208,208,,,208,208,,36,,,36,,,36,,,36,,,208,,208',
'36,208,208,208,208,208,208,208,36,208,,,,36,36,36,36,36,36,,,,36,36',
',208,,,,,36,,,36,,,36,817,817,817,817,817,,,,817,817,,,,817,,817,817',
'817,817,817,817,817,,,,,,817,817,817,817,817,817,817,,,817,,,,,,817',
'817,,817,817,817,,817,817,817,817,817,,817,817,817,,817,817,,817,817',
',692,692,692,692,692,692,692,692,692,692,692,,692,692,,,692,692,,817',
',,817,,,817,,,817,,817,692,,692,817,692,692,692,692,692,692,692,817',
'692,,,,817,817,817,817,817,817,,,,817,817,,692,,,,,817,,,817,,,817,38',
'38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38',
'38,,,38,,,,,,,38,,,38,38,,38,38,38,38,38,,38,38,38,,38,38,,38,38,,791',
'791,791,791,791,791,791,791,791,791,791,,791,791,,,791,791,,38,,,38',
',,38,,,38,,,791,,791,38,791,791,791,791,791,791,791,38,791,,,,38,38',
'38,38,38,38,,,,38,38,,791,,,,,38,,,38,,,38,797,797,797,,797,,,,797,797',
',,,797,,797,797,797,797,797,797,797,,,,,,797,797,797,797,797,797,797',
',,797,,,,,,,797,,,797,797,,797,797,797,797,797,,797,797,797,,797,797',
',797,797,,789,789,789,789,789,789,789,789,789,789,789,,789,789,,,789',
'789,,797,,,797,,,797,,,797,,,789,,789,797,789,789,789,789,789,789,789',
'797,789,,,,797,797,797,797,797,797,,,,797,797,,789,,,,,797,,,797,,,797',
'41,41,41,,41,,,,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41',
'41,41,,,41,,,,,,,41,,,41,41,,41,41,41,41,41,,41,41,41,,41,41,786,786',
'786,786,786,786,786,786,786,786,786,539,786,786,,,786,786,,,,,,41,,',
'41,539,539,41,,786,41,786,41,786,786,786,786,786,786,786,539,786,539',
',539,539,539,539,,41,41,41,41,41,41,,,786,41,41,,570,,570,570,570,41',
'570,,41,,,41,790,790,790,,790,,,,790,790,,,,790,,790,790,790,790,790',
'790,790,,,,,570,790,790,790,790,790,790,790,570,,790,,,,,,,790,,,790',
'790,,790,790,790,790,790,,790,790,790,,790,790,,790,790,,77,77,77,77',
'77,77,77,77,77,77,77,,77,77,,,77,77,,790,,,790,,,790,,,790,,,77,,77',
'790,77,77,77,77,77,77,77,790,77,,,,790,790,790,790,790,790,,,,790,790',
',77,,,,,790,,,790,,,790,43,43,43,,43,,,,43,43,,,,43,,43,43,43,43,43',
'43,43,,,,,,43,43,43,43,43,43,43,,365,43,365,365,365,,365,,43,,,43,43',
',43,43,43,43,43,,43,43,43,,43,43,,43,43,,,540,,,,,,,365,,,,,,,,365,540',
'540,43,,,43,,,43,,,43,,,,540,,43,,540,540,540,540,,,43,,,,,43,43,43',
'43,43,43,,,,43,43,,,,,,,43,,,43,,,43,778,778,778,778,778,,,,778,778',
',,,778,,778,778,778,778,778,778,778,,,,,,778,778,778,778,778,778,778',
',,778,,,,,,778,778,,778,778,778,,778,778,778,778,778,,778,778,778,,778',
'778,,778,778,,544,544,544,544,544,544,544,,,544,544,,,,,,544,544,,778',
',,778,,,778,,,778,,778,544,,544,778,544,544,544,544,544,544,544,778',
'544,,,,778,778,778,778,778,778,,,,778,778,,,,,,,778,,,778,,,778,774',
'774,774,,774,,,,774,774,,,,774,,774,774,774,774,774,774,774,,,,,,774',
'774,774,774,774,774,774,,,774,,,,,,,774,,,774,774,,774,774,774,774,774',
',774,774,774,,774,774,,774,774,,542,542,542,542,542,542,542,,,542,542',
',,,,,542,542,,774,,,774,,,774,,,774,,,542,,542,774,542,542,542,542,542',
'542,542,774,542,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774,,,774',
',,774,764,764,764,,764,,,,764,764,,,,764,,764,764,764,764,764,764,764',
',,,,,764,764,764,764,764,764,764,,,764,,,,,,,764,,,764,764,,764,764',
'764,764,764,,764,764,764,,764,764,,764,764,,538,538,538,538,538,538',
'538,,,538,538,,,,,,538,538,,764,,,764,,,764,,,764,,764,538,,538,764',
'538,538,538,538,538,538,538,764,538,,,,764,764,764,764,764,764,,,,764',
'764,,,,,,,764,,,764,,,764,754,754,754,,754,,,,754,754,,,,754,,754,754',
'754,754,754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,,,754',
',,754,754,,754,754,754,754,754,,754,754,754,,754,754,,754,754,,553,',
',,,,,,,,,,,,,,553,553,,754,,,754,,,754,,,754,,,553,,553,754,553,553',
'553,553,,,553,754,553,,,,754,754,754,754,754,754,,,,754,754,,,,,,,754',
',,754,,,754,740,740,740,,740,,,,740,740,,,,740,,740,740,740,740,740',
'740,740,,,,,,740,740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,',
'740,740,740,740,740,,740,740,740,,740,740,,740,740,,550,550,550,550',
'550,550,550,,,550,550,,,,,,550,550,,740,,,740,,,740,,,740,,,550,,550',
'740,550,550,550,550,550,550,550,740,550,,,,740,740,740,740,740,740,',
',,740,740,,,,,,,740,,,740,,,740,55,55,55,,55,,,,55,55,,,,55,,55,55,55',
'55,55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,,55,55,55',
'55,55,,55,55,55,,55,55,,55,55,,547,547,547,547,547,547,547,,,547,547',
',,,,,547,547,,55,,,55,,,55,,,55,,,547,,547,55,547,547,547,547,547,547',
'547,55,547,,,,55,55,55,55,55,55,,,,55,55,,,,,,,55,,,55,,,55,738,738',
'738,,738,,,,738,738,,,,738,,738,738,738,738,738,738,738,,,,,,738,738',
'738,738,738,738,738,,,738,,,,,,,738,,,738,738,,738,738,738,738,738,',
'738,738,738,,738,738,,738,738,,556,,,,,,,,,,,,,,,,556,556,,738,,,738',
',,738,,,738,,,556,,556,738,556,556,556,556,,,556,738,556,,,,738,738',
'738,738,738,738,,,,738,738,,,,,,,738,,,738,,,738,57,57,57,,57,,,,57',
'57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,',
'57,,,57,57,,57,57,57,57,57,57,57,57,57,,57,57,,57,57,,557,,,,,,,,,,',
',,,,,557,557,,57,,,57,,,57,,,57,,57,557,57,557,57,557,557,557,557,,',
'557,57,557,,,,57,57,57,57,57,57,,,,57,57,,,,,,,57,,,57,,,57,737,737',
'737,,737,,,,737,737,,,,737,,737,737,737,737,737,737,737,,,,,,737,737',
'737,737,737,737,737,,,737,,,,,,,737,,,737,737,,737,737,737,737,737,',
'737,737,737,,737,737,,737,737,,558,558,558,558,558,558,558,,,558,558',
',,,,,558,558,,737,,,737,,,737,,,737,,,558,,558,737,558,558,558,558,558',
'558,558,737,558,,,,737,737,737,737,737,737,,,,737,737,,,,,,,737,,,737',
',,737,333,333,333,,333,,,,333,333,,,,333,,333,333,333,333,333,333,333',
',,,,,333,333,333,333,333,333,333,,,333,,,,,,,333,,,333,333,,333,333',
'333,333,333,,333,333,333,,333,333,,333,333,,559,,,,,,,,,,,,,,,,559,559',
',333,,,333,,,333,,,333,,,559,,559,333,559,559,559,559,,,559,333,559',
',,,333,333,333,333,333,333,,,,333,333,,,,,,,333,,,333,,,333,702,702',
'702,702,702,,,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702',
'702,702,702,702,702,702,,,702,,,,,,702,702,,702,702,702,,702,702,702',
'702,702,,702,702,702,,702,702,,702,702,,560,560,560,560,560,560,560',
'560,,560,560,,,,,,560,560,,702,,,702,,,702,,,702,,702,560,,560,702,560',
'560,560,560,560,560,560,702,560,,,,702,702,702,702,702,702,,,,702,702',
',,,,,,702,,,702,,,702,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63',
'63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,,63,63,63,63,63,',
'63,63,63,,63,63,,63,63,,546,546,546,546,546,546,546,546,546,546,546',
',546,546,,,546,546,,63,,,63,,,63,,,63,,,546,,546,63,546,546,546,546',
'546,546,546,63,546,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,,63,,,63',
'700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,',
',700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,,700,700,700',
'700,700,,700,700,700,,700,700,,700,700,,562,562,562,562,562,562,562',
',,562,562,,,,,,562,562,,700,,,700,,,700,,,700,,700,562,,562,700,562',
'562,562,562,562,562,562,700,562,,,,700,700,700,700,700,700,,,,700,700',
',,,,,,700,,,700,,,700,332,332,332,,332,,,,332,332,,,,332,,332,332,332',
'332,332,332,332,,,,,,332,332,332,332,332,332,332,,,332,,,,,,,332,,,332',
'332,,332,332,332,332,332,,332,332,332,,332,332,,332,332,,543,543,543',
'543,543,543,543,543,543,543,543,,543,543,,,543,543,,332,,,332,,,332',
',,332,,,543,,543,332,543,543,543,543,543,543,543,332,543,,,,332,332',
'332,332,332,332,,,,332,332,,,,,,,332,,,332,,,332,697,697,697,,697,,',
',697,697,,,,697,,697,697,697,697,697,697,697,,,,,,697,697,697,697,697',
'697,697,,,697,,,,,,,697,,,697,697,,697,697,697,697,697,,697,697,697',
',697,697,,697,697,,,,,,,,,,,,,,,,,,,,,697,,,697,,,697,,,697,,,,,,697',
',,,,,,,697,,,,,697,697,697,697,697,697,,,,697,697,,,,,,,697,,,697,,',
'697,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,70,,,,70,70,70',
'70,70,70,70,,,70,,,,,,,70,,,70,70,,70,70,70,70,70,70,70,70,70,,70,70',
',70,70,,,,,,,,,,,,,,,,,,,,,70,,,70,70,,70,,,70,,70,,70,,70,,,,,,,,70',
',70,,,70,70,70,70,70,70,,,,70,70,,,,,,,70,,,70,,,70,72,72,72,72,72,',
',,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,',
',,,,72,72,,72,72,72,,72,72,72,72,72,,72,72,72,,72,72,,72,72,,,,,,,,',
',,,,,,,,,,,,72,,,72,,,72,,,72,,72,,,,72,,,,,,,,72,,,,,72,72,72,72,72',
'72,,,,72,72,,,,,,,72,,,72,,,72,74,74,74,,74,,,,74,74,,,,74,,74,74,74',
'74,74,74,74,,,,,,74,74,74,74,74,74,74,,,74,,,,,,,74,,,74,74,,74,74,74',
'74,74,,74,74,74,,74,74,,74,74,,,,,,,,,,,,,,,,,,,,,74,,,74,,,74,,,74',
',,,,,74,,,,,,,,74,,,,,74,74,74,74,74,74,,,,74,74,,,,,,,74,,,74,,,74',
'331,331,331,,331,,,,331,331,,,,331,,331,331,331,331,331,331,331,,,,',
',331,331,331,331,331,331,331,,,331,,,,,,,331,,,331,331,,331,331,331',
'331,331,,331,331,331,,331,331,,331,331,,,,,,,,,,,,,,,,,,,,,331,,,331',
',,331,,,331,,,,,,331,,,,,,,,331,,,,,331,331,331,331,331,331,,,,331,331',
',,,,,,331,,,331,,,331,684,684,684,,684,,,,684,684,,,,684,,684,684,684',
'684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,,,684,,,684',
'684,,684,684,684,684,684,,684,684,684,,684,684,626,,626,626,626,,626',
',,,,,,,,,,,,,,,,684,,,684,,,684,,,684,,,,,,626,,,,,,,,626,626,626,626',
',684,684,684,684,684,684,626,,,684,684,,,,,,,684,,,684,,,684,81,81,81',
',81,,,,81,81,,,,81,,81,81,81,81,81,81,81,,,,,,81,81,81,81,81,81,81,',
',81,,,,,,,81,,,81,81,,81,81,81,81,81,,81,81,81,,81,81,,81,81,,,,,,,',
',,,,,,,,,,,,,81,,,81,,,81,,,81,,,,,,81,,,,,,,,81,,,,,81,81,81,81,81',
'81,,,,81,81,81,,,,,81,81,,,81,,,81,683,683,683,,683,,,,683,683,,,,683',
',683,683,683,683,683,683,683,,,,,,683,683,683,683,683,683,683,,,683',
',,,,,,683,,,683,683,,683,683,683,683,683,,683,683,683,,683,683,,683',
'683,,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,,,683,,,,,,683,,,,,,,,683,,',
',,683,683,683,683,683,683,,,,683,683,,,,,,,683,,,683,,,683,86,86,86',
',86,,,,86,86,,,,86,,86,86,86,86,86,86,86,,,,,,86,86,86,86,86,86,86,',
',86,,,,,,,86,,,86,86,,86,86,86,86,86,,86,86,86,,86,86,,86,86,,,,,,,',
',,,,,,,,,,,,,86,,,86,,,86,,,86,,,,,,86,,,,,,,,86,,,,,86,86,86,86,86',
'86,,,,86,86,,,,,,,86,,,86,,,86,88,88,88,,88,,,,88,88,,,,88,,88,88,88',
'88,88,88,88,,88,,,,88,88,88,88,88,88,88,,,88,,,,,,,88,,,88,88,,88,88',
'88,88,88,88,88,88,88,,88,88,,88,88,,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88',
',,88,,88,,88,,88,,,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88,,,,,,,88',
',,88,,,88,680,680,680,,680,,,,680,680,,,,680,,680,680,680,680,680,680',
'680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,,680',
'680,680,680,680,,680,680,680,,680,680,,680,680,,,,,,,,,,,,,,,,,,,,,680',
',,680,,,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680,680,680,680,680,,',
',680,680,,,,,,,680,,,680,,,680,678,678,678,,678,,,,678,678,,,,678,,678',
'678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678,,,,,',
',678,,,678,678,,678,678,678,678,678,,678,678,678,,678,678,,678,678,',
',,,,,,,,,,,,,,,,,,,678,,,678,,,678,,,678,,,,,,678,,,,,,,,678,,,,,678',
'678,678,678,678,678,,,,678,678,,,,,,,678,,,678,,,678,673,673,673,,673',
',,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673',
'673,673,673,,,673,,,,,,,673,,,673,673,,673,673,673,673,673,,673,673',
'673,,673,673,,673,673,,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,,,673,,,,',
',673,,,,,,,,673,,,,,673,673,673,673,673,673,,,,673,673,,,,,,,673,,,673',
',,673,671,671,671,,671,,,,671,671,,,,671,,671,671,671,671,671,671,671',
',,,,,671,671,671,671,671,671,671,,,671,,,,,,,671,,,671,671,,671,671',
'671,671,671,,671,671,671,,671,671,,671,671,,,,,,,,,,,,,,,,,,,,,671,',
',671,,,671,,,671,,671,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671',
',,,671,671,,,,,,,671,,,671,,,671,666,666,666,666,666,,,,666,666,,,,666',
',666,666,666,666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666',
',,,,,666,666,,666,666,666,,666,666,666,666,666,,666,666,666,,666,666',
',666,666,,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,,,666,,666,,,,666,,,,,',
',,666,,,,,666,666,666,666,666,666,,,,666,666,,,,,,,666,,,666,,,666,653',
'653,653,653,653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,',
'653,653,653,653,653,653,653,,,653,,,,,,653,653,,653,653,653,,653,653',
'653,653,653,,653,653,653,,653,653,,653,653,,,,,,,,,,,,,,,,,,,,,653,',
',653,,,653,,,653,,653,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653',
',,,653,653,,,,,,,653,,,653,,,653,643,643,643,,643,,,,643,643,,,,643',
',643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643',
',,,,,,643,,,643,643,,643,643,643,643,643,643,643,643,643,,643,643,,643',
'643,,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,,,643,,643,,643,,643,,,,,,,',
'643,,,,,643,643,643,643,643,643,,,,643,643,,,,,,,643,,,643,,,643,639',
'639,639,,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639',
'639,639,639,639,639,639,,,639,,,,,,,639,,,639,639,,639,639,639,639,639',
',639,639,639,,639,639,,639,639,,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,',
',639,,,,,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,,639,639,,,,',
',,639,,,639,,,639,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638',
'638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638',
',638,638,638,638,638,,638,638,638,,638,638,,638,638,,,,,,,,,,,,,,,,',
',,,,638,,,638,,,638,,,638,,638,,,,638,,,,,,,,638,,,,,638,638,638,638',
'638,638,,,,638,638,,,,,,,638,,,638,,,638,636,636,636,636,636,,,,636',
'636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636',
'636,,,636,,,,,,636,636,,636,636,636,,636,636,636,636,636,,636,636,636',
',636,636,,636,636,,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,,,636,,636,,,',
'636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,,636',
',,636,635,635,635,635,635,,,,635,635,,,,635,,635,635,635,635,635,635',
'635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,635,635,,635,635,635',
',635,635,635,635,635,,635,635,635,,635,635,,635,635,,,,,,,,,,,,,,,,',
',,,,635,,,635,,,635,,,635,,635,,,,635,,,,,,,,635,,,,,635,635,635,635',
'635,635,,,,635,635,,,,,,,635,,,635,,,635,627,627,627,627,627,,,,627',
'627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627,627,627,627,627',
'627,,,627,,,,,,627,627,,627,627,627,,627,627,627,627,627,,627,627,627',
',627,627,,627,627,,,,,,,,,,,,,,,,,,,,,627,,,627,,,627,,,627,,627,,,',
'627,,,,,,,,627,,,,,627,627,627,627,627,627,,,,627,627,,,,,,,627,,,627',
',,627,624,624,624,624,624,,,,624,624,,,,624,,624,624,624,624,624,624',
'624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,624,624,,624,624,624',
',624,624,624,624,624,,624,624,624,,624,624,,624,624,,,,,,,,,,,,,,,,',
',,,,624,,,624,,,624,,,624,,624,,,,624,,,,,,,,624,,,,,624,624,624,624',
'624,624,,,,624,624,,,,,,,624,,,624,,,624,622,622,622,,622,,,,622,622',
',,,622,,622,622,622,622,622,622,622,,,,,,622,622,622,622,622,622,622',
',,622,,,,,,,622,,,622,622,,622,622,622,622,622,,622,622,622,,622,622',
'769,,769,769,769,,769,,,,,,,,,,,,,,,,,622,,,622,,,622,,,622,,,,,,769',
',,,,,,,769,769,769,769,,622,622,622,622,622,622,,,,622,622,,,,,,,622',
',,622,,,622,617,617,617,,617,,,,617,617,,,,617,,617,617,617,617,617',
'617,617,,,,,,617,617,617,617,617,617,617,,,617,,,,,,,617,,,617,617,',
'617,617,617,617,617,,617,617,617,,617,617,,617,617,,,,,,,,,,,,,,,,,',
',,,617,,,617,,,617,,,617,,,,,,617,,,,,,,,617,,,,,617,617,617,617,617',
'617,,,,617,617,,,,,,,617,,,617,,,617,600,600,600,,600,,,,600,600,,,',
'600,,600,600,600,600,600,600,600,,,,,,600,600,600,600,600,600,600,,',
'600,,,,,,,600,,,600,600,,600,600,600,600,600,,600,600,600,,600,600,',
'600,600,,,,,,,,,,,,,,,,,,,,,600,,,600,,,600,,,600,,,,,,600,,,,,,,,600',
',,,,600,600,600,600,600,600,,,,600,600,,,,,,,600,,,600,,,600,599,599',
'599,599,599,,,,599,599,,,,599,,599,599,599,599,599,599,599,,,,,,599',
'599,599,599,599,599,599,,,599,,,,,,599,599,,599,599,599,,599,599,599',
'599,599,,599,599,599,,599,599,,599,599,,,,,,,,,,,,,,,,,,,,,599,,,599',
',,599,,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,,,,599',
'599,,,,,,,599,,,599,,,599,589,589,589,,589,,,,589,589,,,,589,,589,589',
'589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589',
',,589,589,,589,589,589,589,589,,589,589,589,,589,589,368,,368,368,368',
',368,,,,,,,,,,,,,,,,,589,,,589,,,589,,,589,,,,,,368,,368,,,,,,368,368',
'368,368,,589,589,589,589,589,589,,,,589,589,,,,,,,589,,,589,,,589,587',
'587,587,587,587,,,,587,587,,,,587,,587,587,587,587,587,587,587,,,,,',
'587,587,587,587,587,587,587,,,587,,,,,,587,587,,587,587,587,,587,587',
'587,587,587,,587,587,587,,587,587,,587,587,,,,,,,,,,,,,,,,,,,,,587,',
',587,,,587,,,587,,587,,,,587,,,,,,,,587,,,,,587,587,587,587,587,587',
',,,587,587,,,,,,,587,,,587,,,587,586,586,586,586,586,,,,586,586,,,,586',
',586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586',
',,,,,586,586,,586,586,586,,586,586,586,586,586,,586,586,586,,586,586',
',586,586,,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,,,586,,586,,,,586,,,,,',
',,586,,,,,586,586,586,586,586,586,,,,586,586,,,,,,,586,,,586,,,586,565',
'565,565,565,565,,,,565,565,,,,565,,565,565,565,565,565,565,565,,,,,',
'565,565,565,565,565,565,565,,,565,,,,,,565,565,,565,565,565,,565,565',
'565,565,565,,565,565,565,,565,565,,565,565,,,,,,,,,,,,,,,,,,,,,565,',
',565,,,565,,,565,,565,,,,565,,,,,,,,565,,,,,565,565,565,565,565,565',
',,,565,565,,,,,,,565,,,565,,,565,206,206,206,206,206,,,,206,206,,,,206',
',206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206',
',,,,,206,206,,206,206,206,,206,206,206,206,206,,206,206,206,,206,206',
',206,206,,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,,,206,,206,,,,206,,,,,',
',,206,,,,,206,206,206,206,206,206,,,,206,206,,,,,,,206,,,206,,,206,207',
'207,207,,207,,,,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207',
'207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,,207,207,207,207,207',
',207,207,207,,207,207,,207,207,,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,',
',207,,,,,,207,,,,,,,,207,,,,,207,207,207,207,207,207,,,,207,207,,,,',
',,207,,,207,,,207,536,536,536,536,536,,,,536,536,,,,536,,536,536,536',
'536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,536,536',
',536,536,536,,536,536,536,536,536,,536,536,536,,536,536,,536,536,,,',
',,,,,,,,,,,,,,,,,536,,,536,,,536,,,536,,536,,,,536,,,,,,,,536,,,,,536',
'536,536,536,536,536,,,,536,536,,,,,,536,536,,,536,,,536,210,210,210',
',210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210',
'210,210,210,210,,,210,,,,,,,210,,,210,210,,210,210,210,210,210,,210',
'210,210,,210,210,,210,210,,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,,,210',
',,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210',
',,210,,,210,525,525,525,525,525,,,,525,525,,,,525,,525,525,525,525,525',
'525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,525,525,,525,525',
'525,,525,525,525,525,525,,525,525,525,,525,525,,525,525,,,,,,,,,,,,',
',,,,,,,,525,,,525,,,525,,,525,,525,,,,525,,,,,,,,525,,,,,525,525,525',
'525,525,525,,,,525,525,,,,,,,525,,,525,,,525,213,213,213,,213,,,,213',
'213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213',
'213,,,213,,,,,,,213,,,213,213,,213,213,213,213,213,,213,213,213,,213',
'213,,213,213,,,,,,,,,,,,,,,,,,,,,213,,,213,,213,213,,,213,,,,,,213,',
',,,,,,213,,,,,213,213,213,213,213,213,,,,213,213,,,,,,,213,,,213,,,213',
'522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,',
',522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,,522,522,522',
'522,522,,522,522,522,,522,522,,522,522,,,,,,,,,,,,,,,,,,,,,522,,,522',
',,522,,,522,,,,,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,,,522,522',
',,,,,,522,,,522,,,522,216,216,216,,216,,,,216,216,,,,216,,216,216,216',
'216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216',
'216,,216,216,216,216,216,,216,216,216,,216,216,,216,216,,,,,,,,,,,,',
',,,,,,,,216,,,216,,,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216',
'216,216,,,,216,216,,,,,,,216,,,216,,,216,519,519,519,519,519,,,,519',
'519,,,,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519,519',
'519,,,519,,,,,,519,519,,519,519,519,,519,519,519,519,519,,519,519,519',
',519,519,,519,519,,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,,,519,,519,,,',
'519,,,,,,,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,,519',
',,519,510,510,510,,510,,,,510,510,,,,510,,510,510,510,510,510,510,510',
',,,,,510,510,510,510,510,510,510,,,510,,,,,,,510,,,510,510,,510,510',
'510,510,510,,510,510,510,,510,510,,510,510,,,,,,,,,,,,,,,,,,,,,510,',
',510,,,510,,,510,,,,,,510,,,,,,,,510,,,,,510,510,510,510,510,510,,,',
'510,510,,,,,,,510,,,510,,,510,219,219,219,,219,,,,219,219,,,,219,,219',
'219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,',
',219,,,219,219,,219,219,219,219,219,,219,219,219,,219,219,,219,219,',
',,,,,,,,,,,,,,,,,,,219,,,219,,,219,,,219,,,,,,219,,,,,,,,219,,,,,219',
'219,219,219,219,219,,,,219,219,,,,,,,219,,,219,,,219,507,507,507,,507',
',,,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507',
'507,507,507,,,507,,,,,,,507,,,507,507,,507,507,507,507,507,,507,507',
'507,,507,507,90,,90,90,90,,90,,,,,,,,,,,,,,,,,507,,,507,,,507,,,507',
',,,,,90,90,,,,,,,90,90,90,90,,507,507,507,507,507,507,,,,507,507,,,',
',,,507,,,507,,,507,505,505,505,,505,,,,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505',
',505,505,505,505,505,505,505,505,505,,505,505,,505,505,,,,,,,,,,,,,',
',,,,,,,505,,,505,505,,505,,,505,,505,,505,,505,,,,,,,,505,,,,,505,505',
'505,505,505,505,,,,505,505,,,,,,,505,,,505,,,505,504,504,504,,504,,',
',504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504,504,504,504',
'504,504,,,504,,,,,,,504,,,504,504,,504,504,504,504,504,504,504,504,504',
',504,504,,504,504,,,,,,,,,,,,,,,,,,,,,504,,,504,504,,504,,,504,,504',
',504,,504,,,,,,,,504,,,,,504,504,504,504,504,504,,,,504,504,,,,,,,504',
',,504,,,504,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334',
'334,334,,,,,,334,334,334,334,334,334,334,,,334,,,,,,,334,,,334,334,',
'334,334,334,334,334,,334,334,334,,334,334,,334,334,,,,,,,,,,,,,,,,,',
',,,334,,,334,,,334,,,334,,,,,,334,,,,,,,,334,,,,,334,334,334,334,334',
'334,,,,334,334,,,,,,,334,,,334,,,334,232,232,232,,232,,,,232,232,,,',
'232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,',
'232,,,,,,,232,,,232,232,,232,232,232,232,232,,232,232,232,,232,232,581',
',581,581,581,,581,,,,,,,,,,,,,,,,,232,,,232,,,232,,,232,,,,,,581,,,',
',,,,581,581,581,581,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,',
'232,,,232,471,471,471,,471,,,,471,471,,,,471,,471,471,471,471,471,471',
'471,,,,,,471,471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,,471',
'471,471,471,471,,471,471,471,,471,471,,471,471,,,,,,,,,,,,,,,,,,,,,471',
',,471,,,471,,,471,,,,,,471,,,,,,,,471,,,,,471,471,471,471,471,471,,',
',471,471,,,,,,,471,,,471,,,471,470,470,470,,470,,,,470,470,,,,470,,470',
'470,470,470,470,470,470,,,,,,470,470,470,470,470,470,470,,,470,,,,,',
',470,,,470,470,,470,470,470,470,470,,470,470,470,,470,470,,470,470,',
',,,,,,,,,,,,,,,,,,,470,,,470,,,470,,,470,,,,,,470,,,,,,,,470,,,,,470',
'470,470,470,470,470,,,,470,470,,,,,,,470,,,470,,,470,466,466,466,,466',
',,,466,466,,,,466,,466,466,466,466,466,466,466,,,,,,466,466,466,466',
'466,466,466,,,466,,,,,,,466,,,466,466,,466,466,466,466,466,,466,466',
'466,,466,466,,466,466,,,,,,,,,,,,,,,,,,,,,466,,,466,,466,466,,,466,',
',,466,,466,,,,,,,,466,,,,,466,466,466,466,466,466,,,,466,466,,,,,,,466',
',,466,,,466,450,450,450,,450,,,,450,450,,,,450,,450,450,450,450,450',
'450,450,,,,,,450,450,450,450,450,450,450,,,450,,,,,,,450,,,450,450,',
'450,450,450,450,450,,450,450,450,,450,450,,450,450,,,,,,,,,,,,,,,,,',
',,,450,,,450,,,450,,,450,,,,,,450,,,,,,,,450,,,,,450,450,450,450,450',
'450,,,,450,450,,,,,,,450,,,450,,,450,445,445,445,,445,,,,445,445,,,',
'445,,445,445,445,445,445,445,445,,,,,,445,445,445,445,445,445,445,,',
'445,,,,,,,445,,,445,445,,445,445,445,445,445,,445,445,445,,445,445,',
'445,445,,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,,,445,,,,,,445,,,,,,,,445',
',,,,445,445,445,445,445,445,,,,445,445,,,,,,,445,,,445,,,445,245,245',
'245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,,245,245,245,245,245,',
'245,245,245,,245,245,832,,832,832,832,,832,,,,,,,,,,,,,,,,,245,,,245',
',,245,,,245,,,,,,832,832,,,,,,,832,832,832,832,,245,245,245,245,245',
'245,,,,245,245,,,,,,,245,,,245,,,245,246,246,246,,246,,,,246,246,,,',
'246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,',
'246,,,,,,,246,,,246,246,,246,246,246,246,246,,246,246,246,,246,246,',
'246,246,,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,,,246,,246,,,,246,,,,,,',
',246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,,,246,440',
'440,440,,440,,,,440,440,,,,440,,440,440,440,440,440,440,440,,,,,,440',
'440,440,440,440,440,440,,,440,,,,,,,440,,,440,440,,440,440,440,440,440',
'440,440,440,440,,440,440,,440,440,,,,,,,,,,,,,,,,,,,,,440,,,440,,,440',
',,440,,440,,,,440,,,,,,,,440,,,,,440,440,440,440,440,440,,,,440,440',
',,,,,,440,,,440,,,440,438,438,438,,438,,,,438,438,,,,438,,438,438,438',
'438,438,438,438,,,,,,438,438,438,438,438,438,438,,,438,,,,,,,438,,,438',
'438,,438,438,438,438,438,,438,438,438,,438,438,,438,438,,,,,,,,,,,,',
',,,,,,,,438,,,438,,,438,,,438,,,,,,438,,,,,,,,438,,,,,438,438,438,438',
'438,438,,,,438,438,,,,,,,438,,,438,,,438,251,251,251,,251,,,,251,251',
',,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251',
',,251,,,,,,,251,,,251,251,,251,251,251,251,251,251,251,251,251,,251',
'251,,251,251,,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,,,251,,251,,251,,251',
',,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,,',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,,252,252',
'252,252,252,252,252,252,252,,252,252,,252,252,,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,,,252,,252,,252,,252,,,,,,,,252,,,,,252,252,252,252,252',
'252,,,,252,252,,,,,,,252,,,252,,,252,429,429,429,,429,,,,429,429,,,',
'429,,429,429,429,429,429,429,429,,,,,,429,429,429,429,429,429,429,,',
'429,,,,,,,429,,,429,429,,429,429,429,429,429,429,429,429,429,,429,429',
',429,429,,,,,,,,,,,,,,,,,,,,,429,,,429,,,429,,,429,,429,,,,429,,,,,',
',,429,,,,,429,429,429,429,429,429,,,,429,429,,,,,,,429,,,429,,,429,425',
'425,425,,425,,,,425,425,,,,425,,425,425,425,425,425,425,425,,,,,,425',
'425,425,425,425,425,425,,,425,,,,,,,425,,,425,425,,425,425,425,425,425',
'425,425,425,425,,425,425,,425,425,,,,,,,,,,,,,,,,,,,,,425,,,425,,,425',
',,425,,,,425,,425,,,,,,,,425,,,,,425,425,425,425,425,425,,,,425,425',
',,,,,,425,,,425,,,425,423,423,423,,423,,,,423,423,,,,423,,423,423,423',
'423,423,423,423,,,,,,423,423,423,423,423,423,423,,,423,,,,,,,423,,,423',
'423,,423,423,423,423,423,423,423,423,423,,423,423,,423,423,,,,,,,,,',
',,,,,,,,,,,423,,,423,,,423,,,423,,423,,423,,423,,,,,,,,423,,,,,423,423',
'423,423,423,423,,,,423,423,,,,,,,423,,,423,,,423,414,414,414,,414,,',
',414,414,,,,414,,414,414,414,414,414,414,414,,,,,,414,414,414,414,414',
'414,414,,,414,,,,,,,414,,,414,414,,414,414,414,414,414,,414,414,414',
',414,414,,414,414,,,,,,,,,,,,,,,,,,,,,414,,,414,,,414,,,414,,,,,,414',
',,,,,,,414,,,,,414,414,414,414,414,414,,,,414,414,,,,,,,414,,,414,,',
'414,412,412,412,,412,,,,412,412,,,,412,,412,412,412,412,412,412,412',
',,,,,412,412,412,412,412,412,412,,,412,,,,,,,412,,,412,412,,412,412',
'412,412,412,,412,412,412,,412,412,,412,412,,,,,,,,,,,,,,,,,,,,,412,',
',412,,,412,,,412,,,,,,412,,,,,,,,412,,,,,412,412,412,412,412,412,,,',
'412,412,,,,,,,412,,,412,,,412,410,410,410,,410,,,,410,410,,,,410,,410',
'410,410,410,410,410,410,,,,,,410,410,410,410,410,410,410,,,410,,,,,',
',410,,,410,410,,410,410,410,410,410,410,410,410,410,,410,410,,410,410',
',,,,,,,,,,,,,,,,,,,,410,,,410,,,410,,,410,,410,,,,410,,,,,,,,410,,,',
',410,410,410,410,410,410,,,,410,410,,,,,,,410,,,410,,,410,408,408,408',
',408,,,,408,408,,,,408,,408,408,408,408,408,408,408,,,,,,408,408,408',
'408,408,408,408,,,408,,,,,,,408,,,408,408,,408,408,408,408,408,,408',
'408,408,,408,408,,408,408,,,,,,,,,,,,,,,,,,,,,408,,,408,,,408,,,408',
',,,,,408,,,,,,,,408,,,,,408,408,408,408,408,408,,,,408,408,,,,,,,408',
',,408,,,408,407,407,407,,407,,,,407,407,,,,407,,407,407,407,407,407',
'407,407,,,,,,407,407,407,407,407,407,407,,,407,,,,,,,407,,,407,407,',
'407,407,407,407,407,407,407,407,407,,407,407,,407,407,,,,,,,,,,,,,,',
',,,,,,407,,,407,,,407,,,407,,,,,,407,,,,,,,,407,,,,,407,407,407,407',
'407,407,,,,407,407,,,,,,,407,,,407,,,407,262,262,262,,262,,,,262,262',
',,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262',
',,262,,,,,,,262,,,262,262,,262,262,262,262,262,,262,262,262,,262,262',
',262,262,,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,,,262,,,,,,262,,,,,,,,262',
',,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,,,262,404,404',
'404,,404,,,,404,404,,,,404,,404,404,404,404,404,404,404,,,,,,404,404',
'404,404,404,404,404,,,404,,,,,,,404,,,404,404,,404,404,404,404,404,',
'404,404,404,,404,404,,404,404,,,,,,,,,,,,,,,,,,,,,404,,,404,,,404,,',
'404,,,,,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404,404,,,,,',
',404,,,404,,,404,399,399,399,,399,,,,399,399,,,,399,,399,399,399,399',
'399,399,399,,,,,,399,399,399,399,399,399,399,,,399,,,,,,,399,,,399,399',
',399,399,399,399,399,399,399,399,399,,399,399,,399,399,,,,,,,,,,,,,',
',,,,,,,399,,,399,,,399,,,399,,399,,,,399,,,,,,,,399,,,,,399,399,399',
'399,399,399,,,,399,399,,,,,,,399,,,399,,,399,387,387,387,,387,,,,387',
'387,,,,387,,387,387,387,387,387,387,387,,,,,,387,387,387,387,387,387',
'387,,,387,,,,,,,387,,,387,387,,387,387,387,387,387,,387,387,387,,387',
'387,,387,387,,,,,,,,,,,,,,,,,,,,,387,,,387,,,387,,,387,,,,,,387,,,,',
',,,387,,,,,387,387,387,387,387,387,,,,387,387,,,,,,,387,,,387,,,387',
'386,386,386,,386,,,,386,386,,,,386,,386,386,386,386,386,386,386,,,,',
',386,386,386,386,386,386,386,,,386,,,,,,,386,,,386,386,,386,386,386',
'386,386,,386,386,386,,386,386,,386,386,,,,,,,,,,,,,,,,,,,,,386,,,386',
',,386,,,386,,,,,,386,,,,,,,,386,,,,,386,386,386,386,386,386,,,,386,386',
',,,,,,386,,,386,,,386,353,353,353,,353,,,,353,353,,,,353,,353,353,353',
'353,353,353,353,,,,,,353,353,353,353,353,353,353,,,353,,,,,,,353,,,353',
'353,,353,353,353,353,353,,353,353,353,,353,353,,353,353,,,,,,,,,,,,',
',,,,,,,,353,,,353,,,353,,,353,,,,,,353,,,,,,,,353,,,,,353,353,353,353',
'353,353,,,,353,353,,,,,,,353,,,353,,,353,352,352,352,,352,,,,352,352',
',,,352,,352,352,352,352,352,352,352,,,,,,352,352,352,352,352,352,352',
',,352,,,,,,,352,,,352,352,,352,352,352,352,352,,352,352,352,,352,352',
',352,352,,,,,,,,,,,,,,,,,,,,,352,,,352,,,352,,,352,,,,,,352,,,,,,,,352',
',,,,352,352,352,352,352,352,,,,352,352,,,,,,,352,,,352,,,352,351,351',
'351,,351,,,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351',
'351,351,351,351,351,,,351,,,,,,,351,,,351,351,,351,351,351,351,351,',
'351,351,351,,351,351,,351,351,,,,,,,,,,,,,,,,,,,,,351,,,351,,,351,,',
'351,,,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351,351,,,,,',
',351,,,351,,,351,330,330,330,,330,,,,330,330,,,,330,,330,330,330,330',
'330,330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,,330,,,330,330',
',330,330,330,330,330,,330,330,330,,330,330,,330,330,,,,,,,,,,,,,,,,',
',,,,330,,,330,,,330,,,330,,,,,,330,,,,,,,,330,,,,,330,330,330,330,330',
'330,,,,330,330,,,,,,,330,,,330,,,330,277,277,277,,277,,,,277,277,,,',
'277,,277,277,277,277,277,277,277,,,,,,277,277,277,277,277,277,277,,',
'277,,,,,,,277,,,277,277,,277,277,277,277,277,,277,277,277,,277,277,',
'277,277,,,,,,,,,,,,,,,,,,,,,277,,,277,,,277,,,277,,277,,,,277,,,,,,',
',277,,,,,277,277,277,277,277,277,,,,277,277,,,,,,,277,,,277,,,277,349',
'349,349,,349,,,,349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349',
'349,349,349,349,349,349,,,349,,,,,,,349,,,349,349,,349,349,349,349,349',
',349,349,349,,349,349,,349,349,,,,,,,,,,,,,,,,,,,,,349,,,349,,,349,',
',349,,,,,,349,,,,,,,,349,,,,,349,349,349,349,349,349,,,,349,349,,,,',
',,349,,,349,,,349,279,279,279,279,279,,,,279,279,,,,279,,279,279,279',
'279,279,279,279,,,,,,279,279,279,279,279,279,279,,,279,,,,,,279,279',
',279,279,279,,279,279,279,279,279,,279,279,279,,279,279,,279,279,,,',
',,,,,,,,,,,,,,,,,279,,,279,,,279,,,279,,279,,,,279,,,,,,,,279,,,,,279',
'279,279,279,279,279,,,,279,279,,,,,,,279,,,279,,,279,280,280,280,,280',
',,,280,280,,,,280,,280,280,280,280,280,280,280,,,,,,280,280,280,280',
'280,280,280,,,280,,,,,,,280,,,280,280,,280,280,280,280,280,,280,280',
'280,,280,280,,280,280,,,,,,,,,,,,,,,,,,,,,280,,,280,,,280,,,280,,,,',
',280,,,,,,,,280,,,,,280,280,280,280,280,280,,,,280,280,,,,,,,280,,,280',
',,280,348,348,348,,348,,,,348,348,,,,348,,348,348,348,348,348,348,348',
',,,,,348,348,348,348,348,348,348,,,348,,,,,,,348,,,348,348,,348,348',
'348,348,348,,348,348,348,,348,348,,348,348,,,,,,,,,,,,,,,,,,,,,348,',
',348,,,348,,,348,,,,,,348,,,,,,,,348,,,,,348,348,348,348,348,348,,,',
'348,348,,,,,,,348,,,348,,,348,347,347,347,,347,,,,347,347,,,,347,,347',
'347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,',
',347,,,347,347,,347,347,347,347,347,,347,347,347,,347,347,,347,347,',
',,,,,,,,,,,,,,,,,,,347,,,347,,,347,,,347,,,,,,347,,,,,,,,347,,,,,347',
'347,347,347,347,347,,,,347,347,,,,,,,347,,,347,,,347,286,286,286,,286',
',,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286',
'286,286,286,,,286,,,,,,,286,,,286,286,,286,286,286,286,286,286,286,286',
'286,,286,286,,286,286,,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,,,286,,286',
',,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,',
',286,,,286,346,346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346',
'346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346,346,,346',
'346,346,346,346,,346,346,346,,346,346,,346,346,,,,,,,,,,,,,,,,,,,,,346',
',,346,,,346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346,,',
',346,346,,,,,,,346,,,346,,,346,288,288,288,,288,,,,288,288,,,,288,,288',
'288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,',
',288,,,288,288,,288,288,288,288,288,,288,288,288,,288,288,659,,659,659',
'659,,659,,,,,,,,,,,,,,,,,288,,,288,,,288,,,288,,,,,,659,,,,,,,,659,659',
'659,659,,288,288,288,288,288,288,,,,288,288,,,,288,,,288,,,288,,,288',
'345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,',
',345,345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,,345,345,345',
'345,345,,345,345,345,,345,345,,345,345,,,,,,,,,,,,,,,,,,,,,345,,,345',
',,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345,345',
',,,,,,345,,,345,,,345,290,290,290,290,290,,,,290,290,,,,290,,290,290',
'290,290,290,290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,290',
'290,,290,290,290,,290,290,290,290,290,,290,290,290,,290,290,,290,290',
',,,,,,,,,,,,,,,,,,,,290,,,290,,,290,,,290,,290,,,,290,,,,,,,,290,,,',
',290,290,290,290,290,290,,,,290,290,,,,,,,290,,,290,,,290,291,291,291',
',291,,,,291,291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291',
'291,291,291,291,,,291,,,,,,,291,,,291,291,,291,291,291,291,291,,291',
'291,291,,291,291,,291,291,,,,,,,,,,,,,,,,,,,,,291,,,291,291,,291,,,291',
',,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291,291,,,,,,,291',
',,291,,,291,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344',
'344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,',
'344,344,344,344,344,,344,344,344,,344,344,,344,344,,,,,,,,,,,,,,,,,',
',,,344,,,344,,,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344,344,344',
'344,,,,344,344,,,,,,,344,,,344,,,344,294,294,294,294,294,,,,294,294',
',,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294,294,294,294',
',,294,,,,,,294,294,294,294,294,294,,294,294,294,294,294,,294,294,294',
',294,294,,294,294,,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,,,294,,294,,,',
'294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294,294,,,,,,294,294,',
',294,,,294,300,300,300,300,300,,,,300,300,,,,300,,300,300,300,300,300',
'300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,300,300,300,300',
'300,300,,300,300,300,300,300,,300,300,300,,300,300,,300,300,,,,,,,,',
',,,,,,,,,,,,300,,,300,,,300,,,300,,300,,,,300,,,,,,,,300,,,,,300,300',
'300,300,300,300,,,,300,300,,,,,,,300,,,300,,,300,301,301,301,,301,,',
',301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301,301',
'301,301,,,301,,,,,,,301,,,301,301,,301,301,301,301,301,,301,301,301',
',301,301,,301,301,,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,,,301,,,,,,301',
',,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301,,,,,,,301,,,301,,',
'301,302,302,302,302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302',
',,,,,302,302,302,302,302,302,302,,,302,,,,,,302,302,,302,302,302,,302',
'302,302,302,302,,302,302,302,,302,302,,302,302,,,,,,,,,,,,,,,,,,,,,302',
',,302,,,302,,,302,,302,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302',
',,,302,302,,,,,,,302,,,302,,,302,343,343,343,,343,,,,343,343,,,,343',
',343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343',
',,,,,,343,,,343,343,,343,343,343,343,343,,343,343,343,,343,343,,343',
'343,,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,,,343,,,,,,343,,,,,,,,343,,',
',,343,343,343,343,343,343,,,,343,343,,,,,,,343,,,343,,,343,342,342,342',
',342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,342,,,,,,,342,,,342,342,,342,342,342,342,342,,342',
'342,342,,342,342,,342,342,,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,,,342',
',,,,,342,,,,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,,,,,342',
',,342,,,342,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341',
'341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,',
'341,341,341,341,341,,341,341,341,,341,341,,341,341,,,,,,,,,,,,,,,,,',
',,,341,,,341,,,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341,341,341',
'341,,,,341,341,,,,,,,341,,,341,,,341,308,308,308,,308,,,,308,308,,,',
'308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308,,',
'308,,,,,,,308,,,308,308,,308,308,308,308,308,308,308,308,308,,308,308',
',308,308,,,,,,,,,,,,,,,,,,,,,308,,,308,,308,308,,,308,,308,,308,,308',
',,,,,,,308,,,,,308,308,308,308,308,308,,,,308,308,,,,,,,308,,,308,,',
'308,340,340,340,,340,,,,340,340,,,,340,,340,340,340,340,340,340,340',
',,,,,340,340,340,340,340,340,340,,,340,,,,,,,340,,,340,340,,340,340',
'340,340,340,,340,340,340,,340,340,,340,340,,,,,,,,,,,,,,,,,,,,,340,',
',340,,,340,,,340,,,,,,340,,,,,,,,340,,,,,340,340,340,340,340,340,,,',
'340,340,,,,,,,340,,,340,,,340,311,311,311,,311,,,,311,311,,,,311,,311',
'311,311,311,311,311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,',
',311,,,311,311,,311,311,311,311,311,,311,311,311,,311,311,,311,311,',
',,,,,,,,,,,,,,,,,,,311,,,311,,,311,,,311,,,,,,311,,,,,,,,311,,,,,311',
'311,311,311,311,311,,,,311,311,,,,,,,311,,,311,,,311,312,312,312,,312',
',,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312',
'312,312,312,,,312,,,,,,,312,,,312,312,,312,312,312,312,312,,312,312',
'312,,312,312,,312,312,,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,,,312,,,,',
',312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,,,,,,,312,,,312',
',,312,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315',
',,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,,315,315',
'315,315,315,,315,315,315,,315,315,,315,315,,,,,,,,,,,,,,,,,,,,,315,',
',315,,,315,,,315,,,,,,315,,,,,,,,315,,,,,315,315,315,315,315,315,,,',
'315,315,,,,,,,315,,,315,,,315,316,316,316,,316,,,,316,316,,,,316,,316',
'316,316,316,316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,',
',316,,,316,316,,316,316,316,316,316,,316,316,316,,316,316,,316,316,',
',,,,,,,,,,,,,,,,,,,316,,,316,,,316,,,316,,,,,,316,,,,,,,,316,,,,,316',
'316,316,316,316,316,,,,316,316,,,,,,,316,,,316,,,316,317,317,317,,317',
',,,317,317,,,,317,,317,317,317,317,317,317,317,,,,,,317,317,317,317',
'317,317,317,,,317,,,,,,,317,,,317,317,,317,317,317,317,317,,317,317',
'317,,317,317,,317,317,,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,,,317,,,,',
',317,,,,,,,,317,,,,,317,317,317,317,317,317,,,,317,317,,,,,,,317,,,317',
',,317,318,318,318,,318,,,,318,318,,,,318,,318,318,318,318,318,318,318',
',,,,,318,318,318,318,318,318,318,,,318,,,,,,,318,,,318,318,,318,318',
'318,318,318,,318,318,318,,318,318,,318,318,,,,,,,,,,,,,,,,,,,,,318,',
',318,,,318,,,318,,,,,,318,,,,,,,,318,,,,,318,318,318,318,318,318,,,',
'318,318,,,,,,,318,,,318,,,318,319,319,319,319,319,,,,319,319,,,,319',
',319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319',
',,,,,319,319,,319,319,319,,319,319,319,319,319,,319,319,319,,319,319',
',319,319,,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,,,319,,319,,,,319,,,,,',
',,319,,,,,319,319,319,319,319,319,,,,319,319,,,,,,,319,,,319,,,319,339',
'339,339,,339,,,,339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339',
'339,339,339,339,339,339,,,339,,,,,,,339,,,339,339,,339,339,339,339,339',
',339,339,339,,339,339,,339,339,,,,,,,,,,,,,,,,,,,,,339,,,339,,,339,',
',339,,,,,,339,,,,,,,,339,,,,,339,339,339,339,339,339,,,,339,339,,,,',
',,339,,,339,,,339,338,338,338,,338,,,,338,338,,,,338,,338,338,338,338',
'338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,,,338,,,338,338',
',338,338,338,338,338,,338,338,338,,338,338,,338,338,,,,,,,,,,,,,,,,',
',,,,338,,,338,,,338,,,338,,,,,,338,,,,,,,,338,,,,,338,338,338,338,338',
'338,,,,338,338,,,,,,,338,,,338,,,338,337,337,337,,337,,,,337,337,,,',
'337,,337,337,337,337,337,337,337,,,,,,337,337,337,337,337,337,337,,',
'337,,,,,,,337,,,337,337,,337,337,337,337,337,,337,337,337,,337,337,',
'337,337,,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,,,337,,,,,,337,,,,,,,,337',
',,,,337,337,337,337,337,337,,,,337,337,,,,,,,337,,,337,,,337,323,323',
'323,323,323,,,,323,323,,,,323,,323,323,323,323,323,323,323,,,,,,323',
'323,323,323,323,323,323,,,323,,,,,,323,323,,323,323,323,,323,323,323',
'323,323,,323,323,323,,323,323,,323,323,,,,,,,,,,,,,,,,,,,,,323,,,323',
',,323,,,323,,323,,,,323,,,,,,,,323,,,,,323,323,323,323,323,323,,,,323',
'323,,,,,,,323,,,323,,,323,336,336,336,,336,,,,336,336,,,,336,,336,336',
'336,336,336,336,336,,,,,,336,336,336,336,336,336,336,,,336,,,,,,,336',
',,336,336,,336,336,336,336,336,,336,336,336,,336,336,,336,336,,,,,,',
',,,,,,,,,,,,,,336,,,336,,,336,,,336,,,,,,336,,,,,,,,336,,,,,336,336',
'336,336,336,336,,,,336,336,,,,,,,336,,,336,,,336,335,335,335,,335,,',
',335,335,,,,335,,335,335,335,335,335,335,335,,,,,,335,335,335,335,335',
'335,335,,,335,,,,,,,335,,,335,335,,335,335,335,335,335,,335,335,335',
',335,335,,335,335,,,,,,,,,,,,,,,,,,,,,335,,,335,,,335,,,335,,,,,,335',
',,,,,,,335,,,,,335,335,335,335,335,335,,,,335,335,,,,,,,335,,,335,,',
'335,328,328,328,,328,,,,328,328,,,,328,,328,328,328,328,328,328,328',
',,,,,328,328,328,328,328,328,328,,,328,,,,,,,328,,,328,328,,328,328',
'328,328,328,,328,328,328,,328,328,,328,328,,,,,,,,,,,,,,,,,,,,,328,',
',328,,,328,,,328,,,,,,328,,,,,,,,328,,,,,328,328,328,328,328,328,,,',
'328,328,,,,,,,328,,,328,,,328,329,329,329,,329,,,,329,329,,,,329,,329',
'329,329,329,329,329,329,,,,,,329,329,329,329,329,329,329,,,329,,,,,',
',329,,,329,329,,329,329,329,329,329,,329,329,329,,329,329,,329,329,',
',,,,,,,,,,,,,,,,,,,329,,,329,,,329,,,329,,,,,,329,,,,,,,,329,,,,,329',
'329,329,329,329,329,,,,329,329,,,,,,,329,,,329,,,329,350,350,350,,350',
',,,350,350,,,,350,,350,350,350,350,350,350,350,,,,,,350,350,350,350',
'350,350,350,,,350,,,,,,,350,,,350,350,,350,350,350,350,350,,350,350',
'350,,350,350,,350,350,,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,,,350,,,,',
',350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,,,,,,,350,,,350',
',,350,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480',
'480,480,480,480,480,480,480,480,,,,480,480,480,480,480,480,480,480,480',
'480,480,480,480,480,480,480,480,480,480,480,480,,480,480,,,480,,,,,',
',,,480,480,,480,480,480,480,480,480,480,,,480,480,,,,480,480,480,480',
',,,,,,,,,,,,480,480,,480,480,480,480,480,480,480,480,480,480,480,,,480',
'480,,,,,,,,,,480,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
'37,37,37,37,37,37,37,,,,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
'37,37,37,37,37,37,,37,37,37,,37,,,,,,,,,37,37,,37,37,37,37,37,37,37',
',,37,37,,,,37,37,37,37,,,,,,,,,,,,,37,37,,37,37,37,37,37,37,37,37,37',
'37,37,,,37,37,,,,,,,,,,37,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,,,,30,30,30,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,,30,30,,,30,,,,,,,,,30,30,,30,30,30,30,30',
'30,30,,,30,30,,,,30,30,30,30,,,,,,,,,,,,,30,30,,30,30,30,30,30,30,30',
'30,30,30,30,,,30,30,,,,,,,,,,30,489,489,489,489,489,489,489,489,489',
'489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,,,,489,489',
'489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489',
'489,489,,489,489,,,489,,,,,,,,,489,489,,489,489,489,489,489,489,489',
',,489,489,,,,489,489,489,489,,,,,,,,,,,,,489,489,,489,489,489,489,489',
'489,489,489,489,489,489,,,489,489,,,,,,,,,,489,656,656,656,656,656,656',
'656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656',
'656,,,,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656',
'656,656,656,656,656,,656,656,,,656,,,,,,,,,656,656,,656,656,656,656',
'656,656,656,,,656,656,,,,656,656,656,656,,,,,,,,,,,,,656,656,,656,656',
'656,656,656,656,656,656,656,656,656,,,656,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
',,,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,,272,272,272,272,272,,272,,,,,,,272,272,,272,272,272',
'272,272,272,272,,,272,272,,,,272,272,272,272,,,,,,,,,,,,,272,272,,272',
'272,272,272,272,272,272,272,272,272,272,,,272,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,2,2,2,2,2,2,2,2,2,2,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,,2,2,2,2,2,,2,,,,,,,2,2,,2,2,2,2,2,2,2,,,2,2,,,,2,2,2,2,,,,,,,,,,',
',,2,2,,2,2,2,2,2,2,2,2,2,2,2,,,2,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,,26,26,26,26,26,,26,,,,,,,26,26,,26',
'26,26,26,26,26,26,,,26,26,,,,26,26,26,26,,,,,,26,,,,,,,26,26,,26,26',
'26,26,26,26,26,26,26,26,26,285,285,26,,285,,,,,,,,,285,285,,285,285',
'285,285,285,285,285,,,285,285,,,,285,285,285,285,,,,,,285,,,,,,,285',
'285,,285,285,285,285,285,285,285,285,285,285,285,400,400,285,,400,,',
',,,,,,400,400,,400,400,400,400,400,400,400,,,400,400,,,,400,400,400',
'400,,,,,,,,,,,,,400,400,,400,400,400,400,400,400,400,400,400,400,400',
'389,389,400,,389,,,,,,,,,389,389,,389,389,389,389,389,389,389,,,389',
'389,,,,389,389,389,389,,,,,,,,,,,,,389,389,,389,389,389,389,389,389',
'389,389,389,389,389,388,388,389,,388,,,,,,,,,388,388,,388,388,388,388',
'388,388,388,,,388,388,,,,388,388,388,388,,,,,,,,,,,,,388,388,,388,388',
'388,388,388,388,388,388,388,388,388,645,645,388,,645,,,,,,,,,645,645',
',645,645,645,645,645,645,645,,,645,645,,,,645,645,645,645,,,,,,,,,,',
',,645,645,,645,645,645,645,645,645,645,645,645,645,645,409,409,645,',
'409,,,,,,,,,409,409,,409,409,409,409,409,409,409,,,409,409,,,,409,409',
'409,409,,,,,,409,,,,,,,409,409,,409,409,409,409,409,409,409,409,409',
'409,409,890,890,409,,890,,,,,,,,,890,890,,890,890,890,890,890,890,890',
',,890,890,,,,890,890,890,890,,,,,,890,,,,,,,890,890,,890,890,890,890',
'890,890,890,890,890,890,890,411,411,890,,411,,,,,,,,,411,411,,411,411',
'411,411,411,411,411,,,411,411,,,,411,411,411,411,,,,,,,,,,,,,411,411',
',411,411,411,411,411,411,411,411,411,411,411,441,441,411,,441,,,,,,',
',,441,441,,441,441,441,441,441,441,441,,,441,441,,,,441,441,441,441',
',,,,,,,,,,,,441,441,,441,441,441,441,441,441,441,441,441,441,441,439',
'439,441,,439,,,,,,,,,439,439,,439,439,439,439,439,439,439,,,439,439',
',,,439,439,439,439,,,,,,439,,,,,,,439,439,,439,439,439,439,439,439,439',
'439,439,439,439,416,416,439,,416,,,,,,,,,416,416,,416,416,416,416,416',
'416,416,,,416,416,,,,416,416,416,416,,,,,,416,,,,,,,416,416,,416,416',
'416,416,416,416,416,416,416,416,416,417,417,416,,417,,,,,,,,,417,417',
',417,417,417,417,417,417,417,,,417,417,,,,417,417,417,417,,,,,,,,,,',
',,417,417,,417,417,417,417,417,417,417,417,417,417,417,647,647,417,',
'647,,,,,,,,,647,647,,647,647,647,647,647,647,647,,,647,647,,,,647,647',
'647,647,,,,,,,,,,,,,647,647,,647,647,647,647,647,647,647,647,647,647',
'647,287,287,647,,287,,,,,,,,,287,287,,287,287,287,287,287,287,287,,',
'287,287,,,,287,287,287,287,,,,,,,,,,,,,287,287,,287,287,287,287,287',
'287,287,287,287,287,287,814,814,287,,814,,,,,,,,,814,814,,814,814,814',
'814,814,814,814,,,814,814,,,,814,814,814,814,,,,,,,,,,,,,814,814,,814',
'814,814,814,814,814,814,814,814,814,814,398,398,814,,398,,,,,,,,,398',
'398,,398,398,398,398,398,398,398,,,398,398,,,,398,398,398,398,,,,,,398',
',,,,,,398,398,,398,398,398,398,398,398,398,398,398,398,398,892,892,398',
',892,,,,,,,,,892,892,,892,892,892,892,892,892,892,,,892,892,,,,892,892',
'892,892,476,,476,476,476,,476,,,,,,892,892,,892,892,892,892,892,892',
'892,892,892,892,892,,,892,,,,,,,,,,476,476,,,,,,,476,476,476,476' ]
        racc_action_check = arr = ::Array.new(23197, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   nil, 21930,   270,   406,   542,  1591,   nil,   nil,   814,
   950,   nil,   nil,  1086,  1222,   -11,  1494,   nil,   nil,  1438,
   nil,   nil,  1432,   nil,   -15,   641, 22042,   nil,   nil,  1392,
 21460,  1330,   nil,  1462,   nil,  1367,  2990, 21337,  3262,   nil,
  1360,  3534,  1204,  3806,  1327,  1122,  1110,   nil,   nil,   -61,
   nil,   999,   nil,   nil,   nil,  4622,  1030,  4894,   nil,   nil,
   101,   950,  1298,  5438,   nil,   451,   814,   nil,  1751,   nil,
  5982,   nil,  6118,   nil,  6254,   678,   nil,  3670,   nil,   nil,
   nil,  6662,   744,   nil,   nil,   nil,  6934,   nil,  7070,   nil,
 11570,   nil,   nil,   nil,   nil,   469,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   565,   nil,   nil,   nil,    13,   913,   160,  1221,
    37,  1357,   347,   nil,   856,  1336,  1159,  1317,  1406,   235,
  1580,   520,   140,  1574,  1519,   264, 10062, 10198,  2990,   nil,
 10470,  1346,   nil, 10742,   nil,   134, 11014,   606,   649, 11422,
   nil,   731,   nil,   nil,   nil,   305,   325,   916,   946,   542,
   nil,   nil, 12102,   nil,   nil,   nil,   nil,  1224,   nil,  1192,
   nil,   nil,   635,   -14,   814, 12918, 13054,   nil,  1286,   406,
   nil, 13462, 13598,  1334,   nil,  1373,  1374,   333,   248,   -12,
   985,  1257, 14822,   nil,  1238,   -37,  1200,  1220,   nil,    17,
   nil,  1470, 21818,   nil,  1476,   nil,   nil, 16046,  1606, 16318,
 16454,   nil,   nil,  1449,   nil, 22102, 16862, 22882, 17134,  1496,
 17406, 17542,   nil,  1559, 17814,   nil,   nil,   nil,   nil,   nil,
 17950, 18086, 18222,     0,   552,  1299,   nil,   nil, 18766,   nil,
    -7, 19038, 19174,   nil,   nil, 19310, 19446, 19582, 19718, 19854,
  1547,  1552,  1615, 20398,  1575,   375,   nil,   nil, 20806, 20942,
 15910,  6390,  5710,  5166, 11966, 20670, 20534, 20262, 20126, 19990,
 18902, 18630, 18494, 18358, 17678, 17270, 16998, 16726, 16590, 16182,
 21078, 15774, 15638, 15502,  1165,    88,  1446,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,  3792,   nil,   nil,  9530,  1431,
   nil,  1408,   nil,  1483,  1480,   -22,  1387,   nil,   nil,   nil,
   nil,  1392,   nil,   nil,   nil,   nil, 15366, 15230, 22282, 22222,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23002, 15094,
 22162,  1394,   -24,   nil, 14958,   nil,   nil, 14686, 14550, 22402,
 14414, 22522, 14278,   160, 14142,   nil, 22702, 22762,   280,   nil,
   nil,   nil,   nil, 14006,   nil, 13870,   nil,   nil,   nil, 13734,
   nil,   nil,   nil,   nil,   nil,  1290,    23,   125, 13326, 22642,
 13190, 22582,  1361,   nil,   907, 12782,   nil,   nil,   nil,   nil,
 12646,  1223,   nil,   nil,   nil,  1495,   nil,   nil,   nil,   -35,
  1257,  1198,  1291,  1143,   -20,   nil, 12510,   nil,   nil,   261,
 12374, 12238,   nil,   nil,   nil,     3, 23096,   nil,  1039,   nil,
 21214,   nil,   nil,  1024,   nil,  1137,  1084,   nil,  2582, 21583,
   nil,   nil,   nil,   672,  1086,   944,   nil,   nil,   nil,   988,
   542,   971,   nil,   406, 11830, 11694,   730, 11558,   nil,   708,
 11286,  2174,   nil,   nil,   632,   nil,  2038,   626,   nil, 11150,
   nil,   712, 10878,   nil,   544, 10606,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   344,   365,   nil, 10334,   nil,  4214,  3541,
  3807,   312,  4078,  5710,  3942,   253,  5438,  4622,   227,  1902,
  4486,  1229,  2248,  4350,  1358,  1704,  4758,  4894,  5030,  5166,
  5302,  2317,  5574,   113,  1462,  9926,   nil,   804,    -7,   789,
  3609,   858,   nil,   850,   nil,  2340,   nil,   nil,  1491,   nil,
   nil, 12114,   nil,   761,   nil,   nil,  9790,  9654,   nil,  9518,
   nil,  1844,   -19,   544,   nil,  1222,   nil,  1358,  1721,  9382,
  9246,   495,  1556,  1175,  1543,  1537,  1530,    -2,  1630,   nil,
   179,   248,  1487,   270,   134,   nil,   nil,  9110,  1254,   nil,
  1184,    53,  8974,   nil,  8838,   nil,  6538,  8702,  1307,   770,
  1373,   502,   nil,   nil,  1157,  8566,  8430,   -49,  8294,  8158,
   nil,   nil,   nil,  8022,   106, 22342,   207, 22822,   nil,   243,
   224,  1766,   nil,  7886,   365,   385, 21706,   378,   nil, 17146,
   439,   nil,   441,   771,   473,   496,  7750,   nil,   nil,   nil,
   627,  7614,   nil,  7478,   nil,   632,   nil,   nil,  7342,   808,
  7206,   672,   nil,  6798,  6526,   661,   nil,   -13,   nil,   nil,
   625,   nil,  3126,   nil,   828,   -56,  1887,  5846,   898,   918,
  5574,   nil,  5302,   nil,   864,   nil,  2385,   nil,   nil,   nil,
   nil,   866,   868,   885,   991,  1509,   958,   888,   908,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   937,   408,  1455,  5030,  4758,   128,
  4486,   nil,   nil,   nil,   nil,  1002,  1022,   nil,  1123,   nil,
   nil,   nil,  1124,  1127,  4350,  1021,  2306,  1140,   713,   nil,
  1118,   nil,  1128,   nil,  4214,  1115,   nil,   nil,  1121,  8986,
   nil,   403,   nil,   nil,  4078,   -17,   nil,  1260,  3942,   nil,
  1293,   nil,  1216,   nil,  1187,   nil,  3530,   nil,   nil,  3398,
  3670,  3262,   nil,   nil,  2854,  1227,   nil,  3398,  1374,   nil,
  1395,  2718,   nil,   nil,  1161,  1419,   nil,   nil,  2160,   nil,
   nil,  1980,   nil,   nil, 22942,   nil,   nil,  3126,  2854,   nil,
   nil,  2718,   nil,   nil,   nil,  2582,   nil,   nil,  1338,  1377,
   -91,   nil, 12930,  1395,   nil,  1363,  1371,   nil,   nil,  1373,
  1383,   nil,   nil,   nil,   nil,  2446,  2310,  1194,   nil,   nil,
  2446,  1195,   nil,   nil,  2174,  2038,   nil,   nil,  1416,  1460,
  1545,  1548,  1902,  1551,   nil,  1766,   nil,  1630,   nil,   nil,
  1660,   nil,   nil,   nil,   nil,  1452,  1386,  1535,  1425,  1358,
   678,   552,   nil,   nil,   nil,   nil,  1605,   nil,  1607,  1491,
 22462,   134, 23062,  1608,  1623,    78,   nil,   nil,   nil,   nil,
   nil,   nil,   369,  1167,  1550,  1506,  1203,   nil,   nil,  1402 ]

racc_action_default = [
    -3,  -436,  -523,  -524,  -494,  -524,  -226,  -445,  -523,  -317,
  -523,  -446,  -523,  -318,   -72,  -287,  -524,  -523,  -309,  -524,
  -319,  -428,  -523,  -320,  -246,  -524,  -524,   -37,  -429,  -523,
  -524,  -524,   -61,  -524,  -270,  -524,  -524,  -524,  -524,    -1,
  -524,   -65,  -514,  -524,  -512,  -524,  -524,  -395,  -388,  -268,
   -74,  -524,  -442,  -422,  -390,  -524,  -524,  -279,    -4,  -441,
  -391,  -246,  -443,  -524,  -392,   -36,  -246,  -261,    -6,  -438,
  -432,  -262,   -10,  -437,  -524,  -502,  -263,   -42,  -439,  -434,
  -264,  -512,   -44,  -440,  -433,  -265,  -524,   -45,  -435,  -389,
  -523,  -266,  -292,  -267,  -295,   -49,  -426,  -115,  -156,  -161,
  -410,  -174,  -145,  -116,  -175,  -159,  -127,  -147,  -421,  -176,
  -126,  -158,  -163,  -177,  -148,  -165,  -178,  -171,  -135,  -157,
  -111,  -144,  -136,  -150,  -132,  -142,  -133,  -164,  -122,  -129,
  -149,  -134,  -154,  -123,  -128,  -140,  -153,  -124,  -141,  -179,
  -166,  -125,  -138,  -130,  -182,  -173,  -119,  -139,  -112,  -168,
  -117,  -113,  -169,  -167,  -109,  -100,  -114,  -152,  -423,  -524,
  -131,  -102,  -121,  -151,  -160,  -425,  -170,  -103,  -118,  -146,
  -110,  -424,  -172,  -120,  -155,  -104,  -180,  -143,  -101,  -181,
  -162,  -137,  -524,  -321,  -317,  -318,  -524,  -524,  -524,  -524,
  -514,   -87,  -524,  -279,  -282,   -80,  -370,  -524,  -524,  -516,
  -524,  -524,  -268,  -524,  -524,  -443,   -10,  -524,  -227,  -496,
  -524,  -524,   -40,  -524,  -408,  -524,  -524,  -253,  -253,  -524,
  -243,  -254,  -239,   -47,  -228,  -516,  -516,  -524,  -514,  -524,
   -48,   -71,  -524,  -371,  -288,  -373,  -306,  -524,  -268,  -524,
  -443,   -98,  -524,   -96,  -524,  -524,  -524,  -400,  -524,  -524,
  -286,  -523,  -524,   -53,  -364,  -430,  -431,  -138,  -524,  -139,
  -167,  -100,  -524,  -312,  -160,  -170,  -155,  -101,  -492,  -524,
  -406,  -524,  -524,  -107,   -18,  -105,  -106,  -524,  -524,   -10,
  -524,  -219,   -13,  -524,  -203,  -524,  -523,  -524,   -69,   -66,
   -10,  -524,  -515,  -204,  -513,  -520,  -521,  -519,    -2,   -76,
    -3,  -524,   -10,  -524,   -43,  -275,   -46,  -393,  -524,   -60,
  -524,  -524,  -524,   -59,  -369,  -524,  -524,  -524,  -524,  -524,
   -61,  -524,   -11,   -10,  -524,  -512,   -41,  -218,  -524,  -524,
  -524,  -524,  -524,  -524,  -524,  -524,  -524,  -524,  -524,  -524,
  -524,  -524,  -524,  -524,  -524,  -524,  -524,  -524,  -524,  -524,
  -524,  -524,  -524,  -524,  -512,  -524,  -513,  -361,  -359,  -514,
  -488,  -478,  -463,  -358,  -487,  -524,  -347,  -465,  -524,  -523,
  -289,  -523,  -333,  -486,  -524,  -524,  -462,  -332,  -484,  -467,
  -466,  -523,  -483,  -464,  -461,  -340,  -524,  -524,  -524,  -524,
  -413,  -411,  -427,  -412,  -415,  -430,  -431,  -301,  -524,  -523,
  -524,  -524,   -86,  -278,  -524,  -517,  -495,  -518,  -524,  -524,
  -523,  -524,  -524,  -275,  -524,  -499,  -524,  -524,  -524,  -285,
  -409,  -394,  -255,  -524,  -240,  -524,  -241,  -251,  -230,  -518,
  -232,  -277,  -229,  -396,   -78,   -73,  -523,  -523,  -524,  -524,
  -523,  -524,   -96,   -97,  -524,  -524,  -304,  -447,  -397,  -310,
  -524,  -524,   -25,   -33,  -254,  -183,  -398,  -402,  -399,  -524,
  -524,  -253,  -239,  -514,  -514,  -247,  -524,  -248,   -54,  -523,
  -524,  -524,  -510,  -314,  -511,  -514,  -460,  -405,  -524,  -404,
  -524,   -26,   -35,   -34,   910,  -524,  -380,   -27,  -185,  -524,
   -17,   -16,   -15,  -504,  -246,  -503,  -505,  -366,  -506,  -524,
  -504,  -246,  -368,  -503,  -508,  -509,   -67,  -524,   -77,  -524,
  -524,  -224,    -5,  -522,  -524,   -32,  -192,  -524,  -324,   -10,
  -323,  -322,  -524,  -281,  -524,   -10,   -38,   -39,   -19,   -20,
   -21,   -22,   -23,   -62,  -524,  -273,  -513,    -9,  -217,  -206,
  -207,  -200,  -208,  -193,  -213,  -199,  -194,  -214,  -198,  -524,
  -215,  -195,  -220,  -210,  -196,  -221,  -212,  -211,  -222,  -209,
  -223,  -205,  -216,  -197,  -524,   -10,  -375,  -524,  -523,  -524,
  -524,  -524,  -471,  -473,  -462,  -477,  -469,  -331,  -524,  -354,
  -349,  -353,  -357,  -524,  -485,  -489,   -10,   -10,  -329,  -524,
  -356,  -524,  -524,  -524,  -504,  -246,  -503,  -246,  -524,   -10,
  -524,  -504,  -523,  -503,  -524,   -85,  -524,  -507,  -183,  -497,
  -504,  -503,  -524,  -504,  -503,  -498,  -284,  -524,  -253,  -252,
  -256,  -516,  -524,  -343,   -10,  -345,  -524,   -10,  -524,  -524,
   -96,  -507,   -99,  -449,  -524,   -10,   -10,  -260,  -524,  -524,
  -403,  -401,  -233,  -524,  -524,  -524,  -524,  -524,  -245,  -524,
  -524,   -42,  -249,   -10,  -201,  -202,  -524,  -524,  -459,  -460,
  -491,  -481,  -491,  -524,  -462,  -491,   -10,  -407,  -108,  -271,
  -523,  -523,   -14,  -524,  -237,   -55,  -238,  -365,  -524,  -276,
  -524,   -57,  -367,  -524,  -524,   -70,   -75,  -524,    -7,   -24,
  -523,  -325,  -191,  -280,  -523,   -62,   -12,  -524,  -524,  -524,
  -524,  -299,   -10,  -272,  -524,  -468,  -524,  -476,  -330,  -479,
  -348,  -523,  -523,  -524,  -524,  -342,  -524,  -523,  -524,  -341,
  -328,  -327,  -293,  -326,  -296,   -50,  -362,   -51,  -363,  -419,
  -414,  -420,  -417,  -418,  -524,  -524,   -81,  -524,  -524,  -276,
  -524,  -257,  -242,  -231,   -79,  -524,  -524,  -344,  -524,  -307,
  -276,  -448,  -524,  -524,  -524,  -258,  -184,  -524,  -514,  -234,
  -523,  -235,  -523,  -250,  -524,  -524,  -315,  -493,  -514,  -524,
  -455,  -524,  -458,  -451,  -524,  -524,  -457,  -524,   -10,  -338,
  -523,  -383,  -523,  -382,  -381,   -30,  -188,   -56,   -29,  -187,
  -524,  -190,   -58,   -31,  -189,   -68,  -283,  -524,  -524,  -336,
  -524,  -225,  -298,  -300,  -524,  -524,  -470,  -472,  -475,  -352,
  -351,  -524,  -334,  -335,  -524,  -275,  -355,   -10,   -10,  -416,
  -302,  -524,  -372,  -346,  -374,   -10,  -305,  -311,  -259,  -524,
  -253,   -52,  -460,  -524,  -490,  -491,  -491,  -480,  -482,  -491,
  -524,  -313,  -339,  -387,    -8,   -10,  -524,  -524,  -385,   -28,
  -186,  -524,  -290,  -291,   -10,  -524,  -360,  -474,  -523,  -274,
  -524,  -524,   -10,  -524,  -236,  -524,  -244,   -10,  -450,  -454,
  -524,  -453,  -456,  -386,  -384,  -524,   -95,  -524,   -88,   -10,
   -10,  -523,  -256,  -350,  -294,  -297,  -524,  -308,  -524,  -491,
  -524,  -523,  -524,   -94,  -380,  -523,  -377,  -378,  -376,  -303,
  -316,  -452,  -504,  -503,  -524,   -93,  -507,  -379,  -337,   -89 ]

clist = [
'100,158,227,289,363,199,214,326,224,485,100,226,426,567,435,100,167',
'222,228,670,247,222,576,40,468,263,189,270,211,377,303,464,211,211,253',
'519,211,189,310,237,167,294,525,660,167,666,579,254,582,798,68,167,39',
'453,231,291,354,494,590,501,420,320,276,273,189,222,298,242,719,276',
'282,309,571,406,443,568,313,709,211,321,211,722,724,296,482,183,211',
'658,372,314,619,726,619,728,457,40,183,211,183,428,430,624,627,355,211',
'838,217,780,609,211,217,386,159,817,223,387,818,600,230,862,296,635',
'229,183,438,825,609,244,245,636,476,800,656,648,653,832,375,588,258',
'712,446,370,234,197,268,465,279,212,436,437,898,700,782,847,217,307',
'215,473,249,459,595,597,306,649,269,730,598,599,768,836,602,489,188',
'274,844,807,512,33,,452,,602,,,,,,,494,501,,,,,434,,,304,,,838,,,401',
',304,,,,254,481,602,,487,,,,,,314,,,698,304,820,,660,576,359,40,,,707',
'702,515,,211,,,,,432,,,,,,,,460,,,,,908,189,726,,728,462,222,770,,772',
',709,776,,237,211,658,158,,,211,211,632,704,499,320,,447,363,,224,211',
'167,226,719,685,528,529,530,531,228,204,449,509,,,211,505,40,211,640',
',,578,,211,619,189,320,40,183,,222,40,896,,,,536,40,211,40,,183,506',
',534,211,,,211,211,,,211,211,211,211,40,451,68,,40,537,461,217,68,,514',
',,418,463,467,,,,592,593,576,296,752,753,,,532,183,,569,,451,,564,,',
',834,,834,,,,834,,809,810,,604,,296,816,,777,224,,660,226,867,612,,475',
'217,,228,224,211,211,226,742,524,505,,,760,228,762,634,,211,758,618',
'505,,907,,,621,505,629,211,623,623,869,871,224,,872,226,,658,,,787,',
'228,,,,792,526,527,505,,304,304,304,304,211,,211,,857,795,623,211,434',
',,,,,,644,646,783,,,834,,633,,,,,657,211,901,,674,,167,743,,,,,,415',
',167,675,,,422,,,427,681,276,668,,,,676,,,,276,672,,682,662,,,304,304',
'189,62,619,211,195,883,854,454,,897,363,,40,,,195,,240,40,,,,,,,863',
',240,,40,,,,,,746,623,,483,,,,195,,,735,,,,879,628,,,880,744,,696,304',
'40,183,,,,674,,674,,888,,,674,,,62,,725,785,727,359,40,40,788,715,,',
',793,,676,,676,,40,211,866,676,,,,682,711,723,723,,,,,,,,717,,,,618',
'189,434,40,,,40,757,687,,,766,324,,40,40,,,602,,,,211,749,779,781,167',
'183,,751,,,40,,,,,49,,,191,208,,,779,40,208,208,779,,208,191,211,238',
'204,,,211,773,,183,615,211,189,662,,,,,,620,,204,281,,284,620,,191,849',
'293,40,,,,,,,,,,,,62,208,,,637,304,,,,,,,,,,,49,,327,,650,674,,674,',
',195,19,,183,,451,,,829,851,,723,,240,,843,,848,833,,676,,676,,,,,324',
',,,,,,804,,,,40,,,,,,,,,62,,,211,,,,,835,195,211,62,,,839,62,,,505,',
',62,,62,,,19,,,,40,40,,,,,,,40,,62,,,,62,,,,,,858,830,,,,,,,40,875,',
',,,324,,,40,,779,,662,,904,,40,517,49,327,224,40,208,226,779,,,,208',
',228,208,,40,40,,,505,324,741,,,,,191,211,,,,,889,,,,,,,238,455,183',
'755,,,208,208,620,,,,,304,,,,,,,,,,,,,,,,,,,208,,49,488,784,,,,,208',
',191,19,49,511,,,49,,,,,,49,516,49,,,,,,208,,454,,,,,,,,,49,,,,49,,',
',,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554',
'555,556,557,558,559,560,561,562,563,,,,195,,,,,19,,828,,,,,62,,,,19',
'454,62,,19,,,,,,19,837,19,62,,,,,,,,,,,,,208,,,19,,608,,19,208,488,',
'208,,516,,208,62,,,,,,,690,208,,208,,,694,208,,,,,,,62,62,,240,208,',
',,,,,,,62,208,,,,,,35,,,,,,,,,882,651,,699,,654,655,195,,62,882,,62',
',,,,,,,62,62,,,713,714,,,,,,,,,,,,734,62,,,,191,,,,,,,,,62,,,49,,,692',
',,49,,745,35,,748,,,,195,,49,,,,,,,,,,,,,,,,62,,,,765,,,,,,,,,49,,,',
',,,,,,,,,,,,,,,,,49,49,,238,,,,,,,,,731,49,,,19,,,805,,,19,,,,,,,,,208',
',19,,,191,,49,,,49,62,,,,,,,49,49,,208,756,,,,208,,,,,19,,,,,49,,,,',
',,,,35,,,,49,62,62,19,19,208,,786,,62,,,789,,791,842,19,794,191,,,,',
',,,,,,62,878,801,,,208,,49,,62,,,19,,,19,,62,,,,,62,19,19,860,861,,',
',,,,,62,62,,,,,35,19,786,789,,794,,,,,,35,,873,19,35,,,,208,,35,881',
'35,,,,,,208,886,,,,,,,,,208,35,,,49,35,,,894,895,,19,,,,,850,,,,,,,',
',,,,186,186,,,,,,,,,,186,,186,,49,49,,,850,,,,49,,,,,,,,,,186,,186,',
',186,,186,,,49,876,,,,,,,,49,208,,,,,,19,49,,,208,,49,,,,,,,,,,,,49',
'49,,,,,,,,,,,208,,,,,,,,,19,19,,,,,,,19,,,,,,,,,,,,,,,,,,,,19,874,,',
',,,,,19,,,,,,,,19,,,,,19,,,,,,,,,,,,19,19,,,,,,,,,,,,35,,,,,,35,,,,',
',,,,,,35,,,,,,,,,,,,,,186,,,186,,,,,,186,,,186,,,35,,,,,,,,,,186,,,',
',,,,,,,35,35,186,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,186',
',,186,35,35,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,35,,,,,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'186,,,186,186,,,,186,,186,,,,,,,,,186,,186,,,,186,,,,,,35,,,,,,,,,,',
',,,,186,,,,,,,,,,,,,,,,,,,,186,186,,,35,35,,,,,,,35,,,,,,,,,,,,,,,,',
',,,35,,,,,186,,,,35,,,,,,,,35,,,186,,35,,,,,,,,,,,,35,35,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,186,,,,,,,,,,,,,,,,,,,,,,,,',
',,,186,,,,,186,,,,,,,,,,,,,,,,186,186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',186,,,,,,,,,186,,,,186,,,,,,,,,,,,,186,,,186,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,186,186,,186,,,,,,,,,,,,,,186,,,,,,,,,,186,,,,,,,,,,186',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,186,,,,,,,,,,,,,,,,,,',
',,,,,,186,,,,,,,,,186,,,,,,,,,,186' ]
        racc_goto_table = arr = ::Array.new(2346, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'53,47,22,41,104,56,53,18,53,8,53,56,59,78,43,53,48,29,29,10,53,29,135',
'21,35,47,21,53,21,101,16,32,21,21,34,75,21,21,16,21,48,6,75,107,48,81',
'106,57,106,76,7,48,2,24,42,51,16,33,106,33,126,38,50,14,21,29,4,46,103',
'50,14,34,138,55,45,110,34,137,21,39,21,77,77,80,24,52,21,105,53,57,60',
'58,60,58,126,21,52,21,52,55,55,36,36,4,21,141,54,11,144,21,54,85,123',
'86,31,87,88,89,31,90,80,91,123,52,92,93,144,123,94,95,96,11,97,60,36',
'98,99,100,82,102,79,74,72,71,70,62,84,26,112,113,114,115,116,117,54',
'121,122,83,124,125,33,33,31,61,127,128,129,130,132,133,33,27,19,15,12',
'139,5,1,,18,,33,,,,,,,33,33,,,,,41,,,26,,,141,,,51,,26,,,,57,18,33,',
'18,,,,,,57,,,78,26,77,,107,135,26,21,,,135,36,18,,21,,,,,51,,,,,,,,53',
',,,,76,21,58,,58,29,29,134,,134,,137,134,,21,21,105,47,,,21,21,45,138',
'22,38,,80,104,,53,21,48,56,103,43,16,16,16,16,29,25,46,39,,,21,48,21',
'21,126,,,101,,21,60,21,38,21,52,,29,21,11,,,,6,21,21,21,,52,42,,39,21',
',,21,21,,,21,21,21,21,21,54,7,,21,4,54,54,7,,2,,,26,31,31,,,,16,16,135',
'80,8,8,,,7,52,,51,,54,,4,,,,105,,105,,,,105,,106,106,,22,,80,106,,8',
'53,,107,56,81,22,,26,54,,29,53,21,21,56,59,31,48,,,33,29,33,16,,21,32',
'56,48,,10,,,56,48,22,21,53,53,134,134,53,,134,56,,105,,,35,,29,,,,35',
'26,26,48,,26,26,26,26,21,,21,,135,43,53,21,41,,,,,,,51,51,24,,,105,',
'80,,,,,51,21,134,,53,,48,55,,,,,,25,,48,34,,,25,,,25,34,50,14,,,,57',
',,,50,14,,57,108,,,26,26,21,44,60,21,44,106,75,25,,78,104,,21,,,44,',
'44,21,,,,,,,8,,44,,21,,,,,,101,53,,25,,,,44,,,16,,,,75,26,,,75,41,,7',
'26,21,52,,,,53,,53,,8,,,53,,,44,,34,18,34,26,21,21,18,21,,,,18,,57,',
'57,,21,21,59,57,,,,57,108,80,80,,,,,,,,108,,,,56,21,41,21,,,21,29,26',
',,47,9,,21,21,,,33,,,,21,80,53,53,48,52,,80,,,21,,,,,23,,,23,28,,,53',
'21,28,28,53,,28,23,21,23,25,,,21,80,,52,25,21,21,108,,,,,,25,,25,28',
',28,25,,23,18,28,21,,,,,,,,,,,,44,28,,,25,26,,,,,,,,,,,23,,28,,25,53',
',53,,,44,17,,52,,54,,,51,16,,80,,44,,53,,53,51,,57,,57,,,,,9,,,,,,,54',
',,,21,,,,,,,,,44,,,21,,,,,108,44,21,44,,,108,44,,,48,,,44,,44,,,17,',
',,21,21,,,,,,,21,,44,,,,44,,,,,,108,54,,,,,,,21,21,,,,,9,,,21,,53,,108',
',22,,21,9,23,28,53,21,28,56,53,,,,28,,29,28,,21,21,,,48,9,25,,,,,23',
'21,,,,,108,,,,,,,23,28,52,25,,,28,28,25,,,,,26,,,,,,,,,,,,,,,,,,,28',
',23,28,25,,,,,28,,23,17,23,28,,,23,,,,,,23,28,23,,,,,,28,,25,,,,,,,',
',23,,,,23,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,,,,44,,,,,17,,25,,,,,44,,,,17,25,44,,17,,,,',
',17,25,17,44,,,,,,,,,,,,,28,,,17,,28,,17,28,28,,28,,28,,28,44,,,,,,',
'9,28,,28,,,9,28,,,,,,,44,44,,44,28,,,,,,,,,44,28,,,,,,20,,,,,,,,,25',
'28,,9,,28,28,44,,44,25,,44,,,,,,,,44,44,,,9,9,,,,,,,,,,,,9,44,,,,23',
',,,,,,,,44,,,23,,,28,,,23,,9,20,,9,,,,44,,23,,,,,,,,,,,,,,,,44,,,,9',
',,,,,,,,23,,,,,,,,,,,,,,,,,,,,,23,23,,23,,,,,,,,,23,23,,,17,,,9,,,17',
',,,,,,,,28,,17,,,23,,23,,,23,44,,,,,,,23,23,,28,28,,,,28,,,,,17,,,,',
'23,,,,,,,,,20,,,,23,44,44,17,17,28,,28,,44,,,28,,28,9,17,28,23,,,,,',
',,,,,44,44,28,,,28,,23,,44,,,17,,,17,,44,,,,,44,17,17,9,9,,,,,,,,44',
'44,,,,,20,17,28,28,,28,,,,,,20,,9,17,20,,,,28,,20,9,20,,,,,,28,9,,,',
',,,,,28,20,,,23,20,,,9,9,,17,,,,,28,,,,,,,,,,,,37,37,,,,,,,,,,37,,37',
',23,23,,,28,,,,23,,,,,,,,,,37,,37,,,37,,37,,,23,23,,,,,,,,23,28,,,,',
',17,23,,,28,,23,,,,,,,,,,,,23,23,,,,,,,,,,,28,,,,,,,,,17,17,,,,,,,17',
',,,,,,,,,,,,,,,,,,,17,17,,,,,,,,17,,,,,,,,17,,,,,17,,,,,,,,,,,,17,17',
',,,,,,,,,,,20,,,,,,20,,,,,,,,,,,20,,,,,,,,,,,,,,37,,,37,,,,,,37,,,37',
',,20,,,,,,,,,,37,,,,,,,,,,,20,20,37,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,',
',,,,,20,,,20,,,,37,,,37,20,20,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,20,,,,',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
'37,37,37,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,37',
'37,,,,37,,37,,,,,,,,,37,,37,,,,37,,,,,,20,,,,,,,,,,,,,,,37,,,,,,,,,',
',,,,,,,,,,37,37,,,20,20,,,,,,,20,,,,,,,,,,,,,,,,,,,,20,,,,,37,,,,20',
',,,,,,,20,,,37,,20,,,,,,,,,,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,37,,,,,,,,,',
',,,,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,37,,,,37,,,,,',
',,,,,,,37,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,,37,,,,,,,',
',,,,,,37,,,,,,,,,,37,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,37,,,,,,,,,,37' ]
        racc_goto_check = arr = ::Array.new(2346, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   177,    52,   nil,    22,  -118,    -3,    50,  -270,   584,
  -467,  -563,  -606,   nil,    33,   143,   -25,   764,   -67,   169,
  1137,    23,    -8,   681,  -193,   291,   142,  -111,   681,     8,
   nil,   105,  -220,  -228,    10,  -229,  -335,  1480,   -11,     7,
   nil,   -38,    40,  -218,   531,  -165,    51,    -1,    14,   nil,
    32,    13,    82,    -2,    97,  -126,     1,    23,  -504,  -206,
  -333,  -303,  -107,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   118,   139,   127,   nil,    51,  -268,  -641,  -511,  -342,  -102,
    39,  -431,   112,  -101,   112,    19,  -609,    21,  -608,  -280,
  -701,  -325,  -112,  -624,   110,  -320,  -133,  -341,  -631,    46,
  -238,   -61,  -442,  -523,   -86,  -389,  -323,  -433,    49,   nil,
  -283,   nil,   -85,   -86,  -731,  -415,  -519,  -629,   nil,   nil,
   nil,    95,   148,   110,   136,   -90,  -155,   135,  -433,  -224,
  -227,   nil,  -491,  -600,  -399,  -343,   nil,  -504,  -293,  -531,
   nil,  -670,   nil,   nil,  -299 ]

racc_goto_default = [
   nil,   nil,   nil,    44,   nil,    58,   356,   322,   nil,   486,
   nil,   799,   nil,   325,   nil,   nil,   nil,   198,    27,    31,
   200,   201,   nil,   202,   nil,   221,    65,   nil,    77,    82,
    87,   nil,    95,   606,   nil,   nil,   nil,    24,    32,   nil,
    41,    45,    50,   nil,   205,   241,   nil,   275,   498,   175,
    89,   nil,     6,   580,   225,   nil,   218,   497,   677,   424,
   220,   nil,   nil,   252,    67,    71,    76,    80,    85,    91,
    93,   nil,   250,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   521,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   381,   385,   710,   366,   nil,   369,   371,   357,
   nil,   502,   nil,   nil,   nil,   nil,   nil,   nil,    48,    54,
    60,    64,   nil,   nil,   nil,   nil,   391,   nil,   nil,   nil,
   nil,   108,   663,   665,   nil,   379,   384,   361,   nil,   572,
   573,   661,   373,   374,   209 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 139, :_reduce_none,
  2, 140, :_reduce_2,
  0, 141, :_reduce_3,
  1, 141, :_reduce_4,
  3, 141, :_reduce_5,
  1, 143, :_reduce_none,
  4, 143, :_reduce_7,
  4, 146, :_reduce_8,
  2, 147, :_reduce_9,
  0, 151, :_reduce_10,
  1, 151, :_reduce_11,
  3, 151, :_reduce_12,
  0, 165, :_reduce_13,
  4, 145, :_reduce_14,
  3, 145, :_reduce_15,
  3, 145, :_reduce_none,
  3, 145, :_reduce_17,
  2, 145, :_reduce_18,
  3, 145, :_reduce_19,
  3, 145, :_reduce_20,
  3, 145, :_reduce_21,
  3, 145, :_reduce_22,
  3, 145, :_reduce_23,
  4, 145, :_reduce_none,
  3, 145, :_reduce_25,
  3, 145, :_reduce_26,
  3, 145, :_reduce_27,
  6, 145, :_reduce_none,
  5, 145, :_reduce_29,
  5, 145, :_reduce_none,
  5, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_33,
  3, 145, :_reduce_34,
  3, 145, :_reduce_35,
  1, 145, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_38,
  3, 164, :_reduce_39,
  2, 164, :_reduce_40,
  2, 164, :_reduce_41,
  1, 164, :_reduce_none,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_46,
  2, 156, :_reduce_47,
  2, 156, :_reduce_48,
  1, 168, :_reduce_none,
  4, 168, :_reduce_none,
  4, 168, :_reduce_none,
  4, 173, :_reduce_none,
  2, 167, :_reduce_53,
  3, 167, :_reduce_none,
  4, 167, :_reduce_55,
  5, 167, :_reduce_none,
  4, 167, :_reduce_57,
  5, 167, :_reduce_none,
  2, 167, :_reduce_59,
  2, 167, :_reduce_60,
  1, 157, :_reduce_61,
  3, 157, :_reduce_62,
  1, 177, :_reduce_63,
  3, 177, :_reduce_64,
  1, 176, :_reduce_65,
  2, 176, :_reduce_66,
  3, 176, :_reduce_67,
  5, 176, :_reduce_none,
  2, 176, :_reduce_69,
  4, 176, :_reduce_none,
  2, 176, :_reduce_71,
  1, 176, :_reduce_72,
  3, 176, :_reduce_none,
  1, 179, :_reduce_74,
  3, 179, :_reduce_75,
  2, 178, :_reduce_76,
  3, 178, :_reduce_77,
  1, 181, :_reduce_none,
  3, 181, :_reduce_none,
  1, 180, :_reduce_80,
  4, 180, :_reduce_81,
  3, 180, :_reduce_82,
  3, 180, :_reduce_none,
  3, 180, :_reduce_none,
  3, 180, :_reduce_none,
  2, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 155, :_reduce_88,
  4, 155, :_reduce_89,
  3, 155, :_reduce_90,
  3, 155, :_reduce_91,
  3, 155, :_reduce_92,
  3, 155, :_reduce_93,
  2, 155, :_reduce_94,
  1, 155, :_reduce_none,
  1, 183, :_reduce_none,
  2, 184, :_reduce_97,
  1, 184, :_reduce_98,
  3, 184, :_reduce_99,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_103,
  1, 185, :_reduce_104,
  1, 152, :_reduce_105,
  1, 152, :_reduce_none,
  1, 153, :_reduce_107,
  3, 153, :_reduce_108,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  3, 166, :_reduce_183,
  5, 166, :_reduce_184,
  3, 166, :_reduce_185,
  6, 166, :_reduce_186,
  5, 166, :_reduce_187,
  5, 166, :_reduce_none,
  5, 166, :_reduce_none,
  5, 166, :_reduce_none,
  4, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_193,
  3, 166, :_reduce_194,
  3, 166, :_reduce_195,
  3, 166, :_reduce_196,
  3, 166, :_reduce_197,
  3, 166, :_reduce_198,
  3, 166, :_reduce_199,
  3, 166, :_reduce_200,
  4, 166, :_reduce_none,
  4, 166, :_reduce_none,
  2, 166, :_reduce_203,
  2, 166, :_reduce_204,
  3, 166, :_reduce_205,
  3, 166, :_reduce_206,
  3, 166, :_reduce_207,
  3, 166, :_reduce_208,
  3, 166, :_reduce_209,
  3, 166, :_reduce_210,
  3, 166, :_reduce_211,
  3, 166, :_reduce_212,
  3, 166, :_reduce_213,
  3, 166, :_reduce_214,
  3, 166, :_reduce_215,
  3, 166, :_reduce_216,
  3, 166, :_reduce_217,
  2, 166, :_reduce_218,
  2, 166, :_reduce_219,
  3, 166, :_reduce_220,
  3, 166, :_reduce_221,
  3, 166, :_reduce_222,
  3, 166, :_reduce_223,
  3, 166, :_reduce_224,
  5, 166, :_reduce_225,
  1, 166, :_reduce_none,
  1, 163, :_reduce_none,
  1, 160, :_reduce_228,
  2, 160, :_reduce_229,
  2, 160, :_reduce_230,
  4, 160, :_reduce_231,
  2, 160, :_reduce_232,
  3, 195, :_reduce_233,
  4, 195, :_reduce_234,
  4, 195, :_reduce_none,
  6, 195, :_reduce_none,
  1, 196, :_reduce_237,
  1, 196, :_reduce_none,
  1, 169, :_reduce_239,
  2, 169, :_reduce_240,
  2, 169, :_reduce_241,
  4, 169, :_reduce_242,
  1, 169, :_reduce_243,
  4, 199, :_reduce_none,
  1, 199, :_reduce_none,
  0, 201, :_reduce_246,
  2, 172, :_reduce_247,
  1, 200, :_reduce_none,
  2, 200, :_reduce_249,
  3, 200, :_reduce_250,
  2, 198, :_reduce_251,
  2, 197, :_reduce_252,
  0, 197, :_reduce_253,
  1, 192, :_reduce_254,
  2, 192, :_reduce_255,
  3, 192, :_reduce_256,
  4, 192, :_reduce_257,
  3, 162, :_reduce_258,
  4, 162, :_reduce_none,
  2, 162, :_reduce_260,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  0, 222, :_reduce_270,
  4, 190, :_reduce_271,
  4, 190, :_reduce_272,
  3, 190, :_reduce_273,
  3, 190, :_reduce_274,
  2, 190, :_reduce_275,
  4, 190, :_reduce_276,
  3, 190, :_reduce_277,
  3, 190, :_reduce_278,
  1, 190, :_reduce_279,
  4, 190, :_reduce_280,
  3, 190, :_reduce_281,
  1, 190, :_reduce_282,
  5, 190, :_reduce_283,
  4, 190, :_reduce_284,
  3, 190, :_reduce_285,
  2, 190, :_reduce_286,
  1, 190, :_reduce_none,
  2, 190, :_reduce_288,
  2, 190, :_reduce_289,
  6, 190, :_reduce_290,
  6, 190, :_reduce_291,
  0, 223, :_reduce_292,
  0, 224, :_reduce_293,
  7, 190, :_reduce_294,
  0, 225, :_reduce_295,
  0, 226, :_reduce_296,
  7, 190, :_reduce_297,
  5, 190, :_reduce_298,
  4, 190, :_reduce_299,
  5, 190, :_reduce_300,
  0, 227, :_reduce_301,
  0, 228, :_reduce_302,
  9, 190, :_reduce_none,
  0, 229, :_reduce_304,
  6, 190, :_reduce_305,
  0, 230, :_reduce_306,
  0, 231, :_reduce_307,
  8, 190, :_reduce_308,
  0, 232, :_reduce_309,
  0, 233, :_reduce_310,
  6, 190, :_reduce_311,
  0, 234, :_reduce_312,
  6, 190, :_reduce_313,
  0, 235, :_reduce_314,
  0, 236, :_reduce_315,
  9, 190, :_reduce_316,
  1, 190, :_reduce_317,
  1, 190, :_reduce_318,
  1, 190, :_reduce_319,
  1, 190, :_reduce_none,
  1, 159, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  2, 213, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  2, 212, :_reduce_329,
  3, 237, :_reduce_330,
  2, 237, :_reduce_331,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  3, 238, :_reduce_334,
  3, 238, :_reduce_335,
  1, 214, :_reduce_336,
  5, 214, :_reduce_337,
  1, 149, :_reduce_none,
  2, 149, :_reduce_339,
  1, 240, :_reduce_340,
  3, 240, :_reduce_341,
  3, 241, :_reduce_342,
  1, 174, :_reduce_none,
  2, 174, :_reduce_344,
  1, 174, :_reduce_345,
  3, 174, :_reduce_346,
  1, 242, :_reduce_347,
  2, 244, :_reduce_348,
  1, 244, :_reduce_349,
  6, 239, :_reduce_350,
  4, 239, :_reduce_351,
  4, 239, :_reduce_352,
  2, 239, :_reduce_353,
  2, 239, :_reduce_354,
  4, 239, :_reduce_355,
  2, 239, :_reduce_356,
  2, 239, :_reduce_357,
  1, 239, :_reduce_358,
  0, 248, :_reduce_359,
  5, 247, :_reduce_360,
  2, 170, :_reduce_361,
  4, 170, :_reduce_none,
  4, 170, :_reduce_none,
  2, 211, :_reduce_364,
  4, 211, :_reduce_365,
  3, 211, :_reduce_366,
  4, 211, :_reduce_367,
  3, 211, :_reduce_368,
  2, 211, :_reduce_369,
  1, 211, :_reduce_370,
  0, 250, :_reduce_371,
  5, 210, :_reduce_372,
  0, 251, :_reduce_373,
  5, 210, :_reduce_374,
  0, 253, :_reduce_375,
  6, 216, :_reduce_376,
  1, 252, :_reduce_377,
  1, 252, :_reduce_none,
  6, 148, :_reduce_379,
  0, 148, :_reduce_380,
  1, 254, :_reduce_381,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 255, :_reduce_384,
  1, 255, :_reduce_385,
  2, 150, :_reduce_386,
  1, 150, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_391,
  1, 258, :_reduce_none,
  2, 258, :_reduce_none,
  3, 259, :_reduce_394,
  1, 259, :_reduce_395,
  3, 204, :_reduce_396,
  3, 205, :_reduce_397,
  3, 206, :_reduce_398,
  3, 206, :_reduce_399,
  1, 262, :_reduce_400,
  3, 262, :_reduce_401,
  1, 263, :_reduce_402,
  2, 263, :_reduce_403,
  3, 207, :_reduce_404,
  3, 207, :_reduce_405,
  1, 265, :_reduce_406,
  3, 265, :_reduce_407,
  1, 260, :_reduce_408,
  2, 260, :_reduce_409,
  1, 261, :_reduce_410,
  2, 261, :_reduce_411,
  1, 264, :_reduce_412,
  0, 267, :_reduce_413,
  3, 264, :_reduce_414,
  0, 268, :_reduce_415,
  4, 264, :_reduce_416,
  1, 266, :_reduce_417,
  1, 266, :_reduce_418,
  1, 266, :_reduce_419,
  1, 266, :_reduce_none,
  2, 188, :_reduce_421,
  1, 188, :_reduce_422,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  3, 257, :_reduce_427,
  1, 256, :_reduce_428,
  1, 256, :_reduce_429,
  2, 256, :_reduce_none,
  2, 256, :_reduce_none,
  1, 182, :_reduce_432,
  1, 182, :_reduce_433,
  1, 182, :_reduce_434,
  1, 182, :_reduce_435,
  1, 182, :_reduce_436,
  1, 182, :_reduce_437,
  1, 182, :_reduce_438,
  1, 182, :_reduce_439,
  1, 182, :_reduce_440,
  1, 182, :_reduce_441,
  1, 182, :_reduce_442,
  1, 208, :_reduce_443,
  1, 158, :_reduce_444,
  1, 161, :_reduce_445,
  1, 161, :_reduce_none,
  1, 217, :_reduce_447,
  3, 217, :_reduce_448,
  2, 217, :_reduce_449,
  4, 219, :_reduce_450,
  2, 219, :_reduce_451,
  6, 270, :_reduce_452,
  4, 270, :_reduce_453,
  4, 270, :_reduce_454,
  2, 270, :_reduce_455,
  4, 270, :_reduce_456,
  2, 270, :_reduce_457,
  2, 270, :_reduce_458,
  1, 270, :_reduce_459,
  0, 270, :_reduce_460,
  1, 273, :_reduce_none,
  1, 273, :_reduce_462,
  1, 274, :_reduce_463,
  1, 274, :_reduce_464,
  1, 274, :_reduce_465,
  1, 274, :_reduce_466,
  1, 275, :_reduce_467,
  3, 275, :_reduce_468,
  1, 277, :_reduce_469,
  3, 277, :_reduce_none,
  1, 278, :_reduce_471,
  3, 278, :_reduce_472,
  1, 276, :_reduce_none,
  4, 276, :_reduce_none,
  3, 276, :_reduce_none,
  2, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 245, :_reduce_478,
  3, 245, :_reduce_479,
  3, 279, :_reduce_480,
  1, 271, :_reduce_481,
  3, 271, :_reduce_482,
  1, 280, :_reduce_none,
  1, 280, :_reduce_none,
  2, 246, :_reduce_485,
  1, 246, :_reduce_486,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 243, :_reduce_489,
  2, 272, :_reduce_490,
  0, 272, :_reduce_491,
  1, 220, :_reduce_492,
  4, 220, :_reduce_493,
  0, 209, :_reduce_494,
  2, 209, :_reduce_495,
  1, 194, :_reduce_496,
  3, 194, :_reduce_497,
  3, 282, :_reduce_498,
  2, 282, :_reduce_499,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 189, :_reduce_none,
  1, 189, :_reduce_none,
  0, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_none,
  0, 191, :_reduce_523 ]

racc_reduce_n = 524

racc_shift_n = 910

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :ARRAY_BEG => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tWORDS_BEG => 118,
  :tAWORDS_BEG => 119,
  :tSTRING_DBEG => 120,
  :tSTRING_DVAR => 121,
  :tSTRING_END => 122,
  :tSTRING => 123,
  :tSYMBOL => 124,
  :tNL => 125,
  :tEH => 126,
  :tCOLON => 127,
  :tCOMMA => 128,
  :tSPACE => 129,
  :tSEMI => 130,
  :tLAMBDA => 131,
  :tLAMBEG => 132,
  :tLBRACK2 => 133,
  :tLBRACK => 134,
  :tEQL => 135,
  :tLOWEST => 136,
  "-@NUM" => 137 }

racc_nt_base = 138

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "ARRAY_BEG",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tLBRACK2",
  "tLBRACK",
  "tEQL",
  "tLOWEST",
  "\"-@NUM\"",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "opt_nl",
  "primary",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@2",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@3",
  "@4",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_larglist",
  "lambda_body",
  "block_param",
  "f_block_optarg",
  "f_block_opt",
  "block_args_tail",
  "f_block_arg",
  "opt_block_args_tail",
  "f_arg",
  "f_rest_arg",
  "do_block",
  "@18",
  "operation3",
  "@19",
  "@20",
  "cases",
  "@21",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@22",
  "@23",
  "sym",
  "f_args",
  "f_optarg",
  "opt_f_block_arg",
  "f_norm_arg",
  "f_bad_arg",
  "f_arg_item",
  "f_margs",
  "f_marg",
  "f_marg_list",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_5(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = new_body(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_12(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_13(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_14(val, _values, result)
                      result = new_alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

def _reduce_18(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = new_if(val[1], val[2], val[0], nil)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = new_if(val[1], val[2], nil, val[0])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_while(val[1], val[2], val[0])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = new_until(val[1], val[2], val[0])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_rescue_mod(val[1], val[0], val[2])
                    
    result
end

# reduce 24 omitted

def _reduce_25(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_27(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

# reduce 28 omitted

def _reduce_29(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

def _reduce_33(val, _values, result)
                      result = new_assign val[0], val[1], s(:svalue, val[2])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:masgn, val[0], val[2])
                    
    result
end

# reduce 36 omitted

# reduce 37 omitted

def _reduce_38(val, _values, result)
                      result = s(:and, val[0], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:or, val[0], val[2])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_not(val[0], val[1])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_not(val[0], val[1])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = new_return(val[0], val[1])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = new_break(val[0], val[1])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = new_next(val[0], val[1])
                    
    result
end

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

# reduce 54 omitted

def _reduce_55(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                    result = new_call val[0], val[2].intern, val[3]
                  
    result
end

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_63(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0] << s(:splat, val[2])
                    
    result
end

# reduce 68 omitted

def _reduce_69(val, _values, result)
                      result = val[0] << s(:splat)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_72(val, _values, result)
                      result = s(:array, s(:splat))
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

# reduce 78 omitted

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_81(val, _values, result)
                      args = val[2] ? val[2] : []
                      result = s(:attrasgn, val[0], :[]=, s(:arglist, *args))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = new_call val[0], val[2], []
                    
    result
end

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = new_attrasgn(val[0], :[]=, val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_91(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

# reduce 95 omitted

# reduce 96 omitted

def _reduce_97(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_104(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 106 omitted

def _reduce_107(val, _values, result)
                      result = s(:undef, val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

def _reduce_183(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      result = new_assign val[0], val[1], s(:rescue_mod, val[2], val[4])
                    
    result
end

def _reduce_185(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_op_asgn1(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

def _reduce_193(val, _values, result)
                      result = new_irange(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_erange(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

# reduce 201 omitted

# reduce 202 omitted

def _reduce_203(val, _values, result)
                      result = new_call val[1], [:"+@", []], []
                      result = val[1] if [:int, :float].include? val[1].type
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[1], [:"-@", []], []
                      if val[1].type == :int
                        val[1][1] = -val[1][1]
                        result = val[1]
                      elsif val[1].type == :float
                        val[1][1] = -val[1][1].to_f
                        result = val[1]
                      end
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_not(val[1], new_binary_call(
                                 val[0], ['==', []], val[2]))
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_not(val[1], new_binary_call(
                                 val[0], ['=~', []], val[2]))
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_not(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_and(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_or(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_if(val[1], val[0], val[2], val[4])
                    
    result
end

# reduce 226 omitted

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_229(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_231(val, _values, result)
                      val[0] << s(:hash, *val[2])
                      result = val[0]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = [s(:hash, *val[0])]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = []
                    
    result
end

def _reduce_234(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 235 omitted

# reduce 236 omitted

def _reduce_237(val, _values, result)
                      result = []
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_240(val, _values, result)
                      result = val[0]
                      add_block_pass val[0], val[1]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                      add_block_pass result, val[1]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                    
    result
end

def _reduce_243(val, _values, result)
                      result = []
                      add_block_pass result, val[0]
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      lexer.cmdarg_push 1
                    
    result
end

def _reduce_247(val, _values, result)
                      lexer.cmdarg_pop
                      result = val[1]
                    
    result
end

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = new_block_pass(val[0], val[1])
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [new_splat(val[0], val[1])]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_257(val, _values, result)
                      result  = val[0] << new_splat(val[2], val[3])
                    
    result
end

def _reduce_258(val, _values, result)
                      val[0] << val[2]
                      result = s(:array, *val[0])
                    
    result
end

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

def _reduce_270(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_271(val, _values, result)
                      result = s(:begin, val[2])
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = new_paren(val[0], val[1], val[2])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = new_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_277(val, _values, result)
                      result = new_array(val[0], val[1], val[2])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = new_hash(val[0], val[1], val[2])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = new_return(val[0])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = new_not(val[0], val[2])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = new_not(val[0], nil)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_call(nil, val[0], [])
                      result << val[1]
                    
    result
end

# reduce 287 omitted

def _reduce_288(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_if(val[0], val[1], val[4], val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_293(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:while, val[2], val[5])
                    
    result
end

def _reduce_295(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:until, val[2], val[5])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:case, val[1], *val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:case, nil, *val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:case, nil, val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      # ...
                    
    result
end

def _reduce_302(val, _values, result)
                      # ...
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      # ...
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_class val[0], val[1], val[2], val[4], val[5]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_307(val, _values, result)
                      # ...
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_sclass(val[0], val[3], val[6], val[7])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_310(val, _values, result)
                      # ...
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_module(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_312(val, _values, result)
                      push_scope
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_def(val[0], nil, val[1], val[3], val[4], val[5])
                      pop_scope
                    
    result
end

def _reduce_314(val, _values, result)
                       lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_315(val, _values, result)
                      push_scope
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_def(val[0], val[1], val[4], val[6], val[7], val[8])
                      pop_scope
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_break(val[0])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_319(val, _values, result)
                      result = s(:redo)
                    
    result
end

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

def _reduce_329(val, _values, result)
                      result = new_call nil, [:lambda, []], []
                      result << new_iter(val[0], val[1])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_331(val, _values, result)
                      result = nil
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_336(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_337(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_340(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_341(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_342(val, _values, result)
                      result = new_assign(new_assignable(new_ident(
                                  val[0])), val[1], val[2])
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_349(val, _values, result)
                      nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = new_block_args(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_block_args(val[0], val[2], nil, val[3])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_block_args(val[0], nil, val[2], val[3])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_block_args(val[0], nil, nil, nil)
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_block_args(val[0], nil, nil, val[1])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_block_args(nil, val[0], val[2], val[3])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = new_block_args(nil, val[0], nil, val[1])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = new_block_args(nil, nil, val[0], val[1])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = new_block_args(nil, nil, nil, val[0])
                    
    result
end

def _reduce_359(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_360(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_361(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

# reduce 362 omitted

# reduce 363 omitted

def _reduce_364(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = new_call(val[0], [:call, []], val[2])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call(val[0], val[2])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_super(val[0], nil)
                    
    result
end

def _reduce_371(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_372(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_373(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_374(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_375(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_376(val, _values, result)
                      part = s(:when, s(:array, *val[2]), val[4])
                      result = [part]
                      result.push *val[5] if val[5]
                    
    result
end

def _reduce_377(val, _values, result)
                      result = [val[0]]
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      exc = val[1] || s(:array)
                      exc << new_assign(val[2], val[2], s(:gvar, '$!'.intern)) if val[2]
                      result = [s(:resbody, exc, val[4])]
                      result.push val[5].first if val[5]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_381(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 382 omitted

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[1].nil? ? s(:nil) : val[1]
                    
    result
end

# reduce 387 omitted

# reduce 388 omitted

# reduce 389 omitted

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = new_str val[0]
                    
    result
end

# reduce 392 omitted

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = s(:str, value(val[0]))
                    
    result
end

def _reduce_396(val, _values, result)
                      result = new_xstr val[1]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = new_regexp val[1], val[2]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_401(val, _values, result)
                      part = val[1]
                      part = s(:dstr, "", val[1]) if part.type == :evstr
                      result = val[0] << part
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = val[0].concat([val[1]])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0] << s(:str, value(val[1]))
                    
    result
end

def _reduce_408(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_409(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_411(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_str_content(val[0])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = lexer.strterm
                      lexer.strterm = nil
                    
    result
end

def _reduce_414(val, _values, result)
                      lexer.strterm = val[1]
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_415(val, _values, result)
                      lexer.cond_push 0
                      lexer.cmdarg_push 0
                      result = lexer.strterm
                      lexer.strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_416(val, _values, result)
                      lexer.strterm = val[1]
                      lexer.cond_lexpop
                      lexer.cmdarg_lexpop
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      result = new_sym(val[1])
                      lexer.lex_state = :expr_end
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = new_dsym val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_int(val[0])
                    
    result
end

def _reduce_429(val, _values, result)
                      result = new_float(val[0])
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      result = new_ident(val[0])
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_434(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_self(val[0])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_true(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_false(val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = new___FILE__(val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new___LINE__(val[0])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_var_ref(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = s(:nth_ref, value(val[0]))
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_448(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = new_args(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_args(val[0], val[2], nil, val[3])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_args(val[0], nil, val[2], val[3])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_args(val[0], nil, nil, val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_args(nil, val[0], val[2], val[3])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_args(nil, val[0], nil, val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_args(nil, nil, val[0], val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = new_args(nil, nil, nil, val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_args(nil, nil, nil, nil)
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = value(val[0]).to_sym
                      scope.add_local result
                    
    result
end

def _reduce_463(val, _values, result)
                      raise 'formal argument cannot be a constant'
                    
    result
end

def _reduce_464(val, _values, result)
                      raise 'formal argument cannot be an instance variable'
                    
    result
end

def _reduce_465(val, _values, result)
                      raise 'formal argument cannot be a class variable'
                    
    result
end

def _reduce_466(val, _values, result)
                      raise 'formal argument cannot be a global variable'
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:lasgn, val[0])
                    
    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 473 omitted

# reduce 474 omitted

# reduce 475 omitted

# reduce 476 omitted

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_479(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_assign(new_assignable(new_ident(val[0])), val[1], val[2])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0]
                      val[0] << val[2]
                    
    result
end

# reduce 483 omitted

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      result = "*#{value(val[1])}".to_sym
                    
    result
end

def _reduce_486(val, _values, result)
                      result = :"*"
                    
    result
end

# reduce 487 omitted

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      result = "&#{value(val[1])}".to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = []
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0].push(*val[2])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [val[0], val[2]]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [new_sym(val[0]), val[1]]
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

def _reduce_523(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Opal
