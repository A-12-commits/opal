#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Opal
  class Parser < Racc::Parser


##### State transition tables begin ###

clist = [
'64,65,66,8,52,598,276,568,58,59,-479,276,598,62,276,60,61,63,24,25,67',
'68,-95,467,-103,98,642,23,29,28,91,90,92,93,560,547,18,559,109,677,-102',
'-87,7,42,6,9,95,94,85,51,87,86,88,-98,89,96,97,598,82,83,-95,39,40,-94',
'-100,-70,677,206,207,620,206,207,676,-103,-97,271,560,102,271,562,206',
'207,101,37,598,-102,31,641,598,53,275,55,-95,33,196,275,-103,41,275',
'676,-102,-82,206,207,-99,19,197,-87,-98,567,80,74,76,77,78,79,102,198',
'597,75,81,101,-100,102,-87,597,-94,57,101,-94,54,64,65,66,673,52,38',
'84,205,58,59,-97,-93,-87,62,-101,60,61,63,24,25,67,68,-87,311,-89,841',
'311,23,29,28,91,90,92,93,-94,-91,18,102,-570,597,944,619,101,42,-94',
'-88,95,94,85,51,87,86,88,805,89,96,97,-99,82,83,102,39,40,-93,102,101',
'597,247,102,101,597,302,-95,101,-95,-90,-103,-95,-103,-571,-102,-103',
'-102,211,303,-102,215,216,-98,53,-98,55,-101,-98,-467,630,311,41,759',
'759,-89,-467,-100,-96,-100,19,399,-100,677,677,80,74,76,77,78,79,-92',
'206,207,75,81,-97,-91,-97,759,-88,-97,57,402,-93,54,64,65,66,-570,52',
'38,84,102,58,59,676,676,101,62,-90,60,61,63,24,25,67,68,-92,632,631',
'628,817,23,29,28,91,90,92,93,-93,-89,220,-99,-571,-99,685,630,-99,42',
'-93,74,95,94,85,51,87,86,88,75,89,96,97,-91,82,83,-88,39,40,228,102',
'102,758,758,204,101,101,-89,-101,102,-101,818,-98,-101,101,-570,-90',
'-89,630,211,206,207,215,-571,-92,53,102,55,758,-91,225,101,-88,41,227',
'226,632,631,604,-91,605,219,-88,912,-94,799,80,74,76,77,78,79,-90,413',
'-103,75,81,426,913,958,-92,-100,-90,57,340,466,54,64,65,66,-92,52,38',
'84,337,58,59,632,631,628,62,468,60,61,63,259,260,67,68,560,-568,340',
'562,-96,258,29,28,91,90,92,93,337,469,220,352,351,355,354,-97,228,42',
'-479,216,95,94,85,51,87,86,88,263,89,96,97,630,82,83,500,39,40,267,268',
'-470,355,354,844,502,605,269,-470,225,-470,-470,338,227,226,223,224',
'504,-470,211,-87,630,215,-568,635,53,512,55,-69,257,-95,255,586,41,347',
'345,344,630,346,338,102,219,529,-568,530,101,80,261,76,77,78,79,632',
'631,633,75,81,531,586,547,347,345,344,57,346,-470,54,-470,264,340,-477',
'540,38,84,64,65,66,-477,52,337,632,631,58,59,280,560,311,62,562,60,61',
'63,259,260,67,68,632,631,637,-93,271,258,29,28,91,90,92,93,752,-102',
'220,355,354,423,544,665,652,42,425,424,95,94,85,51,87,86,88,263,89,96',
'97,630,82,83,936,39,40,228,232,237,238,239,234,236,244,245,240,241,338',
'548,221,222,-476,102,242,243,-89,211,101,-476,215,311,549,53,1005,55',
'-98,257,225,255,231,41,227,226,223,224,235,233,229,219,230,304,305,228',
'80,261,76,77,78,79,632,631,643,75,81,-475,246,653,-238,203,201,57,-475',
'311,54,563,264,202,-472,564,38,84,64,65,66,-472,52,-473,102,-474,58',
'59,504,101,-473,62,-474,60,61,63,259,260,67,68,411,412,571,-91,574,258',
'29,28,91,90,92,93,102,-100,220,575,804,101,578,665,199,42,200,579,95',
'94,85,51,87,86,88,263,89,96,97,581,82,83,583,39,40,228,232,237,238,239',
'234,236,244,245,240,241,-337,-337,221,222,-88,593,242,243,-337,211,594',
'625,215,415,-97,53,228,55,626,257,225,255,231,41,227,226,223,224,235',
'233,229,219,230,542,543,610,80,261,76,77,78,79,206,207,611,75,81,225',
'246,355,354,227,226,57,612,-337,54,-337,264,870,844,636,38,84,64,65',
'66,8,52,640,902,903,58,59,904,96,97,62,644,60,61,63,24,25,67,68,104',
'105,106,107,108,23,29,28,91,90,92,93,647,967,18,347,345,344,-269,346',
'7,42,649,9,95,94,85,51,87,86,88,650,89,96,97,651,82,83,271,39,40,664',
'586,228,347,345,344,586,346,347,345,344,340,346,967,228,347,345,344',
'228,346,37,337,228,284,228,311,53,695,55,696,33,870,844,704,41,706,-82',
'203,462,589,707,709,19,553,349,463,592,80,74,76,77,78,79,355,354,225',
'75,81,720,227,226,223,224,726,57,727,728,54,64,65,66,733,52,38,84,747',
'58,59,748,750,754,62,605,60,61,63,259,260,67,68,338,762,465,801,464',
'258,294,298,91,90,92,93,-270,512,220,539,536,512,512,820,821,295,502',
'537,95,94,85,51,87,86,88,504,89,96,97,831,82,83,833,330,834,347,345',
'344,340,346,720,539,550,104,105,106,107,108,337,551,586,838,347,345',
'344,292,346,271,289,271,839,53,271,55,535,288,538,720,228,228,844,349',
'325,104,105,106,107,108,352,351,355,354,80,74,76,77,78,79,589,850,851',
'75,81,852,854,592,465,578,464,57,857,859,54,64,65,66,854,52,299,84,863',
'58,59,866,844,874,62,338,60,61,63,259,260,67,68,875,877,878,-570,880',
'258,294,298,91,90,92,93,889,578,220,539,607,892,894,896,898,295,900',
'608,95,94,85,51,87,86,88,-271,89,96,97,915,82,83,916,330,311,347,345',
'344,340,346,918,919,920,539,616,922,923,720,337,925,586,614,347,345',
'344,292,346,-269,215,929,-571,53,938,55,606,939,609,941,947,949,950',
'349,311,570,963,-272,969,971,352,351,355,354,80,74,76,77,78,79,589,854',
'980,75,81,854,854,865,301,984,615,57,538,938,54,64,65,66,987,52,299',
'84,988,58,59,993,578,995,62,338,60,61,63,259,260,67,68,997,999,898,1001',
'1010,258,294,298,91,90,92,93,938,1018,220,539,616,726,854,938,1033,42',
'1034,746,95,94,85,51,87,86,88,1001,89,96,97,1001,82,83,1001,39,40,1039',
'586,1040,347,345,344,586,346,347,345,344,340,346,1001,,,,,,,211,337',
',215,,,53,,55,615,,538,,,41,,,-290,-290,589,,,219,,349,-290,,80,74,76',
'77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,259,260,67,68,338,,-290,,-290,258,294,298,91,90,92,93,,,220',
'539,616,,,,,42,,746,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,586',
',347,345,344,586,346,347,345,344,340,346,,,,,,,,211,337,,215,,,53,,55',
'615,,538,,,41,,,-292,-292,589,,,219,,349,-292,,80,74,76,77,78,79,355',
'354,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,338,,-292,,-292,258,294,298,91,90,92,93,,,220,539,1008,,,',
',42,,1009,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,228,,,,,586',
',347,345,344,340,346,,,,,,242,243,211,337,,215,,,53,,55,1007,,609,225',
',41,,227,226,223,224,,,219,,349,,,80,74,76,77,78,79,355,354,,75,81,',
',,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,338',
',,,,23,29,28,91,90,92,93,,,18,,586,,347,345,344,42,346,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,228,586,,347,345,344,586,346,347,345',
'344,340,346,589,,,,242,243,,211,337,,215,,,53,,55,,,225,,231,41,227',
'226,223,224,589,,229,19,230,349,,,80,74,76,77,78,79,355,354,,75,81,',
',,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68',
'338,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
'263,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241',
'-289,-289,221,222,,,242,243,-289,211,,,215,-571,,53,,55,,257,225,,231',
'41,227,226,223,224,235,233,229,219,230,,,,80,261,76,77,78,79,,,,75,81',
',246,,-238,,,57,,-289,54,-289,264,,,,38,84,64,65,66,,52,,,,58,59,,,',
'62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,',
'42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55',
',,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,261,76,77,78',
'79,,,,75,81,,246,822,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59',
',,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,586,,347',
'345,344,42,346,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,',
',,586,,347,345,344,340,346,589,,,,242,243,,211,337,,215,,,53,,55,,,225',
',231,41,227,226,223,224,,,229,19,230,349,,,80,74,76,77,78,79,355,354',
',75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25',
'67,68,338,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340,346,,,,,242',
'243,,211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224,,,229,19,230',
'349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,24,25,67,68,338,,,,,23,29,28,91,90,92,93,',
',18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,',
',586,,347,345,344,340,346,,,,,242,243,,211,337,,215,,,53,,55,,,225,',
'231,41,227,226,223,224,,,229,19,230,349,,,80,74,76,77,78,79,355,354',
',75,81,102,,,,,101,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'259,260,67,68,338,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,330,,347,345,344,340,346,,,,,,,,,337',
',,,,,,367,,,31,,,53,,55,,33,,,,,,349,,,,,,,352,351,355,354,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338',
'60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295',
',,95,94,85,51,87,86,372,,89,96,97,228,82,83,,330,,347,345,344,340,346',
',,,,,,242,243,337,,,,378,,,373,,,215,,225,53,231,55,227,226,223,224',
',,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'-567,-567,-567,,-567,299,84,,-567,-567,,,,-567,338,-567,-567,-567,-567',
'-567,-567,-567,,-567,,,,-567,-567,-567,-567,-567,-567,-567,,,-567,,',
',,,,-567,,,-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,,-567',
'-567,,-567,-567,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,-567,,,-567,-567,,-567,,-567,,-567,225,-567,231,-567,227',
'226,223,224,235,233,229,-567,230,-567,,,-567,-567,-567,-567,-567,-567',
',,,-567,-567,,246,,,,,-567,,,-567,,-567,,,,-567,-567,-568,-568,-568',
',-568,,,,-568,-568,,,,-568,,-568,-568,-568,-568,-568,-568,-568,,-568',
',,,-568,-568,-568,-568,-568,-568,-568,,,-568,,,,,,,-568,,,-568,-568',
'-568,-568,-568,-568,-568,-568,-568,-568,-568,,-568,-568,,-568,-568,228',
'232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,-568,,',
'-568,-568,,-568,,-568,,-568,225,-568,231,-568,227,226,223,224,235,233',
'229,-568,230,-568,,,-568,-568,-568,-568,-568,-568,,,,-568,-568,,246',
',,,,-568,,,-568,,-568,,,,-568,-568,64,65,66,8,52,,,,58,59,,,,62,,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,6,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340',
'346,,,,,242,243,,37,337,,31,,,53,,55,,33,225,,231,41,227,226,223,224',
',,,19,,349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,415,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,338,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,586,,347,345,344,340,346,,,,,,,,211,337,,215,,,53,,55,,,,,,41',
',,,,,,,19,,349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,338,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
'228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211',
',,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80',
'74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234',
'236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81',
',246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67',
'68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221',
'222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235',
'233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
'228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,37',
',,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,',
'80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8,52,38,84,,58',
'59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7',
'42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,221,222,,,242,243,,37,,,31,,,53,,55,,33',
'225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79',
',,,75,81,,246,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245',
'240,241,,,221,222,,,242,243,,37,,,31,,,53,,55,,33,225,,231,41,227,226',
'223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29',
'28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243',
',211,,,215,,,53,,55,,431,225,,231,41,227,226,223,224,235,233,229,219',
'230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,',
',,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55',
',,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78',
'79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,263,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
'245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,257,225,,231,41',
'227,226,223,224,235,233,229,219,230,,,,80,261,76,77,78,79,,,,75,81,',
'246,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,263,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
'245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,257,225,,231,41',
'227,226,223,224,235,233,229,219,230,,,,80,261,76,77,78,79,,,,75,81,',
'246,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240',
'241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29',
'28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243',
',211,,,215,,,53,,55,,431,225,,231,41,227,226,223,224,235,233,229,219',
'230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,',
',,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,-591,-591,,,242,243,,211,,,215,,,53,,55',
',,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241',
',,-591,-591,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223',
'224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,228,-591,-591,-591,-591,234,236,,,-591,-591,,,,,,,242,243,,37,,,31',
',,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-591,-591,-591,-591,234,236',
',,-591,-591,,,,,,,242,243,,211,,,215,,471,53,,55,,,225,,231,41,227,226',
'223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,228,-591,-591,-591,-591,234,236,,,-591,-591,,,,,,,242',
'243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219',
'230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,',
'58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-591,-591',
'-591,-591,234,236,,,-591,-591,,,,,,,242,243,,211,,,215,,,53,,55,,,225',
',231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260',
'67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,-591,-591,-591,-591,234,236,,,-591,-591',
',,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235',
'233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
'228,-591,-591,-591,-591,234,236,,,-591,-591,,,,,,,242,243,,211,,,215',
',,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234',
'236,,,240,241,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226',
'223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,',
',54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,228,232,237,238,239,234,236,244,,240,241,,,,,,,242,243',
',211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,',
',,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260',
'67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,',
',,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,257,,255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81',
',,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,521',
',55,,257,,255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57',
',,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67',
'68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
'263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,525,53,,55',
',257,,255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,,264,,,,38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,24,25,67,68',
',,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,284,,,53,,55,,33,,,,41',
',,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,793,,347',
'345,344,340,346,,,,,,,,,337,,,,,,,292,,,215,,,53,,55,,,,,,,,349,782',
',,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,533,,,57,,,54,64',
'65,66,8,52,299,84,,58,59,,,,62,338,60,61,63,24,25,67,68,,,,,,23,29,28',
'91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,37,,,284,,,53,,55,,33,,,,41,,,,,,,,19,,,',
',80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,',
',,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,330,,347,345,344,340',
'346,,,,,,,,,337,,,,,,,292,,,289,,,53,,55,,,,,,,,349,,,,,,,352,351,355',
'354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,311,52,299,84',
',58,59,,,,62,338,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,211,,,215,553,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,793,,347,345,344,340,346,,,,,,,,,337,,,,,,,585,,,215,,,53,,55',
',,,,,,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,299,84,,58,59,,,,62,338,60,61,63,24,25,67,68,,,,,',
'23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,',
'58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,',
',,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67',
'68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87,86',
'372,,89,96,97,,82,83,,330,,347,345,344,340,346,,,,,,,,,337,,,,,,,373',
',,215,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,',
',75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,-572,-572,-572,,-572,38,84,,-572',
'-572,,,,-572,,-572,-572,-572,-572,-572,-572,-572,,,,,,-572,-572,-572',
'-572,-572,-572,-572,,,-572,,,,,,,-572,,,-572,-572,-572,-572,-572,-572',
'-572,-572,-572,-572,-572,,-572,-572,,-572,-572,,,,,,,,,,,,,,,,,,,,,-572',
',,-572,-572,,-572,,-572,,-572,,-572,,-572,,,,,,,,-572,,,,,-572,-572',
'-572,-572,-572,-572,,,,-572,-572,,,,,,,-572,,,-572,,-572,,,,-572,-572',
'-573,-573,-573,,-573,,,,-573,-573,,,,-573,,-573,-573,-573,-573,-573',
'-573,-573,,,,,,-573,-573,-573,-573,-573,-573,-573,,,-573,,,,,,,-573',
',,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,,-573,-573',
',-573,-573,,,,,,,,,,,,,,,,,,,,,-573,,,-573,-573,,-573,,-573,,-573,,-573',
',-573,,,,,,,,-573,,,,,-573,-573,-573,-573,-573,-573,,,,-573,-573,,,',
',,,-573,,,-573,,-573,,,,-573,-573,64,65,66,,52,,,,58,59,,,,62,,60,61',
'63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,',
',57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260',
'67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',257,,,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54',
',264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,',
',,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,682,,255,,41,,,,,,,,219,,,,',
'80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52',
',,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,255,,41,,,,,,,,219,,,,,80,261',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,700,53,,55',
',,,255,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,415,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295',
',,95,94,85,51,87,86,88,,89,96,97,,82,83,,793,,347,345,344,340,346,,',
',,,,,,337,,,,,,,292,,,289,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59',
',,,62,338,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,',
',,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,',
',,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62',
',60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,',
'95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,793,,347,345,344,340,346,,,,,,,,,337,',
',,,,,292,,,289,,,53,,55,,,,,,,,349,782,,,,,,352,351,355,354,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338',
'60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,',
',,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,',
'82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,682,,255,,41,,',
',,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84',
'64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,',
',80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,8',
'52,,,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,',
'18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,',
',,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55',
',33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298',
'91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',793,,347,345,344,340,346,,,,,,,,,337,,,,,,,585,,,215,,,53,,55,,,,,',
',,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,8,52,299,84,,58,59,,,,62,338,60,61,63,24,25,67,68,,,,,,23,29',
'28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58',
'59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7',
'42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,',
',,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67',
'68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,',
'41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80',
'261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,',
',,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,',
'62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,',
',,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,',
',75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61',
'63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,803,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,',
',,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,',
',,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,',
',,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84',
',58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,',
',,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,',
',,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,682,,255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,',
',,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260',
'67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',,,255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54',
',264,,,,38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,24,25,67,68,,,',
',,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38',
'84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18',
',,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,',
',,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,,,,292,,,289,,,53,,55',
',,,,,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,299,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91',
'90,92,93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,,',
',,,,,,,,,,,,,,,,,,,,292,,,289,,,53,,55,,,,,,,,,,,,,,,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,,60,61',
'63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,431,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,',
'57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,',
',258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,',
',18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55',
',33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62',
',60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84',
',58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,',
',,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,',
',,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,',
',,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41',
',,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,',
',,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,255,,41,,,,,,,,219,,,,,80,261,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,8,52,,,,58,59',
',,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42',
',9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68',
',,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,,,,976,,,215,,,53,,55,,,,,,,,,',
',,,,,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,682,,,,41,,,,,,,,219,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61',
'63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53',
',55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28',
'91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,',
',,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,',
',,,,211,,,215,,,53,,55,,682,,255,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23',
'29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,',
'82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,',
',,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,',
',,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,-574,80,261,76',
'77,78,79,-574,-574,-574,75,81,,-574,-574,,-574,,57,,,54,,264,,-574,',
'38,84,,,,,,,,-574,-574,,-574,-574,-574,-574,-574,,,,,,,,,,,,,,,,,,,',
',,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574',
'-574,,,-574,-574,-574,,658,,,,-574,,,,,,-574,,-574,,-574,-574,-574,-574',
'-574,-574,-574,,-574,-574,-574,,,,,,,,,,,,,-574,-574,,-90,,-574,,-289',
'-574,,-574,,,-99,-289,-289,-289,,,,-289,-289,,-289,,,,,,,,,,,,,,,,,',
',,-289,-289,,-289,-289,-289,-289,-289,,,,,,,,,,,,,,,,,,,,,,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,,,-289',
'-289,-289,,661,,,,-289,,,,,,-289,,-289,,-289,-289,-289,-289,-289,-289',
'-289,,-289,,-289,,,,,,,,,,,,,-289,-289,,-92,,-289,,-574,-289,,-289,',
',-101,-574,-574,-574,,,-574,-574,-574,,-574,,,,,,,,,-574,-574,-574,',
',,,,,,,-574,-574,,-574,-574,-574,-574,-574,,,,,,,,,,,,,,,,,,,,,,-574',
'-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574',
',,-574,-574,-574,,819,-574,,,-574,,-574,,-574,,-574,,-574,,-574,-574',
'-574,-574,-574,-574,-574,,-574,-574,-574,,,,,,,,,,,,,-574,-574,-574',
'-574,,-574,,-289,-574,,-574,,,-99,-289,-289,-289,,,-289,-289,-289,,-289',
',,,,,,,,,-289,-289,,,,,,,,,-289,-289,,-289,-289,-289,-289,-289,,,,,',
',,,,,,,,,,,,,,,,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,,,-289,-289,-289,,661,-289,,,-289,,-289,,-289,,-289',
',-289,,-289,-289,-289,-289,-289,-289,-289,,-289,,-289,,,,,,,,,,,,,-289',
'-289,-289,-289,,-289,,-403,-289,,-289,,,-101,-403,-403,-403,,,-403,-403',
'-403,,-403,,,,,,,,,-403,-403,-403,,,,,,,,,-403,-403,,-403,-403,-403',
'-403,-403,,,,,,,,,,,,,,,,,,,,,,-403,-403,-403,-403,-403,-403,-403,-403',
'-403,-403,-403,-403,-403,-403,-403,,,-403,-403,-403,,,-403,,271,-403',
',-403,,-403,,-403,,-403,,-403,-403,-403,-403,-403,-403,-403,,-403,-403',
'-403,,,,,,,,,,,,,-403,-403,-403,-403,-298,-403,,,-403,,-403,-298,-298',
'-298,,,-298,-298,-298,,-298,,,,,,,,,,-298,-298,,,,,,,,,-298,-298,,-298',
'-298,-298,-298,-298,,,,,,,,,,,,,,,,,,,,,,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,-298,,,-298,-298,-298,,,-298',
',280,-298,,-298,,-298,,-298,,-298,,-298,-298,-298,-298,-298,-298,-298',
',-298,,-298,,,,,,,,,,,,,-298,-298,-298,-298,-284,-298,,,-298,,-298,-284',
'-284,-284,,,-284,-284,-284,,-284,,,,,,,,,,-284,-284,-284,,,,,,,,-284',
'-284,,-284,-284,-284,-284,-284,,,,,,,,,,,,,,,,,,,,,,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,,,-284,-284,-284',
',,-284,,,-284,,-284,,-284,,-284,,-284,,-284,-284,-284,-284,-284,-284',
'-284,,-284,,-284,,,,,,,,,,,,,-284,-284,-284,-284,-590,-284,,-284,-284',
',-284,-590,-590,-590,,,-590,-590,-590,,-590,,,,,,,,,-590,-590,-590,',
',,,,,,,-590,-590,,-590,-590,-590,-590,-590,,,,,,,,,,,,,,,,,,,,,,-590',
'-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590',
',,-590,-590,-590,,,-590,,271,-590,,-590,,-590,,-590,,-590,,-590,-590',
'-590,-590,-590,-590,-590,,-590,-590,-590,,,,,,,,,,,,,-590,-590,-590',
'-590,-590,-590,,,-590,,-590,-590,-590,-590,,,-590,-590,-590,,-590,,',
',,,,,,-590,-590,-590,,,,,,,,,-590,-590,,-590,-590,-590,-590,-590,,,',
',,,,,,,,,,,,,,,,,,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590',
'-590,-590,-590,-590,-590,,,-590,-590,-590,,,-590,,271,-590,,-590,,-590',
',-590,,-590,,-590,-590,-590,-590,-590,-590,-590,,-590,-590,-590,,,,',
',,,,,,,,-590,-590,-590,-590,-590,-590,,,-590,,-590,-590,-590,-590,,',
'-590,-590,-590,,-590,,,,,,,,,,-590,,,,,,,,,,-590,-590,,-590,-590,-590',
'-590,-590,,,,,,,,,,,,-590,,,,,,,-590,-590,-590,,,-590,-590,-590,,-590',
',,,,-590,-590,,,,-590,,,-590,,,,,271,-590,-590,-590,,-590,-590,-590',
'-590,-590,,,,,,,,,,,,-590,,,,,,,,,,,,,-590,,-590,,,-590,,,-590,-590',
',-590,,,,,-590,,-590,-590,-590,271,-590,-590,-590,-590,,-590,,,,,,,',
',,-590,,,,,-590,,,,,-590,-590,,-590,-590,-590,-590,-590,-590,,-590,',
',-590,443,447,,,445,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125',
'126,-590,-590,,,145,146,132,133,-590,,,,,271,-590,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,,-590,147,,,,,,,,,,,,-590,,-590',
',,-590,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190',
'191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172',
'171,184,185,186,187,188,152,159,150,151,148,149,112,114,111,,113,,,',
',,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133',
',,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,,,147',
'193,,,,,,,,,,81,157,168,158,181,154,174,164,163,189,192,179,162,161',
'156,182,190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180',
'165,153,172,171,184,185,186,187,188,152,159,150,151,148,149,112,114',
',,113,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145',
'146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119',
'141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174,164,163,189,192',
'179,162,161,156,182,190,191,166,155,169,173,175,167,160,,,,176,183,178',
'177,170,180,165,153,172,171,184,185,186,187,188,152,159,150,151,148',
'149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125',
'126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135',
'129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174,164',
'163,189,192,179,162,161,156,182,190,191,166,155,169,173,175,167,160',
',,,176,183,178,177,170,180,165,153,172,171,184,185,186,187,188,152,159',
'150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131,128',
'130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138',
'134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154',
'174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173,175',
'167,160,,,,176,183,178,387,386,388,385,153,172,171,184,185,186,187,188',
'152,159,150,151,383,384,381,114,87,86,382,,89,,,,,,,143,144,140,122',
'123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,392,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,409,408,113,,410,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,409,408,113,,410,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123',
'124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121',
'142,139,138,134,135,129,127,119,141,120,437,441,147,,438,,,,,,,,,143',
'144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,271',
',,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,450,441,147',
',451,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146',
'132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141',
'120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125',
'126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135',
'129,127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124',
'131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,450,441,147,,451,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,666,441,147,,667',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'668,447,147,,669,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,711,441,147,,712,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,714,447,147,,715,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,450,441,147,,451',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'666,441,147,,667,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,668,447,147,,669,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,766,441,147,,767,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,271,,,,,',
'137,136,,121,142,139,138,134,135,129,127,119,141,120,768,447,147,,769',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'774,447,147,,772,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,774,447,147,,862,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,1027,441,147,',
'1028,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146',
'132,133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141',
'120,1029,447,147,,1030,,,,,,,,,143,144,140,122,123,124,131,128,130,',
',125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134',
'135,129,127,119,141,120,,,147' ]
        racc_action_table = arr = ::Array.new(26038, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,0,0,358,56,324,0,0,210,27,359,0,296,0,0,0,0,0,0,0,365,212,368',
'1,403,0,0,0,0,0,0,0,316,466,0,316,6,498,610,290,0,0,0,0,0,0,0,0,0,0',
'0,766,0,0,0,876,0,0,210,0,0,293,767,706,512,313,313,377,627,627,498',
'212,877,27,317,3,296,317,470,470,3,0,928,466,0,403,940,0,56,0,974,0',
'9,27,977,0,296,512,1010,706,724,724,768,0,11,290,1027,324,0,0,0,0,0',
'0,358,12,358,0,0,358,1028,359,365,359,368,0,359,293,0,18,18,18,470,18',
'0,0,15,18,18,1040,610,290,18,769,18,18,18,18,18,18,18,290,313,766,724',
'627,18,18,18,18,18,18,18,293,767,18,876,768,876,876,377,876,18,293,877',
'18,18,18,18,18,18,18,651,18,18,18,1029,18,18,377,18,18,540,928,377,928',
'21,940,928,940,35,974,940,974,768,977,974,977,769,1010,977,1010,18,37',
'1010,18,18,1027,18,1027,18,1030,1027,381,506,42,18,600,601,711,381,1028',
'651,1028,18,78,1028,522,523,18,18,18,18,18,18,769,779,779,18,18,1040',
'712,1040,879,838,1040,18,79,540,18,19,19,19,1029,19,18,18,281,19,19',
'522,523,281,19,714,19,19,19,19,19,19,19,715,506,506,506,666,19,19,19',
'19,19,19,19,540,711,19,1029,1030,1029,506,638,1029,19,540,72,19,19,19',
'19,19,19,19,72,19,19,19,712,19,19,838,19,19,474,600,601,600,601,14,600',
'601,711,1030,779,1030,667,666,1030,779,714,714,711,394,19,16,16,19,715',
'715,19,879,19,879,712,474,879,838,19,474,474,638,638,363,712,363,19',
'838,820,14,638,19,19,19,19,19,19,714,98,14,19,19,194,821,894,715,667',
'714,19,894,211,19,23,23,23,715,23,19,19,894,23,23,394,394,394,23,213',
'23,23,23,23,23,23,23,320,372,575,320,820,23,23,23,23,23,23,23,575,214',
'23,894,894,894,894,821,493,23,36,220,23,23,23,23,23,23,23,23,23,23,23',
'396,23,23,252,23,23,26,26,382,575,575,990,253,990,26,382,493,372,372',
'894,493,493,493,493,256,372,23,36,398,23,372,398,23,270,23,283,23,36',
'23,592,23,592,592,592,400,592,575,362,23,285,372,286,362,23,23,23,23',
'23,23,396,396,396,23,23,287,865,303,865,865,865,23,865,372,23,372,23',
'889,383,292,23,23,24,24,24,383,24,889,398,398,24,24,294,729,295,24,729',
'24,24,24,24,24,24,24,400,400,400,303,298,24,24,24,24,24,24,24,592,303',
'24,889,889,111,300,458,437,24,111,111,24,24,24,24,24,24,24,24,24,24',
'24,405,24,24,865,24,24,458,458,458,458,458,458,458,458,458,458,458,889',
'304,458,458,384,620,458,458,437,24,620,384,24,965,305,24,965,24,437',
'24,458,24,458,24,458,458,458,458,458,458,458,24,458,38,38,308,24,24',
'24,24,24,24,405,405,405,24,24,385,458,438,458,13,13,24,385,315,24,318',
'24,13,386,319,24,24,25,25,25,386,25,387,777,388,25,25,321,777,387,25',
'388,25,25,25,25,25,25,25,84,84,329,438,330,25,25,25,25,25,25,25,783',
'438,25,331,650,783,332,672,13,25,13,334,25,25,25,25,25,25,25,25,25,25',
'25,335,25,25,339,25,25,672,672,672,672,672,672,672,672,672,672,672,43',
'43,672,672,650,353,672,672,43,25,356,390,25,364,650,25,475,25,390,25',
'672,25,672,25,672,672,672,672,672,672,672,25,672,299,299,367,25,25,25',
'25,25,25,357,357,369,25,25,475,672,578,578,475,475,25,373,43,25,43,25',
'753,753,399,25,25,31,31,31,31,31,402,797,797,31,31,797,797,797,31,421',
'31,31,31,31,31,31,31,5,5,5,5,5,31,31,31,31,31,31,31,427,915,31,915,915',
'915,429,915,31,31,432,31,31,31,31,31,31,31,31,435,31,31,31,436,31,31',
'444,31,31,455,349,476,349,349,349,581,349,581,581,581,581,581,1005,477',
'1005,1005,1005,478,1005,31,581,479,31,494,514,31,517,31,518,31,1013',
'1013,524,31,528,529,209,209,349,532,534,31,541,581,209,349,31,31,31',
'31,31,31,581,581,494,31,31,545,494,494,494,494,554,31,555,556,31,32',
'32,32,569,32,31,31,585,32,32,587,591,596,32,602,32,32,32,32,32,32,32',
'581,603,209,642,209,32,32,32,32,32,32,32,648,654,32,291,291,659,662',
'670,671,32,679,291,32,32,32,32,32,32,32,681,32,32,32,694,32,32,698,57',
'701,57,57,57,57,57,708,306,306,282,282,282,282,282,57,306,589,710,589',
'589,589,32,589,713,32,716,717,32,718,32,291,32,291,719,722,723,725,57',
'57,705,705,705,705,705,57,57,57,57,32,32,32,32,32,32,589,731,732,32',
'32,736,737,589,306,739,306,32,742,743,32,33,33,33,745,33,32,32,749,33',
'33,751,755,761,33,57,33,33,33,33,33,33,33,763,765,770,774,775,33,33',
'33,33,33,33,33,786,787,33,366,366,789,790,791,793,33,796,366,33,33,33',
'33,33,33,33,802,33,33,33,823,33,33,824,325,825,325,325,325,325,325,826',
'830,832,375,375,835,836,837,325,842,750,375,750,750,750,33,750,845,33',
'846,862,33,867,33,366,868,366,871,881,884,885,325,886,325,906,907,917',
'921,325,325,325,325,33,33,33,33,33,33,750,931,932,33,33,933,934,750',
'33,935,375,33,375,937,33,39,39,39,942,39,33,33,943,39,39,951,953,955',
'39,325,39,39,39,39,39,39,39,956,957,958,960,976,39,39,39,39,39,39,39',
'985,992,39,584,584,1006,1011,1012,1017,39,1019,584,39,39,39,39,39,39',
'39,1020,39,39,39,1021,39,39,1022,39,39,1023,752,1026,752,752,752,852',
'752,852,852,852,852,852,1041,,,,,,,39,852,,39,,,39,,39,584,,584,,,39',
',,612,612,752,,,39,,852,612,,39,39,39,39,39,39,852,852,,39,39,,,,,,',
'39,,,39,40,40,40,,40,39,39,,40,40,,,,40,,40,40,40,40,40,40,40,852,,612',
',612,40,40,40,40,40,40,40,,,40,738,738,,,,,40,,738,40,40,40,40,40,40',
'40,,40,40,40,,40,40,,40,40,,866,,866,866,866,854,866,854,854,854,854',
'854,,,,,,,,40,854,,40,,,40,,40,738,,738,,,40,,,878,878,866,,,40,,854',
'878,,40,40,40,40,40,40,854,854,,40,40,,,,,,,40,,,40,41,41,41,,41,40',
'40,,41,41,,,,41,,41,41,41,41,41,41,41,854,,878,,878,41,41,41,41,41,41',
'41,,,41,975,975,,,,,41,,975,41,41,41,41,41,41,41,,41,41,41,,41,41,,41',
'41,,482,,,,,859,,859,859,859,859,859,,,,,,482,482,41,859,,41,,,41,,41',
'975,,975,482,,41,,482,482,482,482,,,41,,859,,,41,41,41,41,41,41,859',
'859,,41,41,,,,,,,41,,,41,53,53,53,,53,41,41,,53,53,,,,53,,53,53,53,53',
'53,53,53,859,,,,,53,53,53,53,53,53,53,,,53,,936,,936,936,936,53,936',
',53,53,53,53,53,53,53,,53,53,53,,53,53,,53,53,484,938,,938,938,938,896',
'938,896,896,896,896,896,936,,,,484,484,,53,896,,53,,,53,,53,,,484,,484',
'53,484,484,484,484,938,,484,53,484,896,,,53,53,53,53,53,53,896,896,',
'53,53,,,,,,,53,,,53,54,54,54,,54,53,53,,54,54,,,,54,,54,54,54,54,54',
'54,54,896,,,,,54,54,54,54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54',
'54,54,54,54,54,,54,54,,54,54,697,697,697,697,697,697,697,697,697,697',
'697,772,772,697,697,,,697,697,772,54,,,54,772,,54,,54,,54,697,,697,54',
'697,697,697,697,697,697,697,54,697,,,,54,54,54,54,54,54,,,,54,54,,697',
',697,,,54,,772,54,772,54,,,,54,54,55,55,55,,55,,,,55,55,,,,55,,55,55',
'55,55,55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55',
'55,55,55,55,55,55,55,,55,55,,55,55,674,674,674,674,674,674,674,674,674',
'674,674,,,674,674,,,674,674,,55,,,55,,,55,,55,,,674,,674,55,674,674',
'674,674,674,674,674,55,674,,,,55,55,55,55,55,55,,,,55,55,,674,674,,',
',55,,,55,,55,,,,55,55,58,58,58,,58,,,,58,58,,,,58,,58,58,58,58,58,58',
'58,,,,,,58,58,58,58,58,58,58,,,58,,984,,984,984,984,58,984,,58,58,58',
'58,58,58,58,,58,58,58,,58,58,,58,58,485,,,,,,980,,980,980,980,980,980',
'984,,,,485,485,,58,980,,58,,,58,,58,,,485,,485,58,485,485,485,485,,',
'485,58,485,980,,,58,58,58,58,58,58,980,980,,58,58,,,,,,,58,,,58,59,59',
'59,,59,58,58,,59,59,,,,59,,59,59,59,59,59,59,59,980,,,,,59,59,59,59',
'59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,,59,59,59,,59,59,,59,59',
'486,,,,,,997,,997,997,997,997,997,,,,,486,486,,59,997,,59,,,59,,59,',
',486,,486,59,486,486,486,486,,,486,59,486,997,,,59,59,59,59,59,59,997',
'997,,59,59,,,,,,,59,,,59,62,62,62,,62,59,59,,62,62,,,,62,,62,62,62,62',
'62,62,62,997,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62',
'62,62,,62,62,62,,62,62,,62,62,487,,,,,,999,,999,999,999,999,999,,,,',
'487,487,,62,999,,62,,,62,,62,,,487,,487,62,487,487,487,487,,,487,62',
'487,999,,,62,62,62,62,62,62,999,999,,62,62,62,,,,,62,62,,,62,63,63,63',
',63,62,62,,63,63,,,,63,,63,63,63,63,63,63,63,999,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,,63,63,63,,63,63,,571,,571',
'571,571,571,571,,,,,,,,,571,,,,,,,63,,,63,,,63,,63,,63,,,,,,571,,,,',
',,571,571,571,571,63,63,63,63,63,63,,,,63,63,,,,,,,63,,,63,64,64,64',
',64,63,63,,64,64,,,,64,571,64,64,64,64,64,64,64,,,,,,64,64,64,64,64',
'64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,,64,64,64,480,64,64,,579',
',579,579,579,579,579,,,,,,,480,480,579,,,,64,,,64,,,64,,480,64,480,64',
'480,480,480,480,,,,579,,,,,,,579,579,579,579,64,64,64,64,64,64,,,,64',
'64,,,,,,,64,,,64,85,85,85,,85,64,64,,85,85,,,,85,579,85,85,85,85,85',
'85,85,,85,,,,85,85,85,85,85,85,85,,,85,,,,,,,85,,,85,85,85,85,85,85',
'85,85,85,85,85,,85,85,,85,85,20,20,20,20,20,20,20,20,20,20,20,,,20,20',
',,20,20,,85,,,85,85,,85,,85,,85,20,85,20,85,20,20,20,20,20,20,20,85',
'20,85,,,85,85,85,85,85,85,,,,85,85,,20,,,,,85,,,85,,85,,,,85,85,88,88',
'88,,88,,,,88,88,,,,88,,88,88,88,88,88,88,88,,88,,,,88,88,88,88,88,88',
'88,,,88,,,,,,,88,,,88,88,88,88,88,88,88,88,88,88,88,,88,88,,88,88,250',
'250,250,250,250,250,250,250,250,250,250,,,250,250,,,250,250,,88,,,88',
'88,,88,,88,,88,250,88,250,88,250,250,250,250,250,250,250,88,250,88,',
',88,88,88,88,88,88,,,,88,88,,250,,,,,88,,,88,,88,,,,88,88,100,100,100',
'100,100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100',
'100,100,100,100,100,,,100,,,,,,100,100,100,100,100,100,100,100,100,100',
'100,,100,100,100,,100,100,,100,100,481,,,,,,1001,,1001,1001,1001,1001',
'1001,,,,,481,481,,100,1001,,100,,,100,,100,,100,481,,481,100,481,481',
'481,481,,,,100,,1001,,,100,100,100,100,100,100,1001,1001,,100,100,,',
',,,100,100,,,100,104,104,104,,104,100,100,,104,104,,,,104,,104,104,104',
'104,104,104,104,1001,,,,,104,104,104,104,104,104,104,,,104,,,,,,,104',
',,104,104,104,104,104,104,104,,104,104,104,,104,104,,104,104,,,,,,,1034',
',1034,1034,1034,1034,1034,,,,,,,,104,1034,,104,,,104,,104,,,,,,104,',
',,,,,,104,,1034,,,104,104,104,104,104,104,1034,1034,,104,104,,,,,,,104',
',,104,105,105,105,,105,104,104,,105,105,,,,105,,105,105,105,105,105',
'105,105,1034,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105',
'105,105,105,105,105,,105,105,105,,105,105,,105,105,434,434,434,434,434',
'434,434,434,434,434,434,,,434,434,,,434,434,,105,,,105,,,105,,105,,',
'434,,434,105,434,434,434,434,434,434,434,105,434,,,,105,105,105,105',
'105,105,,,,105,105,,434,,,,,105,,,105,106,106,106,,106,105,105,,106',
'106,,,,106,,106,106,106,106,106,106,106,,,,,,106,106,106,106,106,106',
'106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,,106,106,106,,106',
'106,,106,106,453,453,453,453,453,453,453,453,453,453,453,,,453,453,',
',453,453,,106,,,106,,,106,,106,,,453,,453,106,453,453,453,453,453,453',
'453,106,453,,,,106,106,106,106,106,106,,,,106,106,,453,,,,,106,,,106',
'107,107,107,,107,106,106,,107,107,,,,107,,107,107,107,107,107,107,107',
',,,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107',
'107,107,,107,107,107,,107,107,,107,107,552,552,552,552,552,552,552,552',
'552,552,552,,,552,552,,,552,552,,107,,,107,,,107,,107,,,552,,552,107',
'552,552,552,552,552,552,552,107,552,,,,107,107,107,107,107,107,,,,107',
'107,,552,,,,,107,,,107,108,108,108,108,108,107,107,,108,108,,,,108,',
'108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108,',
',,,,108,108,,108,108,108,108,108,108,108,108,,108,108,108,,108,108,',
'108,108,721,721,721,721,721,721,721,721,721,721,721,,,721,721,,,721',
'721,,108,,,108,,,108,,108,,108,721,,721,108,721,721,721,721,721,721',
'721,108,721,,,,108,108,108,108,108,108,,,,108,108,,721,,,,,108,,,108',
'109,109,109,109,109,108,108,,109,109,,,,109,,109,109,109,109,109,109',
'109,,,,,,109,109,109,109,109,109,109,,,109,,,,,,109,109,109,109,109',
'109,109,109,109,109,109,,109,109,109,,109,109,,109,109,807,807,807,807',
'807,807,807,807,807,807,807,,,807,807,,,807,807,,109,,,109,,,109,,109',
',109,807,,807,109,807,807,807,807,807,807,807,109,807,,,,109,109,109',
'109,109,109,,,,109,109,,807,,,,,109,,,109,196,196,196,196,196,109,109',
',196,196,,,,196,,196,196,196,196,196,196,196,,,,,,196,196,196,196,196',
'196,196,,,196,,,,,,196,196,,196,196,196,196,196,196,196,196,,196,196',
'196,,196,196,,196,196,809,809,809,809,809,809,809,809,809,809,809,,',
'809,809,,,809,809,,196,,,196,,,196,,196,,196,809,,809,196,809,809,809',
'809,809,809,809,196,809,,,,196,196,196,196,196,196,,,,196,196,,809,',
',,,196,,,196,197,197,197,,197,196,196,,197,197,,,,197,,197,197,197,197',
'197,197,197,,,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197',
'197,197,197,197,197,,197,197,197,,197,197,,197,197,812,812,812,812,812',
'812,812,812,812,812,812,,,812,812,,,812,812,,197,,,197,,,197,,197,,197',
'812,,812,197,812,812,812,812,812,812,812,197,812,,,,197,197,197,197',
'197,197,,,,197,197,,812,,,,,197,,,197,198,198,198,,198,197,197,,198',
'198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198,198,198,198,198',
'198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,,198,198,198,,198',
'198,,198,198,814,814,814,814,814,814,814,814,814,814,814,,,814,814,',
',814,814,,198,,,198,,,198,,198,,,814,,814,198,814,814,814,814,814,814',
'814,198,814,,,,198,198,198,198,198,198,,,,198,198,,814,,,,,198,,,198',
'199,199,199,,199,198,198,,199,199,,,,199,,199,199,199,199,199,199,199',
',,,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199',
'199,199,199,199,199,199,,199,199,,199,199,816,816,816,816,816,816,816',
'816,816,816,816,,,816,816,,,816,816,,199,,,199,,,199,,199,,199,816,',
'816,199,816,816,816,816,816,816,816,199,816,,,,199,199,199,199,199,199',
',,,199,199,,816,,,,,199,,,199,,199,,,,199,199,200,200,200,,200,,,,200',
'200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200,200,200,200',
'200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,200,200,200,,200',
'200,,200,200,909,909,909,909,909,909,909,909,909,909,909,,,909,909,',
',909,909,,200,,,200,,,200,,200,,200,909,,909,200,909,909,909,909,909',
'909,909,200,909,,,,200,200,200,200,200,200,,,,200,200,,909,,,,,200,',
',200,,200,,,,200,200,204,204,204,,204,,,,204,204,,,,204,,204,204,204',
'204,204,204,204,,,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204',
'204,204,204,204,204,204,,204,204,204,,204,204,,204,204,911,911,911,911',
'911,911,911,911,911,911,911,,,911,911,,,911,911,,204,,,204,,,204,,204',
',,911,,911,204,911,911,911,911,911,911,911,204,911,,,,204,204,204,204',
'204,204,,,,204,204,,911,,,,,204,,,204,205,205,205,,205,204,204,,205',
'205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205,205,205,205,205',
'205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,,205,205,205,,205',
'205,,205,205,964,964,964,964,964,964,964,964,964,964,964,,,964,964,',
',964,964,,205,,,205,,,205,,205,,205,964,,964,205,964,964,964,964,964',
'964,964,205,964,,,,205,205,205,205,205,205,,,,205,205,,964,,,,,205,',
',205,206,206,206,,206,205,205,,206,206,,,,206,,206,206,206,206,206,206',
'206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206',
'206,206,206,,206,206,206,,206,206,,206,206,472,472,472,472,472,472,472',
'472,472,472,472,,,472,472,,,472,472,,206,,,206,,,206,,206,,,472,,472',
'206,472,472,472,472,472,472,472,206,472,,,,206,206,206,206,206,206,',
',,206,206,,,,,,,206,,,206,207,207,207,,207,206,206,,207,207,,,,207,',
'207,207,207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207,',
',,,,,207,,,207,207,207,207,207,207,207,,207,207,207,,207,207,,207,207',
'473,473,473,473,473,473,473,473,473,473,473,,,473,473,,,473,473,,207',
',,207,,,207,,207,,,473,,473,207,473,473,473,473,473,473,473,207,473',
',,,207,207,207,207,207,207,,,,207,207,,,,,,,207,,,207,215,215,215,215',
'215,207,207,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,215,215,,215,215,215,215,215,215,215',
'215,,215,215,215,,215,215,,215,215,483,483,483,483,483,483,483,,,483',
'483,,,,,,,483,483,,215,,,215,,,215,,215,,215,483,,483,215,483,483,483',
'483,483,483,483,215,483,,,,215,215,215,215,215,215,,,,215,215,,,,,,',
'215,,,215,216,216,216,,216,215,215,,216,216,,,,216,,216,216,216,216',
'216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,488,488,488,488,488',
'488,488,,,488,488,,,,,,,488,488,,216,,,216,,216,216,,216,,,488,,488',
'216,488,488,488,488,488,488,488,216,488,,,,216,216,216,216,216,216,',
',,216,216,,,,,,,216,,,216,219,219,219,,219,216,216,,219,219,,,,219,',
'219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,',
',,,,,219,,,219,219,219,219,219,219,219,,219,219,219,,219,219,,219,219',
'489,489,489,489,489,489,489,,,489,489,,,,,,,489,489,,219,,,219,,,219',
',219,,,489,,489,219,489,489,489,489,489,489,489,219,489,,,,219,219,219',
'219,219,219,,,,219,219,,,,,,,219,,,219,221,221,221,,221,219,219,,221',
'221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221',
'221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,,221,221,221,,221',
'221,,221,221,490,490,490,490,490,490,490,,,490,490,,,,,,,490,490,,221',
',,221,,,221,,221,,,490,,490,221,490,490,490,490,490,490,490,221,490',
',,,221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,222,222,222,,222',
'221,221,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222',
'222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,,222,222',
'222,,222,222,,222,222,491,491,491,491,491,491,491,,,491,491,,,,,,,491',
'491,,222,,,222,,,222,,222,,,491,,491,222,491,491,491,491,491,491,491',
'222,491,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,,,222,223,223',
'223,,223,222,222,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223',
'223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223',
',223,223,223,,223,223,,223,223,492,492,492,492,492,492,492,,,492,492',
',,,,,,492,492,,223,,,223,,,223,,223,,,492,,492,223,492,492,492,492,492',
'492,492,223,492,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223',
'224,224,224,,224,223,223,,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,,224,224,224,,224,224,,224,224,495,495,495,495,495,495,495,',
',495,495,,,,,,,495,495,,224,,,224,,,224,,224,,,495,,495,224,495,495',
'495,495,495,495,495,224,495,,,,224,224,224,224,224,224,,,,224,224,,',
',,,,224,,,224,225,225,225,,225,224,224,,225,225,,,,225,,225,225,225',
'225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225',
'225,225,225,225,225,225,,225,225,225,,225,225,,225,225,496,496,496,496',
'496,496,496,496,,496,496,,,,,,,496,496,,225,,,225,,,225,,225,,,496,',
'496,225,496,496,496,496,496,496,496,225,496,,,,225,225,225,225,225,225',
',,,225,225,,,,,,,225,,,225,226,226,226,,226,225,225,,226,226,,,,226',
',226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226',
',,,,,,226,,,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226',
',,,,,,,,,,,,,,,,,,,,226,,,226,,,226,,226,,,,,,226,,,,,,,,226,,,,,226',
'226,226,226,226,226,,,,226,226,,,,,,,226,,,226,227,227,227,,227,226',
'226,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227',
'227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,,227,227,227',
',227,227,,227,227,,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,,227,,,,,,227',
',,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,228',
'228,228,,228,227,227,,228,228,,,,228,,228,228,228,228,228,228,228,,',
',,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228',
'228,228,,228,228,228,,228,228,,228,228,,,,,,,,,,,,,,,,,,,,,228,,,228',
',,228,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228',
',,,,,,228,,,228,229,229,229,,229,228,228,,229,229,,,,229,,229,229,229',
'229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229',
'229,229,229,229,229,229,,229,229,229,,229,229,,229,229,,,,,,,,,,,,,',
',,,,,,,229,,,229,,,229,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229',
'229,229,,,,229,229,,,,,,,229,,,229,230,230,230,,230,229,229,,230,230',
',,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230',
',,230,,,,,,,230,,,230,230,230,230,230,230,230,,230,230,230,,230,230',
',230,230,,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,,230,,,,,,230,,,,,,,,230',
',,,,230,230,230,230,230,230,,,,230,230,,,,,,,230,,,230,231,231,231,',
'231,230,230,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231',
'231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,,231',
'231,231,,231,231,,231,231,,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,,231,',
',,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231',
',,231,232,232,232,,232,231,231,,232,232,,,,232,,232,232,232,232,232',
'232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232',
'232,232,232,232,,232,232,232,,232,232,,232,232,,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,',
'232,232,,,,,,,232,,,232,233,233,233,,233,232,232,,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,,',
',,,,,,,,,,,,,,,,,,233,,,233,,,233,,233,,,,,,233,,,,,,,,233,,,,,233,233',
'233,233,233,233,,,,233,233,,,,,,,233,,,233,234,234,234,,234,233,233',
',234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234',
'234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,,234,234,234,',
'234,234,,234,234,,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,,234,,,,,,234,',
',,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,235',
'235,235,,235,234,234,,235,235,,,,235,,235,235,235,235,235,235,235,,',
',,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,,235,235,235,,235,235,,235,235,,,,,,,,,,,,,,,,,,,,,235,,,235',
',,235,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235',
',,,,,,235,,,235,236,236,236,,236,235,235,,236,236,,,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236',
'236,236,236,236,236,236,,236,236,236,,236,236,,236,236,,,,,,,,,,,,,',
',,,,,,,236,,,236,,,236,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236',
'236,236,,,,236,236,,,,,,,236,,,236,237,237,237,,237,236,236,,237,237',
',,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237',
',,237,,,,,,,237,,,237,237,237,237,237,237,237,,237,237,237,,237,237',
',237,237,,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,,237,,,,,,237,,,,,,,,237',
',,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,,,237,238,238,238,',
'238,237,237,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,,238',
'238,238,,238,238,,238,238,,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,,238,',
',,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238',
',,238,239,239,239,,239,238,238,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,,239,239,239,,239,239,,239,239,,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,',
'239,239,,,,,,,239,,,239,240,240,240,,240,239,239,,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,,240,240,240,,240,240,,240,240,,',
',,,,,,,,,,,,,,,,,,240,,,240,,,240,,240,,,,,,240,,,,,,,,240,,,,,240,240',
'240,240,240,240,,,,240,240,,,,,,,240,,,240,241,241,241,,241,240,240',
',241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,,241,241,241,',
'241,241,,241,241,,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,,241,,,,,,241,',
',,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,242',
'242,242,,242,241,241,,242,242,,,,242,,242,242,242,242,242,242,242,,',
',,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,,242,242,242,,242,242,,242,242,,,,,,,,,,,,,,,,,,,,,242,,,242',
',,242,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242',
',,,,,,242,,,242,243,243,243,,243,242,242,,243,243,,,,243,,243,243,243',
'243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243',
'243,243,243,243,243,243,,243,243,243,,243,243,,243,243,,,,,,,,,,,,,',
',,,,,,,243,,,243,,,243,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243',
'243,243,,,,243,243,,,,,,,243,,,243,244,244,244,,244,243,243,,244,244',
',,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244',
',,244,,,,,,,244,,,244,244,244,244,244,244,244,,244,244,244,,244,244',
',244,244,,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,245,245,245,',
'245,244,244,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,,245,',
',,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245',
',,245,255,255,255,,255,245,245,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,,255,255,255,,255,255,,255,255,,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,',
'255,255,,,,,,,255,,,255,257,257,257,,257,255,255,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,,',
',,,,,,,,,,,,,,,,,,257,,,257,,,257,,257,,,,,,257,,,,,,,,257,,,,,257,257',
'257,257,257,257,,,,257,257,,,,,,,257,,,257,263,263,263,,263,257,257',
',263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263',
'263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,,263,263,263,',
'263,263,,263,263,,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,264',
'264,264,,264,263,263,,264,264,,,,264,,264,264,264,264,264,264,264,,',
',,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264',
'264,264,,264,264,264,,264,264,,264,264,,,,,,,,,,,,,,,,,,,,,264,,,264',
',,264,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264',
',,,,,,264,,,264,271,271,271,,271,264,264,,271,271,,,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,271,271,271,,271,271,,271,271,,,,,,,,,,',
',,,,,,,,,,271,,,271,,,271,,271,,271,,271,,271,,,,,,,,271,,,,,271,271',
'271,271,271,271,,,,271,271,,,,,,,271,,,271,,271,,,,271,271,272,272,272',
',272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272,272',
'272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272,272',
'272,272,,272,272,,272,272,,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,,272,',
'272,,272,,272,,,,,,,,272,,,,,272,272,272,272,272,272,,,,272,272,,,,',
',,272,,,272,,272,,,,272,272,280,280,280,,280,,,,280,280,,,,280,,280',
'280,280,280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,',
',280,,,280,280,280,280,280,280,280,280,280,280,280,,280,280,,280,280',
',,,,,,,,,,,,,,,,,,,,280,,,280,,280,280,,280,,280,,280,,280,,,,,,,,280',
',,,,280,280,280,280,280,280,,,,280,280,,,,,,,280,,,280,,280,,,,280,280',
'284,284,284,284,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,',
',,,,284,284,284,284,284,284,284,,,284,,,,,,284,284,,284,284,284,284',
'284,284,284,284,,284,284,284,,284,284,,284,284,,,,,,,,,,,,,,,,,,,,,284',
',,284,,,284,,284,,284,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284',
',,,284,284,,,,,,,284,,,284,288,288,288,,288,284,284,,288,288,,,,288',
',288,288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288',
',,,,,,288,,,288,288,288,288,288,288,288,,288,288,288,,288,288,,623,',
'623,623,623,623,623,,,,,,,,,623,,,,,,,288,,,288,,,288,,288,,,,,,,,623',
'623,,,,,,623,623,623,623,288,288,288,288,288,288,,,,288,288,,,,288,',
',288,,,288,289,289,289,289,289,288,288,,289,289,,,,289,623,289,289,289',
'289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,289,289',
',289,289,289,289,289,289,289,289,,289,289,289,,289,289,,289,289,,,,',
',,,,,,,,,,,,,,,,289,,,289,,,289,,289,,289,,,,289,,,,,,,,289,,,,,289',
'289,289,289,289,289,,,,289,289,,,,,,,289,,,289,301,301,301,,301,289',
'289,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301',
'301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,,301,301,301',
',301,301,,676,,676,676,676,676,676,,,,,,,,,676,,,,,,,301,,,301,,,301',
',301,,,,,,,,676,,,,,,,676,676,676,676,301,301,301,301,301,301,,,,301',
'301,,,,,,,301,,,301,310,310,310,676,310,301,301,,310,310,,,,310,676',
'310,310,310,310,310,310,310,,,,,,310,310,310,310,310,310,310,,,310,',
',,,,,310,,,310,310,310,310,310,310,310,,310,310,310,,310,310,,310,310',
',,,,,,,,,,,,,,,,,,,,310,,,310,310,,310,,310,,,,,,310,,,,,,,,310,,,,',
'310,310,310,310,310,310,,,,310,310,,,,,,,310,,,310,312,312,312,312,312',
'310,310,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312',
'312,312,312,312,,,312,,,,,,312,312,,312,312,312,312,312,312,312,312',
',312,312,312,,312,312,,312,312,,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,',
'312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,,',
',,,,312,,,312,341,341,341,,341,312,312,,341,341,,,,341,,341,341,341',
'341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341',
'341,341,341,341,341,341,,341,341,341,,341,341,,782,,782,782,782,782',
'782,,,,,,,,,782,,,,,,,341,,,341,,,341,,341,,,,,,,,782,,,,,,,782,782',
'782,782,341,341,341,341,341,341,,,,341,341,,,,,,,341,,,341,360,360,360',
',360,341,341,,360,360,,,,360,782,360,360,360,360,360,360,360,,,,,,360',
'360,360,360,360,360,360,,,360,,,,,,,360,,,360,360,360,360,360,360,360',
',360,360,360,,360,360,,360,360,,,,,,,,,,,,,,,,,,,,,360,,,360,,,360,',
'360,,,,,,360,,,,,,,,360,,,,,360,360,360,360,360,360,,,,360,360,,,,,',
',360,,,360,361,361,361,,361,360,360,,361,361,,,,361,,361,361,361,361',
'361,361,361,,,,,,361,361,361,361,361,361,361,,,361,,,,,,,361,,,361,361',
'361,361,361,361,361,,361,361,361,,361,361,,361,361,,,,,,,,,,,,,,,,,',
',,,361,,,361,,,361,,361,,,,,,361,,,,,,,,361,,,,,361,361,361,361,361',
'361,,,,361,361,,,,,,,361,,,361,380,380,380,,380,361,361,,380,380,,,',
'380,,380,380,380,380,380,380,380,,,,,,380,380,380,380,380,380,380,,',
'380,,,,,,,380,,,380,380,380,380,380,380,380,,380,380,380,,380,380,,857',
',857,857,857,857,857,,,,,,,,,857,,,,,,,380,,,380,,,380,,380,,,,,,,,857',
',,,,,,857,857,857,857,380,380,380,380,380,380,,,,380,380,,,,,,,380,',
',380,392,392,392,,392,380,380,,392,392,,,,392,857,392,392,392,392,392',
'392,392,,,,,,392,392,392,392,392,392,392,,,392,,,,,,,392,,,392,392,392',
'392,392,392,392,,392,392,392,,392,392,,392,392,,,,,,,,,,,,,,,,,,,,,392',
',,392,,,392,,392,,,,,,392,,,,,,,,392,,,,,392,392,392,392,392,392,,,',
'392,392,,,,,,,392,,,392,431,431,431,,431,392,392,,431,431,,,,431,,431',
'431,431,431,431,431,431,,,,,,431,431,431,431,431,431,431,,,431,,,,,',
',431,,,431,431,431,431,431,431,431,,431,431,431,,431,431,,431,431,,',
',,,,,,,,,,,,,,,,,,431,,,431,,,431,,431,,,,,,431,,,,,,,,431,,,,,431,431',
'431,431,431,431,,,,431,431,,,,,,,431,,,431,447,447,447,,447,431,431',
',447,447,,,,447,,447,447,447,447,447,447,447,,,,,,447,447,447,447,447',
'447,447,,,447,,,,,,,447,,,447,447,447,447,447,447,447,447,447,447,447',
',447,447,,447,447,,,,,,,,,,,,,,,,,,,,,447,,,447,447,,447,,447,,447,',
'447,,447,,,,,,,,447,,,,,447,447,447,447,447,447,,,,447,447,,,,,,,447',
',,447,,447,,,,447,447,448,448,448,,448,,,,448,448,,,,448,,448,448,448',
'448,448,448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448',
'448,448,448,448,448,448,448,448,448,448,,448,448,,448,448,,,,,,,,,,',
',,,,,,,,,,448,,,448,448,,448,,448,,448,,448,,448,,,,,,,,448,,,,,448',
'448,448,448,448,448,,,,448,448,,,,,,,448,,,448,,448,,,,448,448,464,464',
'464,,464,,,,464,464,,,,464,,464,464,464,464,464,464,464,,,,,,464,464',
'464,464,464,464,464,,,464,,,,,,,464,,,464,464,464,464,464,464,464,464',
'464,464,464,,464,464,,464,464,,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,,464',
',464,,,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464,464,,,,,,',
'464,,,464,,464,,,,464,464,465,465,465,,465,,,,465,465,,,,465,,465,465',
'465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465,,,,,,,465',
',,465,465,465,465,465,465,465,465,465,465,465,,465,465,,465,465,,,,',
',,,,,,,,,,,,,,,,465,,,465,,,465,,465,,465,,,,465,,,,,,,,465,,,,,465',
'465,465,465,465,465,,,,465,465,,,,,,,465,,,465,,465,,,,465,465,467,467',
'467,,467,,,,467,467,,,,467,,467,467,467,467,467,467,467,,,,,,467,467',
'467,467,467,467,467,,,467,,,,,,,467,,,467,467,467,467,467,467,467,,467',
'467,467,,467,467,,467,467,,,,,,,,,,,,,,,,,,,,,467,,,467,,,467,,467,',
',,,,467,,,,,,,,467,,,,,467,467,467,467,467,467,,,,467,467,,,,,,,467',
',,467,468,468,468,,468,467,467,,468,468,,,,468,,468,468,468,468,468',
'468,468,,,,,,468,468,468,468,468,468,468,,,468,,,,,,,468,,,468,468,468',
'468,468,468,468,,468,468,468,,468,468,,468,468,,,,,,,,,,,,,,,,,,,,,468',
',,468,,,468,,468,,,,,,468,,,,,,,,468,,,,,468,468,468,468,468,468,,,',
'468,468,,,,,,,468,,,468,469,469,469,,469,468,468,,469,469,,,,469,,469',
'469,469,469,469,469,469,,,,,,469,469,469,469,469,469,469,,,469,,,,,',
',469,,,469,469,469,469,469,469,469,,469,469,469,,469,469,,469,469,,',
',,,,,,,,,,,,,,,,,,469,,,469,,,469,,469,,,,,,469,,,,,,,,469,,,,,469,469',
'469,469,469,469,,,,469,469,,,,,,,469,,,469,497,497,497,,497,469,469',
',497,497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497',
'497,497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,,497,497,497,',
'497,497,,497,497,,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,,497,,,,,,497,',
',,,,,,497,,,,,497,497,497,497,497,497,,,,497,497,,,,,,,497,,,497,500',
'500,500,,500,497,497,,500,500,,,,500,,500,500,500,500,500,500,500,,',
',,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500',
'500,500,500,500,500,500,,500,500,,500,500,,,,,,,,,,,,,,,,,,,,,500,,',
'500,,,500,,500,,500,,500,,500,,,,,,,,500,,,,,500,500,500,500,500,500',
',,,500,500,,,,,,,500,,,500,,500,,,,500,500,502,502,502,,502,,,,502,502',
',,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502',
',,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502,,502,502',
',502,502,,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,,502,,,,502,,502,,,,,,',
',502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,,502,,502,,,',
'502,502,504,504,504,,504,,,,504,504,,,,504,,504,504,504,504,504,504',
'504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504,504,504',
'504,504,504,,504,504,504,,504,504,,504,504,,,,,,,,,,,,,,,,,,,,,504,',
',504,,,504,,504,,,,,,504,,,,,,,,504,,,,,504,504,504,504,504,504,,,,504',
'504,,,,,,,504,,,504,521,521,521,,521,504,504,,521,521,,,,521,,521,521',
'521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521',
',,521,521,521,521,521,521,521,,521,521,521,,521,521,,521,521,,,,,,,',
',,,,,,,,,,,,,521,,,521,,521,521,,521,,,,521,,521,,,,,,,,521,,,,,521',
'521,521,521,521,521,,,,521,521,,,,,,,521,,,521,527,527,527,527,527,521',
'521,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527',
'527,527,527,,,527,,,,,,527,527,,527,527,527,527,527,527,527,527,,527',
'527,527,,527,527,,527,527,,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,,527,',
'527,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,,,,,,527',
'527,,,527,533,533,533,,533,527,527,,533,533,,,,533,,533,533,533,533',
'533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533,533',
'533,533,533,533,533,,533,533,533,,533,533,,892,,892,892,892,892,892',
',,,,,,,,892,,,,,,,533,,,533,,,533,,533,,,,,,,,892,,,,,,,892,892,892',
'892,533,533,533,533,533,533,,,,533,533,,,,,,,533,,,533,535,535,535,',
'535,533,533,,535,535,,,,535,892,535,535,535,535,535,535,535,,,,,,535',
'535,535,535,535,535,535,,,535,,,,,,,535,,,535,535,535,535,535,535,535',
'535,535,535,535,,535,535,,535,535,,,,,,,,,,,,,,,,,,,,,535,,,535,,,535',
',535,,535,,,,535,,,,,,,,535,,,,,535,535,535,535,535,535,,,,535,535,',
',,,,,535,,,535,,535,,,,535,535,538,538,538,,538,,,,538,538,,,,538,,538',
'538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,',
',538,,,538,538,538,538,538,538,538,538,538,538,538,,538,538,,538,538',
',,,,,,,,,,,,,,,,,,,,538,,,538,,,538,,538,,538,,,,538,,,,,,,,538,,,,',
'538,538,538,538,538,538,,,,538,538,,,,,,,538,,,538,,538,,,,538,538,544',
'544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544',
'544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544',
',544,544,544,,544,544,,962,,962,962,962,962,962,,,,,,,,,962,,,,,,,544',
',,544,,,544,,544,,,,,,,,962,962,,,,,,962,962,962,962,544,544,544,544',
'544,544,,,,544,544,,,,,,,544,,,544,547,547,547,,547,544,544,,547,547',
',,,547,962,547,547,547,547,547,547,547,,,,,,547,547,547,547,547,547',
'547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,,547,547,547,,547',
'547,,547,547,,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,,547,,,,,,547,,,,,',
',,547,,,,,547,547,547,547,547,547,,,,547,547,,,,,,,547,,,547,548,548',
'548,,548,547,547,,548,548,,,,548,,548,548,548,548,548,548,548,,,,,,548',
'548,548,548,548,548,548,,,548,,,,,,,548,,,548,548,548,548,548,548,548',
',548,548,548,,548,548,,548,548,,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,',
'548,,,,,,548,,,,,,,,548,,,,,548,548,548,548,548,548,,,,548,548,,,,,',
',548,,,548,549,549,549,,549,548,548,,549,549,,,,549,,549,549,549,549',
'549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549',
'549,549,549,549,549,,549,549,549,,549,549,,549,549,,,,,,,,,,,,,,,,,',
',,,549,,,549,,,549,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549,549',
'549,,,,549,549,,,,,,,549,,,549,553,553,553,,553,549,549,,553,553,,,',
'553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553,,',
'553,,,,,,,553,,,553,553,553,553,553,553,553,,553,553,553,,553,553,,553',
'553,,,,,,,,,,,,,,,,,,,,,553,,,553,,,553,,553,,,,,,553,,,,,,,,553,,,',
',553,553,553,553,553,553,,,,553,553,,,,,,,553,,,553,559,559,559,,559',
'553,553,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559,559',
'559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559,559,559,559,559',
'559,559,,559,559,,559,559,,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,,559,',
'559,,559,,559,,,,,,,,559,,,,,559,559,559,559,559,559,,,,559,559,,,,',
',,559,,,559,,559,,,,559,559,562,562,562,,562,,,,562,562,,,,562,,562',
'562,562,562,562,562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,',
',562,,,562,562,562,562,562,562,562,562,562,562,562,,562,562,,562,562',
',,,,,,,,,,,,,,,,,,,,562,,,562,,,562,,562,,,,,,562,,,,,,,,562,,,,,562',
'562,562,562,562,562,,,,562,562,,,,,,,562,,,562,,562,,,,562,562,567,567',
'567,567,567,,,,567,567,,,,567,,567,567,567,567,567,567,567,,,,,,567',
'567,567,567,567,567,567,,,567,,,,,,567,567,,567,567,567,567,567,567',
'567,567,,567,567,567,,567,567,,567,567,,,,,,,,,,,,,,,,,,,,,567,,,567',
',,567,,567,,567,,,,567,,,,,,,,567,,,,,567,567,567,567,567,567,,,,567',
'567,,,,,,,567,,,567,568,568,568,568,568,567,567,,568,568,,,,568,,568',
'568,568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,',
'568,568,,568,568,568,568,568,568,568,568,,568,568,568,,568,568,,568',
'568,,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,,568,,568,,,,568,,,,,,,,568',
',,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,,,568,574,574,574,',
'574,568,568,,574,574,,,,574,,574,574,574,574,574,574,574,,,,,,574,574',
'574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574,574,574,574,,574',
'574,574,,574,574,,995,,995,995,995,995,995,,,,,,,,,995,,,,,,,574,,,574',
',,574,,574,,,,,,,,995,,,,,,,995,995,995,995,574,574,574,574,574,574',
',,,574,574,,,,,,,574,,,574,595,595,595,595,595,574,574,,595,595,,,,595',
'995,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595',
',,,,,595,595,,595,595,595,595,595,595,595,595,,595,595,595,,595,595',
',595,595,,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,,595,,595,,,,595,,,,,,',
',595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,,,595,599,599',
'599,599,599,595,595,,599,599,,,,599,,599,599,599,599,599,599,599,,,',
',,599,599,599,599,599,599,599,,,599,,,,,,599,599,,599,599,599,599,599',
'599,599,599,,599,599,599,,599,599,,599,599,,,,,,,,,,,,,,,,,,,,,599,',
',599,,,599,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,',
',,599,599,,,,,,,599,,,599,604,604,604,604,604,599,599,,604,604,,,,604',
',604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604',
',,,,,604,604,,604,604,604,604,604,604,604,604,,604,604,604,,604,604',
',604,604,,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,,604,,604,,,,604,,,,,,',
',604,,,,,604,604,604,604,604,604,,,,604,604,,,,,,,604,,,604,606,606',
'606,,606,604,604,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606',
'606,606,606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606,606',
'606,606,606,606,,606,606,,606,606,,,,,,,,,,,,,,,,,,,,,606,,,606,,,606',
',606,,606,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,',
',,,,,606,,,606,,606,,,,606,606,609,609,609,,609,,,,609,609,,,,609,,609',
'609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609,,,,,',
',609,,,609,609,609,609,609,609,609,609,609,609,609,,609,609,,609,609',
',,,,,,,,,,,,,,,,,,,,609,,,609,,,609,,609,,609,,,,609,,,,,,,,609,,,,',
'609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,,609,,,,609,609,615',
'615,615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,,615',
'615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615,615,615,615',
'615,615,615,615,,615,615,,615,615,,,,,,,,,,,,,,,,,,,,,615,,,615,,,615',
',615,,615,,,,615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,',
',,,,,615,,,615,,615,,,,615,615,619,619,619,,619,,,,619,619,,,,619,,619',
'619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,',
',619,,,619,619,619,619,619,619,619,,619,619,619,,619,619,,619,619,,',
',,,,,,,,,,,,,,,,,,619,,,619,,,619,,619,,,,,,619,,,,,,,,619,,,,,619,619',
'619,619,619,619,,,,619,619,,,,,,,619,,,619,621,621,621,,621,619,619',
',621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621',
'621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,,621,621,621,',
'621,621,,621,621,,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,,621,,,,,,621,',
',,,,,,621,,,,,621,621,621,621,621,621,,,,621,621,,,,,,,621,,,621,649',
'649,649,,649,621,621,,649,649,,,,649,,649,649,649,649,649,649,649,,',
',,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649',
'649,649,,649,649,649,,649,649,,649,649,,,,,,,,,,,,,,,,,,,,,649,,,649',
',,649,,649,,649,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649',
'649,,,,,,,649,,,649,652,652,652,,652,649,649,,652,652,,,,652,,652,652',
'652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652',
',,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,,,,,,,',
',,,,,,,,,,,,,652,,,652,,,652,,652,,,,,,652,,,,,,,,652,,,,,652,652,652',
'652,652,652,,,,652,652,,,,,,,652,,,652,653,653,653,,653,652,652,,653',
'653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653',
'653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,,653,653,653,,653',
'653,,653,653,,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,,653,,,,,,653,,,,,',
',,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,658,658',
'658,,658,653,653,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658',
'658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658',
',658,658,658,,658,658,,658,658,,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,',
'658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,,,,,',
',658,,,658,661,661,661,,661,658,658,,661,661,,,,661,,661,661,661,661',
'661,661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,,661,,,661,661',
'661,661,661,661,661,,661,661,661,,661,661,,661,661,,,,,,,,,,,,,,,,,',
',,,661,,,661,,,661,,661,,,,,,661,,,,,,,,661,,,,,661,661,661,661,661',
'661,,,,661,661,,,,,,,661,,,661,664,664,664,,664,661,661,,664,664,,,',
'664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,',
'664,,,,,,,664,,,664,664,664,664,664,664,664,,664,664,664,,664,664,,664',
'664,,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,,664,,,,,,664,,,,,,,,664,,,',
',664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,665,665,665,,665',
'664,664,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665,665',
'665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,,665,665',
'665,,665,665,,665,665,,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,,665,,,,,',
'665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665',
'678,678,678,678,678,665,665,,678,678,,,,678,,678,678,678,678,678,678',
'678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,678,678,,678,678,678',
'678,678,678,678,678,,678,678,678,,678,678,,678,678,,,,,,,,,,,,,,,,,',
',,,678,,,678,,,678,,678,,678,,,,678,,,,,,,,678,,,,,678,678,678,678,678',
'678,,,,678,678,,,,,,,678,,,678,682,682,682,,682,678,678,,682,682,,,',
'682,,682,682,682,682,682,682,682,,,,,,682,682,682,682,682,682,682,,',
'682,,,,,,,682,,,682,682,682,682,682,682,682,,682,682,682,,682,682,,682',
'682,,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,,682,,,,,,682,,,,,,,,682,,,',
',682,682,682,682,682,682,,,,682,682,,,,,,,682,,,682,685,685,685,,685',
'682,682,,685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685',
'685,685,685,685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,,685,685',
'685,,685,685,,685,685,,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,,685,,,,,',
'685,,,,,,,,685,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685',
'692,692,692,692,692,685,685,,692,692,,,,692,,692,692,692,692,692,692',
'692,,,,,,692,692,692,692,692,692,692,,,692,,,,,,692,692,,692,692,692',
'692,692,692,692,692,,692,692,692,,692,692,,692,692,,,,,,,,,,,,,,,,,',
',,,692,,,692,,,692,,692,,692,,,,692,,,,,,,,692,,,,,692,692,692,692,692',
'692,,,,692,692,,,,,,,692,,,692,695,695,695,,695,692,692,,695,695,,,',
'695,,695,695,695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,',
'695,,,,,,,695,,,695,695,695,695,695,695,695,695,695,695,695,,695,695',
',695,695,,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,,695,,695,,695,,695,,,',
',,,,695,,,,,695,695,695,695,695,695,,,,695,695,,,,,,,695,,,695,,695',
',,,695,695,696,696,696,,696,,,,696,696,,,,696,,696,696,696,696,696,696',
'696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696,696,696,696',
'696,696,696,696,696,696,696,,696,696,,696,696,,,,,,,,,,,,,,,,,,,,,696',
',,696,,,696,,696,,,,696,,696,,,,,,,,696,,,,,696,696,696,696,696,696',
',,,696,696,,,,,,,696,,,696,,696,,,,696,696,702,702,702,702,702,,,,702',
'702,,,,702,,702,702,702,702,702,702,702,,,,,,702,702,702,702,702,702',
'702,,,702,,,,,,702,702,,702,702,702,702,702,702,702,702,,702,702,702',
',702,702,,702,702,,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,,702,,702,,,,702',
',,,,,,,702,,,,,702,702,702,702,702,702,,,,702,702,,,,,,,702,,,702,703',
'703,703,703,703,702,702,,703,703,,,,703,,703,703,703,703,703,703,703',
',,,,,703,703,703,703,703,703,703,,,703,,,,,,703,703,,703,703,703,703',
'703,703,703,703,,703,703,703,,703,703,,703,703,,,,,,,,,,,,,,,,,,,,,703',
',,703,,,703,,703,,703,,,,703,,,,,,,,703,,,,,703,703,703,703,703,703',
',,,703,703,,,,,,,703,,,703,707,707,707,,707,703,703,,707,707,,,,707',
',707,707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707',
',,,,,,707,,,707,707,707,707,707,707,707,,707,707,707,,707,707,,,,,,',
',,,,,,,,,,,,,,,,,707,,,707,,,707,,707,,,,,,,,,,,,,,,,,,,707,707,707',
'707,707,707,,,,707,707,,,,,,,707,,,707,720,720,720,,720,707,707,,720',
'720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720,720,720,720,720',
'720,,,720,,,,,,,720,,,720,720,720,720,720,720,720,,720,720,720,,720',
'720,,,,,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,,720,,,,,,,,,,,,,,,,,,,720',
'720,720,720,720,720,,,,720,720,,,,,,,720,,,720,726,726,726,,726,720',
'720,,726,726,,,,726,,726,726,726,726,726,726,726,,,,,,726,726,726,726',
'726,726,726,,,726,,,,,,,726,,,726,726,726,726,726,726,726,,726,726,726',
',726,726,,726,726,,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,,726,,726,,,,726',
',,,,,,,726,,,,,726,726,726,726,726,726,,,,726,726,,,,,,,726,,,726,764',
'764,764,,764,726,726,,764,764,,,,764,,764,764,764,764,764,764,764,,',
',,,764,764,764,764,764,764,764,,,764,,,,,,,764,,,764,764,764,764,764',
'764,764,,764,764,764,,764,764,,764,764,,,,,,,,,,,,,,,,,,,,,764,,,764',
',,764,,764,,764,,,,764,,,,,,,,764,,,,,764,764,764,764,764,764,,,,764',
'764,,,,,,,764,,,764,771,771,771,,771,764,764,,771,771,,,,771,,771,771',
'771,771,771,771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,,,771',
',,771,771,771,771,771,771,771,,771,771,771,,771,771,,771,771,,,,,,,',
',,,,,,,,,,,,,771,,,771,,,771,,771,,,,,,771,,,,,,,,771,,,,,771,771,771',
'771,771,771,,,,771,771,,,,,,,771,,,771,776,776,776,776,776,771,771,',
'776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776,776,776',
'776,776,,,776,,,,,,776,776,,776,776,776,776,776,776,776,776,,776,776',
'776,,776,776,,776,776,,,,,,,,,,,,,,,,,,,,,776,,,776,,,776,,776,,776',
',,,776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776,,,,,,,776,',
',776,780,780,780,780,780,776,776,,780,780,,,,780,,780,780,780,780,780',
'780,780,,,,,,780,780,780,780,780,780,780,,,780,,,,,,780,780,,780,780',
'780,780,780,780,780,780,,780,780,780,,780,780,,780,780,,,,,,,,,,,,,',
',,,,,,,780,,,780,,,780,,780,,780,,,,780,,,,,,,,780,,,,,780,780,780,780',
'780,780,,,,780,780,,,,,,,780,,,780,781,781,781,781,781,780,780,,781',
'781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781,781,781',
'781,,,781,,,,,,781,781,,781,781,781,781,781,781,781,781,,781,781,781',
',781,781,,781,781,,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,,781,,781,,,,781',
',,,,,,,781,,,,,781,781,781,781,781,781,,,,781,781,,,,,,,781,,,781,784',
'784,784,,784,781,781,,784,784,,,,784,,784,784,784,784,784,784,784,,',
',,,784,784,784,784,784,784,784,,,784,,,,,,,784,,,784,784,784,784,784',
'784,784,,784,784,784,,784,784,,784,784,,,,,,,,,,,,,,,,,,,,,784,,,784',
',,784,,784,,,,,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784,784',
',,,,,,784,,,784,798,798,798,798,798,784,784,,798,798,,,,798,,798,798',
'798,798,798,798,798,,,,,,798,798,798,798,798,798,798,,,798,,,,,,798',
'798,,798,798,798,798,798,798,798,798,,798,798,798,,798,798,,798,798',
',,,,,,,,,,,,,,,,,,,,798,,,798,,,798,,798,,798,,,,798,,,,,,,,798,,,,',
'798,798,798,798,798,798,,,,798,798,,,,,,,798,,,798,803,803,803,,803',
'798,798,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803',
'803,803,803,803,,,803,,,,,,,803,,,803,803,803,803,803,803,803,,803,803',
'803,,803,803,,803,803,,,,,,,,,,,,,,,,,,,,,803,,,803,,,803,,803,,,,,',
'803,,,,,,,,803,,,,,803,803,803,803,803,803,,,,803,803,,,,,,,803,,,803',
'804,804,804,,804,803,803,,804,804,,,,804,,804,804,804,804,804,804,804',
',,,,,804,804,804,804,804,804,804,,,804,,,,,,,804,,,804,804,804,804,804',
'804,804,,804,804,804,,804,804,,804,804,,,,,,,,,,,,,,,,,,,,,804,,,804',
',,804,,804,,,,,,804,,,,,,,,804,,,,,804,804,804,804,804,804,,,,804,804',
',,,,,,804,,,804,805,805,805,,805,804,804,,805,805,,,,805,,805,805,805',
'805,805,805,805,,,,,,805,805,805,805,805,805,805,,,805,,,,,,,805,,,805',
'805,805,805,805,805,805,,805,805,805,,805,805,,805,805,,,,,,,,,,,,,',
',,,,,,,805,,,805,,,805,,805,,,,,,805,,,,,,,,805,,,,,805,805,805,805',
'805,805,,,,805,805,,,,,,,805,,,805,817,817,817,,817,805,805,,817,817',
',,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817,817',
',,817,,,,,,,817,,,817,817,817,817,817,817,817,,817,817,817,,817,817',
',817,817,,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,,817,,,,,,817,,,,,,,,817',
',,,,817,817,817,817,817,817,,,,817,817,,,,,,,817,,,817,818,818,818,',
'818,817,817,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818',
'818,818,818,818,818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,,818',
'818,818,,818,818,,818,818,,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,,818,',
',,,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,,818,818,,,,,,,818',
',,818,819,819,819,,819,818,818,,819,819,,,,819,,819,819,819,819,819',
'819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,,,819,,,819,819,819',
'819,819,819,819,,819,819,819,,819,819,,819,819,,,,,,,,,,,,,,,,,,,,,819',
',,819,,,819,,819,,,,,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,,',
'819,819,,,,,,,819,,,819,833,833,833,,833,819,819,,833,833,,,,833,,833',
'833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,',
',833,,,833,833,833,833,833,833,833,,833,833,833,,833,833,,833,833,,',
',,,,,,,,,,,,,,,,,,833,,,833,,,833,,833,,833,,,,833,,,,,,,,833,,,,,833',
'833,833,833,833,833,,,,833,833,,,,,,,833,,,833,844,844,844,844,844,833',
'833,,844,844,,,,844,,844,844,844,844,844,844,844,,,,,,844,844,844,844',
'844,844,844,,,844,,,,,,844,844,,844,844,844,844,844,844,844,844,,844',
'844,844,,844,844,,844,844,,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,,844,',
'844,,,,844,,,,,,,,844,,,,,844,844,844,844,844,844,,,,844,844,,,,,,,844',
',,844,870,870,870,,870,844,844,,870,870,,,,870,,870,870,870,870,870',
'870,870,,,,,,870,870,870,870,870,870,870,,,870,,,,,,,870,,,870,870,870',
'870,870,870,870,,870,870,870,,870,870,,870,870,,,,,,,,,,,,,,,,,,,,,870',
',,870,,,870,,870,,,,,,870,,,,,,,,870,,,,,870,870,870,870,870,870,,,',
'870,870,,,,,,,870,,,870,872,872,872,872,872,870,870,,872,872,,,,872',
',872,872,872,872,872,872,872,,,,,,872,872,872,872,872,872,872,,,872',
',,,,,872,872,,872,872,872,872,872,872,872,872,,872,872,872,,872,872',
',872,872,,,,,,,,,,,,,,,,,,,,,872,,,872,,,872,,872,,872,,,,872,,,,,,',
',872,,,,,872,872,872,872,872,872,,,,872,872,,,,,,,872,,,872,873,873',
'873,873,873,872,872,,873,873,,,,873,,873,873,873,873,873,873,873,,,',
',,873,873,873,873,873,873,873,,,873,,,,,,873,873,,873,873,873,873,873',
'873,873,873,,873,873,873,,873,873,,873,873,,,,,,,,,,,,,,,,,,,,,873,',
',873,,,873,,873,,873,,,,873,,,,,,,,873,,,,,873,873,873,873,873,873,',
',,873,873,,,,,,,873,,,873,898,898,898,,898,873,873,,898,898,,,,898,',
'898,898,898,898,898,898,898,,,,,,898,898,898,898,898,898,898,,,898,',
',,,,,898,,,898,898,898,898,898,898,898,,898,898,898,,898,898,,898,898',
',,,,,,,,,,,,,,,,,,,,898,,,898,,,898,,898,,,,,,898,,,,,,,,898,,,,,898',
'898,898,898,898,898,,,,898,898,,,,,,,898,,,898,912,912,912,,912,898',
'898,,912,912,,,,912,,912,912,912,912,912,912,912,,,,,,912,912,912,912',
'912,912,912,,,912,,,,,,,912,,,912,912,912,912,912,912,912,,912,912,912',
',912,912,,912,912,,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,,912,,,,,,912',
',,,,,,,912,,,,,912,912,912,912,912,912,,,,912,912,,,,,,,912,,,912,913',
'913,913,,913,912,912,,913,913,,,,913,,913,913,913,913,913,913,913,,',
',,,913,913,913,913,913,913,913,,,913,,,,,,,913,,,913,913,913,913,913',
'913,913,,913,913,913,,913,913,,913,913,,,,,,,,,,,,,,,,,,,,,913,,,913',
',,913,,913,,,,,,913,,,,,,,,913,,,,,913,913,913,913,913,913,,,,913,913',
',,,,,,913,,,913,914,914,914,,914,913,913,,914,914,,,,914,,914,914,914',
'914,914,914,914,,,,,,914,914,914,914,914,914,914,,,914,,,,,,,914,,,914',
'914,914,914,914,914,914,,914,914,914,,914,914,,914,914,,,,,,,,,,,,,',
',,,,,,,914,,,914,,,914,,914,,,,,,914,,,,,,,,914,,,,,914,914,914,914',
'914,914,,,,914,914,,,,,,,914,,,914,920,920,920,,920,914,914,,920,920',
',,,920,,920,920,920,920,920,920,920,,,,,,920,920,920,920,920,920,920',
',,920,,,,,,,920,,,920,920,920,920,920,920,920,920,920,920,920,,920,920',
',920,920,,,,,,,,,,,,,,,,,,,,,920,,,920,,,920,,920,,,,920,,920,,,,,,',
',920,,,,,920,920,920,920,920,920,,,,920,920,,,,,,,920,,,920,,920,,,',
'920,920,925,925,925,925,925,,,,925,925,,,,925,,925,925,925,925,925,925',
'925,,,,,,925,925,925,925,925,925,925,,,925,,,,,,925,925,,925,925,925',
'925,925,925,925,925,,925,925,925,,925,925,,925,925,,,,,,,,,,,,,,,,,',
',,,925,,,925,,,925,,925,,925,,,,925,,,,,,,,925,,,,,925,925,925,925,925',
'925,,,,925,925,,,,,,,925,,,925,929,929,929,,929,925,925,,929,929,,,',
'929,,929,929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,',
'929,,,,,,,929,,,929,929,929,929,929,929,929,,929,929,929,,929,929,,',
',,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,,929,,,,,,,,,,,,,,,,,,,929,929',
'929,929,929,929,,,,929,929,,,,,,,929,,,929,944,944,944,,944,929,929',
',944,944,,,,944,,944,944,944,944,944,944,944,,,,,,944,944,944,944,944',
'944,944,,,944,,,,,,,944,,,944,944,944,944,944,944,944,,944,944,944,',
'944,944,,944,944,,,,,,,,,,,,,,,,,,,,,944,,,944,,,944,,944,,944,,,,944',
',,,,,,,944,,,,,944,944,944,944,944,944,,,,944,944,,,,,,,944,,,944,945',
'945,945,945,945,944,944,,945,945,,,,945,,945,945,945,945,945,945,945',
',,,,,945,945,945,945,945,945,945,,,945,,,,,,945,945,,945,945,945,945',
'945,945,945,945,,945,945,945,,945,945,,945,945,,,,,,,,,,,,,,,,,,,,,945',
',,945,,,945,,945,,945,,,,945,,,,,,,,945,,,,,945,945,945,945,945,945',
',,,945,945,,,,,,,945,,,945,948,948,948,948,948,945,945,,948,948,,,,948',
',948,948,948,948,948,948,948,,,,,,948,948,948,948,948,948,948,,,948',
',,,,,948,948,,948,948,948,948,948,948,948,948,,948,948,948,,948,948',
',948,948,,,,,,,,,,,,,,,,,,,,,948,,,948,,,948,,948,,948,,,,948,,,,,,',
',948,,,,,948,948,948,948,948,948,,,,948,948,,,,,,,948,,,948,971,971',
'971,,971,948,948,,971,971,,,,971,,971,971,971,971,971,971,971,,,,,,971',
'971,971,971,971,971,971,,,971,,,,,,,971,,,971,971,971,971,971,971,971',
',971,971,971,,971,971,,971,971,,,,,,,,,,,,,,,,,,,,,971,,,971,,,971,',
'971,,971,,971,,971,,,,,,,,971,,,,,971,971,971,971,971,971,,,,971,971',
',,,,,,971,,,971,973,973,973,973,973,971,971,,973,973,,,,973,,973,973',
'973,973,973,973,973,,,,,,973,973,973,973,973,973,973,,,973,,,,,,973',
'973,,973,973,973,973,973,973,973,973,,973,973,973,,973,973,,973,973',
',,,,,,,,,,,,,,,,,,,,973,,,973,,,973,,973,,973,,,,973,,,,,,,,973,,,,',
'973,973,973,973,973,973,,,,973,973,,,,,,,973,,,973,986,986,986,986,986',
'973,973,,986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986,986,986',
'986,986,986,986,,,986,,,,,,986,986,,986,986,986,986,986,986,986,986',
',986,986,986,,986,986,,986,986,,,,,,,,,,,,,,,,,,,,,986,,,986,,,986,',
'986,,986,,,,986,,,,,,,,986,,,,,986,986,986,986,986,986,,,,986,986,,',
',,,,986,,,986,991,991,991,991,991,986,986,,991,991,,,,991,,991,991,991',
'991,991,991,991,,,,,,991,991,991,991,991,991,991,,,991,,,,,,991,991',
',991,991,991,991,991,991,991,991,,991,991,991,,991,991,,991,991,,,,',
',,,,,,,,,,,,,,,,991,,,991,,,991,,991,,991,,,,991,,,,,,,,991,,,,,991',
'991,991,991,991,991,,,,991,991,,,,,,,991,,,991,1003,1003,1003,1003,1003',
'991,991,,1003,1003,,,,1003,,1003,1003,1003,1003,1003,1003,1003,,,,,',
'1003,1003,1003,1003,1003,1003,1003,,,1003,,,,,,1003,1003,,1003,1003',
'1003,1003,1003,1003,1003,1003,,1003,1003,1003,,1003,1003,,1003,1003',
',,,,,,,,,,,,,,,,,,,,1003,,,1003,,,1003,,1003,,1003,,,,1003,,,,,,,,1003',
',,,,1003,1003,1003,1003,1003,1003,,,,1003,1003,,,,,,,1003,,,1003,1007',
'1007,1007,,1007,1003,1003,,1007,1007,,,,1007,,1007,1007,1007,1007,1007',
'1007,1007,,,,,,1007,1007,1007,1007,1007,1007,1007,,,1007,,,,,,,1007',
',,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,,1007,1007',
',1007,1007,,,,,,,,,,,,,,,,,,,,,1007,,,1007,,,1007,,1007,,1007,,,,1007',
',,,,,,,1007,,,,443,1007,1007,1007,1007,1007,1007,443,443,443,1007,1007',
',443,443,,443,,1007,,,1007,,1007,,443,,1007,1007,,,,,,,,443,443,,443',
'443,443,443,443,,,,,,,,,,,,,,,,,,,,,,443,443,443,443,443,443,443,443',
'443,443,443,443,443,443,443,,,443,443,443,,443,,,,443,,,,,,443,,443',
',443,443,443,443,443,443,443,,443,443,443,,,,,,,,,,,,,443,443,,443,',
'443,,445,443,,443,,,443,445,445,445,,,,445,445,,445,,,,,,,,,,,,,,,,',
',,,445,445,,445,445,445,445,445,,,,,,,,,,,,,,,,,,,,,,445,445,445,445',
'445,445,445,445,445,445,445,445,445,445,445,,,445,445,445,,445,,,,445',
',,,,,445,,445,,445,445,445,445,445,445,445,,445,,445,,,,,,,,,,,,,445',
'445,,445,,445,,668,445,,445,,,445,668,668,668,,,668,668,668,,668,,,',
',,,,,668,668,668,,,,,,,,,668,668,,668,668,668,668,668,,,,,,,,,,,,,,',
',,,,,,,668,668,668,668,668,668,668,668,668,668,668,668,668,668,668,',
',668,668,668,,668,668,,,668,,668,,668,,668,,668,,668,668,668,668,668',
'668,668,,668,668,668,,,,,,,,,,,,,668,668,668,668,,668,,669,668,,668',
',,668,669,669,669,,,669,669,669,,669,,,,,,,,,,669,669,,,,,,,,,669,669',
',669,669,669,669,669,,,,,,,,,,,,,,,,,,,,,,669,669,669,669,669,669,669',
'669,669,669,669,669,669,669,669,,,669,669,669,,669,669,,,669,,669,,669',
',669,,669,,669,669,669,669,669,669,669,,669,,669,,,,,,,,,,,,,669,669',
'669,669,,669,,28,669,,669,,,669,28,28,28,,,28,28,28,,28,,,,,,,,,28,28',
'28,,,,,,,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,28,,28,,28,,28',
',28,28,28,28,28,28,28,,28,28,28,,,,,,,,,,,,,28,28,28,28,29,28,,,28,',
'28,29,29,29,,,29,29,29,,29,,,,,,,,,,29,29,,,,,,,,,29,29,,29,29,29,29',
'29,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
',,29,29,29,,,29,,29,29,,29,,29,,29,,29,,29,29,29,29,29,29,29,,29,,29',
',,,,,,,,,,,,29,29,29,29,51,29,,,29,,29,51,51,51,,,51,51,51,,51,,,,,',
',,,,51,51,51,,,,,,,,51,51,,51,51,51,51,51,,,,,,,,,,,,,,,,,,,,,,51,51',
'51,51,51,51,51,51,51,51,51,51,51,51,51,,,51,51,51,,,51,,,51,,51,,51',
',51,,51,,51,51,51,51,51,51,51,,51,,51,,,,,,,,,,,,,51,51,51,51,439,51',
',51,51,,51,439,439,439,,,439,439,439,,439,,,,,,,,,439,439,439,,,,,,',
',,439,439,,439,439,439,439,439,,,,,,,,,,,,,,,,,,,,,,439,439,439,439',
'439,439,439,439,439,439,439,439,439,439,439,,,439,439,439,,,439,,439',
'439,,439,,439,,439,,439,,439,439,439,439,439,439,439,,439,439,439,,',
',,,,,,,,,,439,439,439,439,449,439,,,439,,439,449,449,449,,,449,449,449',
',449,,,,,,,,,449,449,449,,,,,,,,,449,449,,449,449,449,449,449,,,,,,',
',,,,,,,,,,,,,,,449,449,449,449,449,449,449,449,449,449,449,449,449,449',
'449,,,449,449,449,,,449,,449,449,,449,,449,,449,,449,,449,449,449,449',
'449,449,449,,449,449,449,,,,,,,,,,,,,449,449,449,449,509,449,,,449,',
'449,509,509,509,,,509,509,509,,509,,,,,,,,,,509,,,,,,,,,,509,509,,509',
'509,509,509,509,,,,,,,,,,,,510,,,,,,,510,510,510,,,510,510,510,,510',
',,,,509,509,,,,510,,,509,,,,,509,509,510,510,,510,510,510,510,510,,',
',,,,,,,,,509,,,,,,,,,,,,,509,,509,,,509,,,510,510,,511,,,,,510,,511',
'511,511,510,510,511,511,511,,511,,,,,,,,,,511,,,,,510,,,,,511,511,,511',
'511,511,511,511,510,,510,,,510,202,202,,,202,,,,,,,,,202,202,202,202',
'202,202,202,202,202,,,202,202,511,511,,,202,202,202,202,511,,,,,511',
'511,,,,,202,202,,202,202,202,202,202,202,202,202,202,202,202,,511,202',
',,,,,,,,,,,511,,511,,,511,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,,,,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,,,,',
'7,7,7,7,7,7,7,7,7,,,7,7,,,,,7,7,7,7,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7',
'7,7,7,,,7,7,,,,,,,,,,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,8,,,,,,,,,8,8,8',
'8,8,8,8,8,8,,,8,8,,,,,8,8,8,8,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8',
',,8,8,,,,,,,,,,8,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,,,,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
',,422,,,,,,,,,422,422,422,422,422,422,422,422,422,,,422,422,,,,,422',
'422,422,422,,,,,,,,,,,,422,422,,422,422,422,422,422,422,422,422,422',
'422,422,,,422,422,,,,,,,,,,422,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,426,,,,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,,,426,,,,,,,,,426,426,426,426,426,426,426,426,426,,,426',
'426,,,,,426,426,426,426,,,,,,,,,,,,426,426,,426,426,426,426,426,426',
'426,426,426,426,426,,,426,426,,,,,,,,,,426,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,,,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,66,,,,,,,66',
'66,66,66,66,66,66,66,66,,,66,66,,,,,66,66,66,66,,,,,,66,,,,,,66,66,',
'66,66,66,66,66,66,66,66,66,66,66,,,66,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,,,,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,80,,,,,,,80,80',
'80,80,80,80,80,80,80,,,80,80,,,,,80,80,80,80,,,,,,,,,,,,80,80,,80,80',
'80,80,80,80,80,80,80,80,80,,,80,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,,,,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,,193,,,,,,,193,193,193,193,193,193,193,193',
'193,,,193,193,,,,,193,193,193,193,,,,,,,,,,,,193,193,,193,193,193,193',
'193,193,193,193,193,193,193,,,193,795,795,795,795,795,795,795,795,795',
'795,795,795,795,795,795,795,795,795,795,795,795,795,795,795,,,,795,795',
'795,795,795,795,795,795,795,795,795,795,795,795,795,795,795,795,795',
'795,795,795,795,,,795,,,,,,,,,795,795,795,795,795,795,795,795,795,,',
'795,795,,,,,795,795,795,795,,,,,,,,,,,,795,795,,795,795,795,795,795',
'795,795,795,795,795,795,201,201,795,,201,,,,,,,,,201,201,201,201,201',
'201,201,201,201,,,201,201,,,,,201,201,201,201,,,,,,201,,,,,,201,201',
',201,201,201,201,201,201,201,201,201,201,201,203,203,201,,203,,,,,,',
',,203,203,203,203,203,203,203,203,203,,,203,203,,,,,203,203,203,203',
',,,,,,,,,,,203,203,,203,203,203,203,203,203,203,203,203,203,203,267',
'267,203,,267,,,,,,,,,267,267,267,267,267,267,267,267,267,,,267,267,',
',,,267,267,267,267,,,,,,,,,,,,267,267,,267,267,267,267,267,267,267,267',
'267,267,267,268,268,267,,268,,,,,,,,,268,268,268,268,268,268,268,268',
'268,,,268,268,,,,,268,268,268,268,,,,,,,,,,,,268,268,,268,268,268,268',
'268,268,268,268,268,268,268,269,269,268,,269,,,,,,,,,269,269,269,269',
'269,269,269,269,269,,,269,269,,,,,269,269,269,269,,,,,,,,,,,,269,269',
',269,269,269,269,269,269,269,269,269,269,269,462,462,269,,462,,,,,,',
',,462,462,462,462,462,462,462,462,462,,,462,462,,,,,462,462,462,462',
',,,,,462,,,,,,462,462,,462,462,462,462,462,462,462,462,462,462,462,463',
'463,462,,463,,,,,,,,,463,463,463,463,463,463,463,463,463,,,463,463,',
',,,463,463,463,463,,,,,,,,,,,,463,463,,463,463,463,463,463,463,463,463',
'463,463,463,536,536,463,,536,,,,,,,,,536,536,536,536,536,536,536,536',
'536,,,536,536,,,,,536,536,536,536,,,,,,536,,,,,,536,536,,536,536,536',
'536,536,536,536,536,536,536,536,537,537,536,,537,,,,,,,,,537,537,537',
'537,537,537,537,537,537,,,537,537,,,,,537,537,537,537,,,,,,,,,,,,537',
'537,,537,537,537,537,537,537,537,537,537,537,537,539,539,537,,539,,',
',,,,,,539,539,539,539,539,539,539,539,539,,,539,539,,,,,539,539,539',
'539,,,,,,,,,,,,539,539,,539,539,539,539,539,539,539,539,539,539,539',
'550,550,539,,550,,,,,,,,,550,550,550,550,550,550,550,550,550,,,550,550',
',,,,550,550,550,550,,,,,,550,,,,,,550,550,,550,550,550,550,550,550,550',
'550,550,550,550,551,551,550,,551,,,,,,,,,551,551,551,551,551,551,551',
'551,551,,,551,551,,,,,551,551,551,551,,,,,,,,,,,,551,551,,551,551,551',
'551,551,551,551,551,551,551,551,607,607,551,,607,,,,,,,,,607,607,607',
'607,607,607,607,607,607,,,607,607,,,,,607,607,607,607,,,,,,607,,,,,',
'607,607,,607,607,607,607,607,607,607,607,607,607,607,608,608,607,,608',
',,,,,,,,608,608,608,608,608,608,608,608,608,,,608,608,,,,,608,608,608',
'608,,,,,,,,,,,,608,608,,608,608,608,608,608,608,608,608,608,608,608',
'614,614,608,,614,,,,,,,,,614,614,614,614,614,614,614,614,614,,,614,614',
',,,,614,614,614,614,,,,,,,,,,,,614,614,,614,614,614,614,614,614,614',
'614,614,614,614,616,616,614,,616,,,,,,,,,616,616,616,616,616,616,616',
'616,616,,,616,616,,,,,616,616,616,616,,,,,,616,,,,,,616,616,,616,616',
'616,616,616,616,616,616,616,616,616,746,746,616,,746,,,,,,,,,746,746',
'746,746,746,746,746,746,746,,,746,746,,,,,746,746,746,746,,,,,,,,,,',
',746,746,,746,746,746,746,746,746,746,746,746,746,746,1008,1008,746',
',1008,,,,,,,,,1008,1008,1008,1008,1008,1008,1008,1008,1008,,,1008,1008',
',,,,1008,1008,1008,1008,,,,,,1008,,,,,,1008,1008,,1008,1008,1008,1008',
'1008,1008,1008,1008,1008,1008,1008,1009,1009,1008,,1009,,,,,,,,,1009',
'1009,1009,1009,1009,1009,1009,1009,1009,,,1009,1009,,,,,1009,1009,1009',
'1009,,,,,,,,,,,,1009,1009,,1009,1009,1009,1009,1009,1009,1009,1009,1009',
'1009,1009,,,1009' ]
        racc_action_check = arr = ::Array.new(26038, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    25,   nil,   -46,   nil,   790,   -71, 23991, 24112,   -15,
   nil,   -30,    31,   580,   244,     2,   310,   nil,   129,   260,
  2653,   171,   nil,   391,   529,   667,   380,   -14, 23095, 23222,
   nil,   805,   936,  1067,   nil,    76,   351,   161,   578,  1198,
  1329,  1460,   104,   667,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 23349,   nil,  1591,  1722,  1860,   -19,   949,  1998,  2129,
   nil,   nil,  2260,  2391,  2522,   nil, 24475,   nil,   nil,   nil,
   nil,   nil,   194,   nil,   nil,   nil,   nil,   nil,   110,   132,
 24585,   nil,   nil,   nil,   631,  2653,   nil,   nil,  2791,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   379,   nil,
  2929,   nil,   nil,   nil,  3060,  3191,  3322,  3453,  3584,  3715,
   nil,   518,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24695,   257,   nil,  3846,  3977,  4108,  4239,
  4377, 24864, 23864, 24923,  4515,  4646,  4777,  4908,   nil,   831,
   -76,   337,   -63,   271,   342,  5039,  5170,   nil,   nil,  5301,
   349,  5432,  5563,  5694,  5825,  5956,  6087,  6218,  6349,  6480,
  6611,  6742,  6873,  7004,  7135,  7266,  7397,  7528,  7659,  7790,
  7921,  8052,  8183,  8314,  8445,  8576,   nil,   nil,   nil,   nil,
  2791,   nil,   327,   336,   nil,  8707,   387,  8838,   nil,   nil,
   nil,   nil,   nil,  8969,  9100,   nil,   nil, 24982, 25041, 25100,
   389,  9231,  9369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  9507,   146,   970,   395,  9645,   409,   411,   388,  9776,  9907,
    17,   899,   474,    39,   452,   420,   -11,   nil,   468,   716,
   445, 10038,   nil,   430,   541,   554,   931,   nil,   575,   nil,
 10169,   nil, 10300,    31,   nil,   537,   -89,   -47,   570,   556,
   292,   592,   nil,   nil,   -21,  1080,   nil,   nil,   nil,   567,
   559,   580,   583,   nil,   588,   600,   nil,   nil,   nil,   679,
   nil, 10431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   821,
   nil,   nil,   nil,   698,   nil,   nil,   703,   749,    -7,     0,
 10562, 10693,   374,   350,   628,    -2,  1030,   724,     0,   763,
   nil,   nil,   391,   743,   nil,  1064,   nil,    68,   nil,   nil,
 10824,   148,   381,   450,   532,   575,   588,   597,   599,   nil,
   677,   nil, 10955,   nil,   285,   nil,   391,   nil,   419,   684,
   435,   nil,   692,   -33,   nil,   529,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   711, 24233,   nil,   nil,   nil, 24354,   731,   nil,   721,
   nil, 11086,   725,   nil,  3191,   768,   772,   487,   568, 23476,
   nil,   nil,   nil, 22575,   778, 22705,   nil, 11217, 11355, 23603,
   nil,   nil,   nil,  3322,   nil,   734,   nil,   nil,   529,   nil,
   nil,   nil, 25159, 25218, 11493, 11631,   -51, 11769, 11900, 12031,
    44,   nil,  4777,  4908,   260,   694,   807,   819,   823,   827,
  2516,  2929,  1461,  5039,  1591,  1998,  2129,  2260,  5170,  5301,
  5432,  5563,  5694,   370,   829,  5825,  5956, 12162,   -34,   nil,
 12293,   nil, 12431,   nil, 12569,   nil,   167,   nil,   nil, 23730,
 23785, 23864,    -7,   nil,   772,   nil,   nil,   771,   773,   nil,
   nil, 12700,   166,   167,   813,   nil,   nil, 12831,   815,   780,
   nil,   nil,   784, 12962,   821, 13093, 25277, 25336, 13231, 25395,
   170,   824,   nil,   nil, 13369,   802,   nil, 13500, 13631, 13762,
 25454, 25513,  3453, 13893,   926,   926,   846,   nil,   nil, 14024,
   nil,   nil, 14162,   nil,   nil,   nil,   nil, 14300, 14431,   851,
   nil,  2404,   nil,   nil, 14562,   362,   nil,   nil,   695,  2535,
   nil,   826,   nil,   nil,  1161,   891,   nil,   858,   nil,   966,
   nil,   823,   439,   nil,   nil, 14693,   938,   nil,   nil, 14824,
   203,   204,   936,   952, 14955,   nil, 15086, 25572, 25631, 15224,
    16,   nil,  1224,   nil, 25690, 15362, 25749,   nil,   nil, 15500,
   487, 15631,   nil,  9789,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   nil,
   nil,   nil,   836,   nil,   nil,   nil,   nil,   nil,   846, 15762,
   621,    98, 15893, 16024,   879,   nil,   nil,   nil, 16155,   883,
   nil, 16286,   884,   nil, 16417, 16548,   202,   251, 22835, 22965,
   887,   888,   667,   nil,  1860,   nil, 10051,   nil, 16679,   856,
   nil,   904, 16810,   nil,   nil, 16941,   nil,   nil,   nil,   nil,
   nil,   nil, 17072,   nil,   905, 17203, 17341,  1722,   872,   nil,
   nil,   910, 17479, 17610,   nil,  1000,   -25, 17741,   880,   nil,
   925,   207,   229,   934,   252,   260,   936,   934,   939,   907,
 17872,  3584,   969,   970,    66,  1022, 18003,   nil,   nil,   419,
   nil,   945,  1047,   nil,   nil,   nil,   933,   934,  1292,   937,
   nil,   nil,   940,   941,   nil,   946, 25808,   nil,   nil,   986,
  1097,   953,  1214,   789,   nil,  1066,   nil,   nil,   nil,   nil,
   nil,  1072,   nil,  1082, 18134,  1000,    29,    40,    80,   121,
  1001, 18265,  1722,   nil,  1005,  1003, 18396,   552,   nil,   212,
 18527, 18658, 10444,   580, 18789,   nil,   977,   978,   nil,   982,
   983,   984,   nil,   975,   nil, 24805,  1023,   761, 18920,   nil,
   nil,   nil,   996, 19051, 19182, 19313,   nil,  3715,   nil,  3846,
   nil,   nil,  3977,   nil,  4108,   nil,  4239, 19444, 19575, 19706,
   283,   298,   nil,   998,  1023,  1008,  1128,   nil,   nil,   nil,
  1028,   nil,  1013, 19837,   nil,  1032,  1134,  1018,   232,   nil,
   nil,   nil,  1138,   nil, 19968,  1028,  1069,   nil,   nil,   nil,
   nil,   nil,  1219,   nil,  1350,   nil,   nil, 10837,   nil,  1481,
   nil,   nil,  1068,   nil,   nil,   465,  1345,  1033,  1153,   nil,
 20099,  1155, 20230, 20361,   nil,   nil,    45,    50,  1355,   229,
   nil,  1156,   nil,   nil,  1157,  1158,  1046,   nil,   nil,   471,
   nil,   nil, 12975,   nil,   335,   nil,  1612,   nil, 20492,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1061,  1046,   nil,  4377,
   nil,  4515, 20623, 20754, 20885,   792,   nil,  1067,   nil,   nil,
 21016,  1048,   nil,   nil,   nil, 21154,   nil,   nil,    72, 21285,
   nil,  1060,  1061,  1064,  1065,  1068,  1581,  1072,  1607,   nil,
    76,   nil,  1194,  1198, 21416, 21547,   nil,   nil, 21678,   nil,
   nil,  1120,   nil,  1085,   nil,  1086,  1096,  1097,  1088,   nil,
  1099,   nil, 13382,   nil,  4646,   495,   nil,   nil,   nil,   nil,
   nil, 21809,   nil, 21940,    80,  1423,  1172,    84,   nil,   nil,
  2019,   nil,   nil,   nil,  1988,  1108, 22071,   nil,   nil,   nil,
   447, 22202,  1226,   nil,   nil, 14575,   nil,  2150,   nil,  2281,
   nil,  2950,   nil, 22333,   nil,   833,  1232, 22464, 25867, 25926,
    88,  1114,  1115,   888,   nil,   nil,   nil,  1233,   nil,  1118,
  1127,  1131,  1134,  1254,   nil,   nil,  1173,    96,   110,   176,
   211,   nil,   nil,   nil,  3081,   nil,   nil,   nil,   nil,   nil,
   129,  1150,   nil ]

racc_action_default = [
    -3,  -591,    -1,  -579,    -4,    -6,  -591,  -591,  -591,  -591,
   -25,  -591,  -591,  -591,  -283,  -591,   -37,   -40,  -591,  -591,
   -45,   -47,   -48,  -295,  -333,  -334,   -52,  -261,  -261,  -261,
   -67,   -10,   -71,   -79,   -81,  -591,  -478,  -591,  -591,  -591,
  -591,  -591,  -581,  -237,  -276,  -277,  -278,  -279,  -280,  -281,
  -282,  -569,  -285,  -591,  -590,  -559,  -303,  -590,  -591,  -591,
  -308,  -311,  -579,  -591,  -591,  -325,  -591,  -335,  -336,  -421,
  -422,  -423,  -424,  -425,  -590,  -428,  -590,  -590,  -590,  -590,
  -590,  -455,  -461,  -462,  -591,  -467,  -468,  -469,  -470,  -471,
  -472,  -473,  -474,  -475,  -476,  -477,  -480,  -481,  -591,    -2,
  -580,  -586,  -587,  -588,  -591,  -591,  -591,  -591,  -591,    -3,
   -13,  -591,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -117,
  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -591,   -18,  -115,   -10,  -591,  -591,  -590,
  -590,  -591,  -591,  -591,  -591,  -591,  -591,  -591,   -43,  -591,
  -478,  -591,  -283,  -591,  -591,   -10,  -591,   -44,  -227,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -234,  -390,  -392,   -49,
  -238,  -254,  -268,  -268,  -258,  -591,  -269,  -591,  -295,  -333,
  -334,  -590,  -561,  -591,  -591,   -50,   -51,  -591,  -591,  -591,
   -57,  -590,  -591,  -302,  -396,  -404,  -406,   -65,  -402,   -66,
  -591,  -579,   -11,   -67,   -10,  -591,  -591,   -72,   -75,   -10,
  -478,  -591,  -591,  -283,  -298,  -581,  -591,  -337,  -403,  -591,
   -77,  -591,   -83,  -290,  -463,  -464,  -591,  -212,  -213,  -228,
  -591,  -582,   -10,  -581,  -239,  -581,  -583,  -583,  -591,  -591,
  -583,  -591,  -304,  -305,  -591,  -591,  -354,  -355,  -362,  -590,
  -521,  -556,  -556,  -372,  -590,  -590,  -389,  -487,  -488,  -490,
  -491,  -495,  -496,  -520,  -522,  -523,  -524,  -525,  -526,  -591,
  -543,  -548,  -549,  -551,  -552,  -553,  -591,   -46,  -591,  -591,
  -591,  -591,  -579,  -591,  -580,  -478,  -591,  -591,  -283,  -591,
  -528,  -529,  -104,  -591,  -106,  -591,  -283,  -591,  -322,  -478,
  -591,  -108,  -109,  -146,  -147,  -163,  -168,  -175,  -178,  -328,
  -591,  -557,  -591,  -426,  -591,  -441,  -591,  -443,  -591,  -591,
  -591,  -433,  -591,  -591,  -439,  -591,  -454,  -456,  -457,  -458,
  -459,  -465,  -466,  1043,    -5,  -589,   -19,   -20,   -21,   -22,
   -23,  -591,  -591,   -15,   -16,   -17,  -591,  -591,   -26,   -35,
   -36,  -591,  -591,   -27,  -193,  -591,  -591,  -570,  -571,  -261,
  -399,  -572,  -573,  -570,  -261,  -571,  -401,  -575,  -576,  -261,
  -570,  -571,   -33,  -201,   -34,  -591,   -38,   -39,  -191,  -269,
   -41,   -42,  -591,  -591,  -590,  -590,  -290,  -591,  -591,  -591,
  -591,  -301,  -202,  -203,  -204,  -205,  -206,  -207,  -208,  -209,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -229,  -230,  -231,  -232,  -591,  -590,  -255,
  -591,  -256,  -591,  -266,  -591,  -270,  -591,  -564,  -566,  -261,
  -261,  -261,  -590,   -58,  -581,  -249,  -250,  -268,  -268,  -262,
  -263,  -591,  -590,  -590,  -591,  -297,    -9,  -580,  -591,   -68,
  -288,   -84,   -73,  -591,  -591,  -590,  -591,  -591,  -590,  -591,
  -290,  -591,  -463,  -464,  -591,   -80,   -85,  -591,  -591,  -591,
  -591,  -591,  -233,  -591,  -413,  -591,  -591,  -240,  -241,  -585,
  -584,  -243,  -585,  -293,  -294,  -560,  -351,   -10,   -10,  -591,
  -353,  -591,  -374,  -385,  -591,  -591,  -370,  -371,  -591,  -380,
  -382,  -591,  -387,  -489,  -494,  -591,  -521,  -591,  -530,  -591,
  -532,  -534,  -541,  -550,  -554,   -10,  -338,  -339,  -340,   -10,
  -591,  -591,  -591,  -591,   -10,  -408,  -590,  -591,  -591,  -590,
  -290,  -317,  -104,  -105,  -591,  -590,  -591,  -320,  -482,  -591,
  -591,  -591,  -326,  -519,  -330,  -577,  -578,  -581,  -427,  -442,
  -445,  -446,  -448,  -429,  -444,  -430,  -431,  -432,  -591,  -435,
  -437,  -438,  -591,  -460,    -7,   -14,  -116,   -24,  -275,  -591,
  -291,  -292,  -591,  -591,   -61,  -247,  -248,  -397,  -591,   -63,
  -400,  -591,   -59,  -398,  -591,  -591,  -570,  -571,  -570,  -571,
  -591,  -591,  -191,  -300,  -591,  -365,  -581,  -367,   -10,  -268,
  -267,  -271,  -591,  -562,  -563,  -591,   -53,  -393,   -54,  -394,
   -55,  -395,   -10,  -245,  -591,  -251,  -253,   -45,  -591,  -260,
  -264,  -591,   -10,   -10,  -296,   -12,   -68,  -591,   -76,   -82,
  -591,  -570,  -571,  -590,  -574,  -289,  -591,  -591,  -590,   -78,
  -591,  -200,  -210,  -211,  -591,  -590,  -590,  -286,  -287,  -583,
  -244,  -591,  -591,  -352,  -363,  -373,  -590,  -590,  -364,  -556,
  -497,  -555,  -590,  -590,  -544,  -590,  -591,  -290,  -527,  -591,
  -591,  -539,  -591,  -590,  -341,  -590,  -309,  -342,  -343,  -344,
  -312,  -591,  -315,  -591,  -591,  -591,  -570,  -571,  -574,  -289,
  -591,  -591,  -104,  -107,  -574,  -591,   -10,  -591,  -484,  -591,
   -10,   -10,  -519,  -591,  -493,  -498,  -556,  -556,  -503,  -505,
  -505,  -505,  -518,  -521,  -546,  -591,  -591,  -591,   -10,  -434,
  -436,  -440,  -273,  -591,  -591,  -591,   -30,  -196,   -31,  -197,
   -62,   -32,  -198,   -64,  -199,   -60,  -192,  -591,  -591,  -591,
  -292,  -291,  -235,  -345,  -591,  -581,  -591,  -257,  -272,  -565,
  -591,  -246,  -268,  -591,  -265,  -591,  -591,   -74,  -291,  -292,
   -86,  -299,  -590,  -360,   -10,  -414,  -590,  -415,  -416,  -242,
  -356,  -357,  -591,  -383,  -591,  -386,  -369,  -591,  -377,  -591,
  -379,  -388,  -289,  -531,  -533,  -537,  -591,  -542,  -591,  -358,
  -591,  -591,   -10,   -10,  -314,  -316,  -591,  -291,   -96,  -591,
  -291,  -591,  -483,  -323,  -591,  -591,  -581,  -486,  -492,  -591,
  -501,  -502,  -591,  -512,  -591,  -515,  -591,  -516,  -591,  -331,
  -558,  -447,  -450,  -451,  -452,  -453,  -591,  -274,   -28,  -194,
   -29,  -195,  -591,  -591,  -591,  -591,  -366,  -591,  -391,   -56,
  -252,  -268,  -405,  -407,    -8,   -10,  -420,  -361,  -591,  -591,
  -418,  -590,  -590,  -590,  -590,  -535,  -591,  -540,  -591,  -306,
  -591,  -307,  -591,  -591,  -591,   -10,  -318,  -321,   -10,  -327,
  -329,  -591,  -499,  -556,  -504,  -505,  -505,  -505,  -591,  -547,
  -505,  -545,  -519,  -449,  -236,  -581,  -347,  -349,  -350,  -368,
  -259,  -591,  -419,   -10,  -478,  -591,  -591,  -283,  -417,  -384,
  -591,  -375,  -378,  -381,  -591,  -538,   -10,  -310,  -313,  -271,
  -590,   -10,  -591,  -485,  -500,  -591,  -508,  -591,  -510,  -591,
  -513,  -591,  -517,   -10,  -346,  -591,  -413,  -590,  -591,  -591,
  -290,  -590,  -536,  -590,  -409,  -410,  -411,  -591,  -324,  -505,
  -505,  -505,  -505,  -591,  -348,  -412,  -591,  -570,  -571,  -574,
  -289,  -376,  -359,  -319,  -591,  -506,  -509,  -511,  -514,  -332,
  -291,  -505,  -507 ]

clist = [
'13,389,603,555,457,430,595,599,725,513,781,377,5,454,734,407,792,613',
'209,209,824,587,326,209,209,209,680,336,680,501,300,13,291,291,110,195',
'297,297,545,287,310,683,100,115,115,864,744,699,2,868,251,251,251,209',
'209,118,118,283,209,209,99,285,209,366,375,318,394,297,297,842,959,966',
'968,103,576,577,1,414,439,444,449,315,924,756,760,730,194,663,358,359',
'558,561,362,371,565,286,422,274,278,871,13,683,115,497,209,209,209,209',
'13,13,396,398,5,914,405,514,115,693,701,363,420,5,867,519,253,253,253',
'629,407,249,265,266,103,639,416,417,418,419,391,678,319,322,323,369',
'509,510,511,687,689,691,617,390,624,692,12,312,320,421,360,872,361,1024',
'968,702,703,736,873,771,588,917,991,959,776,743,621,792,948,380,780',
'623,795,962,965,324,566,12,742,248,498,522,270,277,279,523,1014,764',
'13,209,209,209,209,846,928,393,209,209,209,209,400,638,435,436,403,901',
'797,13,209,791,798,886,952,680,680,740,27,955,315,315,,115,951,,,864',
',683,937,,448,629,,761,27,27,,,,27,27,27,,,,506,12,27,217,,773,,427',
'749,12,12,,,,,,,708,209,209,,252,252,252,27,27,286,209,719,27,27,13',
'532,27,,291,13,569,,297,541,501,336,,,251,251,734,291,,,,297,985,251',
'546,1032,283,556,13,557,528,283,,,,534,527,744,,,27,,,622,27,27,27,27',
'27,27,1015,,,,526,439,444,584,,,,297,,,286,1003,12,103,,286,1012,792',
'663,,,744,209,209,946,,,,274,,278,12,,800,518,253,,,791,516,520,,375',
'253,,,297,,524,,,,600,601,209,810,,,,,813,,,815,,,,,,,588,,,751,,713',
',,718,,,602,27,27,27,27,27,,,713,27,27,27,27,103,,428,433,,,12,27,27',
'452,456,12,837,,680,618,432,645,,932,15,646,,827,432,,115,683,1025,',
'115,457,209,209,12,881,744,,118,884,885,,118,670,671,,,,,,856,15,713',
',956,,957,,,315,315,713,,27,27,680,,448,,,,849,27,573,,,27,656,580,582',
'694,27,660,370,,,,656,,209,517,252,945,,,13,,890,891,252,,291,847,209',
'27,297,209,705,546,,,,291,,710,,297,717,,546,15,209,,,791,,,,15,15,315',
',,315,,13,13,588,,588,,448,738,,973,,297,656,656,656,,,27,27,,448,986',
'1019,,14,,,,13,,,,13,,679,654,,13,,209,659,827,209,,,662,,,209,27,765',
',209,770,209,14,293,293,796,775,,,1016,,731,732,315,,,315,,,992,,825',
'315,,448,,336,,15,777,448,,209,209,368,376,,455,209,753,729,,,755,209',
',,15,763,,757,757,686,688,690,,,,13,,,12,,,935,588,,,27,27,778,14,13',
',1023,,994,970,,14,14,,13,13,,,,291,,,,297,,,546,,,,,,291,12,12,,297',
',,840,,,899,,,,,,15,,,,,15,826,,,27,,,,12,,27,,12,,588,830,588,12,27',
',,27,,15,,835,836,,,,209,208,,,,13,27,,,13,13,448,656,,,660,14,656,',
',27,27,,,,832,,13,,,879,,588,209,209,14,313,,,,,357,357,,,357,,,27,',
',,27,,,,,27,,27,115,12,27,,,,,,27,,,,27,13,27,12,882,,883,,,,887,,,12',
'12,357,357,357,357,906,,,,,,,,209,,13,13,,14,27,27,,293,14,,27,,,713',
',,27,806,808,,293,,737,811,,,,,940,456,27,14,745,,,,927,,784,,853,855',
',,27,,858,860,,861,,,36,13,27,27,,975,12,,376,297,12,12,942,943,,,,',
',,,13,789,,13,757,,,12,,,36,290,290,,,460,461,,1004,,,,,,,470,376,,13',
',,,432,,15,,,,,,,13,365,379,972,379,13,,,,27,,,12,,27,,,13,27,27,,209',
',990,,,,,,876,,,1026,15,15,,27,,36,,12,12,27,27,,,36,36,315,,,1006,',
',,908,910,,,448,,15,,,1013,15,,,,1017,15,,,,,,,,,,,,27,784,,,,,,,,,',
'12,,,,,921,,,,,,,,,,27,,27,27,,12,,,12,,,789,,979,981,982,983,,,,357',
'357,455,,14,,36,,,,293,,,12,,,15,,,,,293,,,,36,12,,,,15,12,627,,739',
'27,,,,,15,15,,12,14,14,893,895,897,,,376,,,,27,,,27,,,931,784,,,784',
'933,784,934,784,,,14,1031,,,14,,,,,14,787,27,,,,,,,,,,,36,,27,,290,36',
',27,,,,960,,,,,,290,,27,15,,,27,15,15,,,36,,,,,,,,,,,,,784,15,,,,,,',
',,,,,,,,379,,,,14,,321,,,,313,,,,,,,784,14,784,789,784,,784,,,,,14,14',
',15,,293,,,,,1011,379,,,724,,,,293,,,,,,,1020,,1021,784,1022,,15,15',
'996,998,1000,,,1002,,,741,,,741,,,,,,,,,,,,,,,,,,787,,1041,,,,,,,,,',
'14,,,,14,14,357,,779,,15,,,,978,788,,,,,,905,14,1035,1036,1037,1038',
',,,15,,,15,,,,,,314,,,327,,,1042,429,,,,,,,,459,,,,15,395,,397,397,401',
'404,397,,,14,,,15,,,,,15,,,,,,,,36,,,218,15,,290,250,250,250,,953,14',
'14,787,,787,290,787,,503,,505,307,308,309,,,507,508,,,,,,,,,250,250',
'36,36,,,,,,379,,,,,,,,,,,,,,,,,,14,,,36,977,,,36,,357,,,36,,,,,,,787',
'14,,,14,,788,,,,,,,,,,314,314,,,,,,,,,,,,14,,,,787,,787,,787,,787,,',
'14,,,,,14,,,,,,,,,,,,14,,,,,,,,36,,,,,787,,,,,,395,,,36,,,,,,,515,357',
',36,36,,,,290,250,434,250,250,,,,453,458,,,,290,,,648,741,,,788,,788',
'218,788,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486',
'487,488,489,490,491,492,493,494,495,496,,,,,,,,,,250,,250,,,,,,250,250',
'36,,,,36,36,250,250,,,,,,,,250,681,,321,,684,788,36,,,,,,,,,,,,,,,698',
',,,,,,,552,,,,,,,,,788,,788,,788,,788,,,,,,,,36,,,,,,,681,,,321,,,,',
',,,,,,,,655,,788,,,36,36,,,,655,,,,,,,,,,,,,,,314,314,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,36,675,,,974,,,,,,,,655,655,655,675,802,250,,,36,,',
'36,,675,675,,,,,,,,,,,,314,,,314,,,,,,,36,828,250,250,829,453,672,434',
',,,,,36,681,321,,,36,,,,,,,,,,,,36,,,,,674,,,250,,250,,250,,,845,,,',
',,,,,,,,,,697,,314,,,314,,,,,,314,,,250,,,250,,,,,,,459,,721,722,723',
',,,,,,,,,250,,,250,,,888,,,,,,,,,,,,,,,,,,,907,,,,,,,,,,,,,,,,,,,,,',
'250,,,250,,,,,459,250,,,,,,,,,,,,,,,655,,,,,655,,,,,,,843,848,,,,,,250',
',,807,809,,,,,812,,,814,,,672,816,,,,,843,,843,,,,,,,961,,,250,,,250',
',,,,,,,,,250,250,,,,,321,,,,,,,,,,,,,,,,,,,,,,,,989,250,,,,,,,,,,,,',
',,,,,,,,,,,,,989,,,,,,,926,,,,930,250,,,,,,,,,,,,,,,,,,,,250,,,,,,,',
',,,,,,,,,,,250,909,911,,,,,,,,,,,,807,809,812,,,,,,,,,,,,,,250,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,250,,,,,',
',,,843,,,,,911,909,964,,,,,,250,,,,314,,,,,,843,,,,,,,,,,,,,,250,,,',
',,,,,,,,,,,,,,,,,,,,,,,250,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,250' ]
        racc_goto_table = arr = ::Array.new(2443, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,48,83,8,17,25,80,80,10,36,87,47,7,25,113,48,151,46,21,21,105,156',
'111,21,21,21,60,114,60,65,43,21,21,21,14,14,53,53,44,42,52,162,6,49',
'49,157,155,60,2,81,30,30,30,21,21,51,51,39,21,21,4,40,21,21,21,22,135',
'53,53,11,159,107,108,86,117,117,1,5,34,34,34,30,12,82,82,60,15,64,16',
'16,58,58,16,18,58,9,28,61,61,11,21,162,49,54,21,21,21,21,21,21,136,136',
'7,55,136,62,49,63,66,4,7,7,158,67,59,59,59,139,48,32,32,32,86,139,16',
'16,16,16,75,37,76,77,79,84,34,34,34,64,64,64,85,88,89,37,20,90,59,2',
'91,92,93,107,108,37,37,121,94,95,154,105,96,159,97,121,98,151,99,100',
'101,102,103,104,106,109,110,20,112,122,123,125,35,35,35,126,127,128',
'21,21,21,21,21,129,130,134,21,21,21,21,137,138,22,22,140,141,142,21',
'21,121,143,145,148,60,60,149,38,153,30,30,,49,105,,,157,,162,158,,49',
'139,,83,38,38,,,,38,38,38,,,,135,20,38,19,,46,,9,156,20,20,,,,,,,44',
'21,21,,57,57,57,38,38,9,21,44,38,38,21,43,38,,21,21,111,,53,52,65,114',
',,30,30,113,21,,,,53,158,30,42,81,39,52,21,52,40,39,,,,40,6,155,,,38',
',,47,38,38,38,38,38,38,11,,,,4,34,34,21,,,,53,,,9,87,20,86,,9,158,151',
'64,,,155,21,21,82,,,,61,,61,20,,139,59,59,,,121,32,32,,21,59,,,53,,32',
',,,16,16,21,36,,,,,36,,,36,,,,,,,154,,,154,,34,,,34,,,4,38,38,38,38',
'38,,,34,38,38,38,38,86,,19,19,,,20,38,38,19,19,20,44,,60,86,57,14,,121',
'24,14,,65,57,,49,162,10,,49,17,21,21,20,8,155,,51,8,8,,51,22,22,,,,',
',117,24,34,,121,,121,,,30,30,34,,38,38,60,,49,,,,58,38,119,,,38,61,119',
'119,52,38,61,24,,,,61,,21,57,57,80,,,21,,117,117,57,,21,25,21,38,53',
'21,7,42,,,,21,,22,,53,22,,42,24,21,,,121,,,,24,24,30,,,30,,21,21,154',
',154,,49,21,,80,,53,61,61,61,,,38,38,,49,80,121,,23,,,,21,,,,21,,59',
'35,,21,,21,35,65,21,,,35,,,21,38,22,,21,22,21,23,23,23,52,22,,,83,,9',
'9,30,,,30,,,8,,111,30,,49,,114,,24,16,49,,21,21,23,23,,24,21,9,59,,',
'9,21,,,24,9,,86,86,35,35,35,,,,21,,,20,,,154,154,,,38,38,86,23,21,,8',
',117,65,,23,23,,21,21,,,,21,,,,53,,,42,,,,,,21,20,20,,53,,,42,,,48,',
',,,,24,,,,,24,9,,,38,,,,20,,38,,20,,154,9,154,20,38,,,38,,24,,9,9,,',
',21,27,,,,21,38,,,21,21,49,61,,,61,23,61,,,38,38,,,,59,,21,,,16,,154',
'21,21,23,27,,,,,27,27,,,27,,,38,,,,38,,,,,38,,38,49,20,38,,,,,,38,,',
',38,21,38,20,86,,86,,,,86,,,20,20,27,27,27,27,9,,,,,,,,21,,21,21,,23',
'38,38,,23,23,,38,,,34,,,38,19,19,,23,,120,19,,,,,16,19,38,23,120,,,',
'9,,147,,119,119,,,38,,119,119,,119,,,45,21,38,38,,21,20,,23,53,20,20',
'9,9,,,,,,,,21,120,,21,86,,,20,,,45,45,45,,,27,27,,52,,,,,,,27,23,,21',
',,,57,,24,,,,,,,21,45,45,9,45,21,,,,38,,,20,,38,,,21,38,38,,21,,9,,',
',,,57,,,22,24,24,,38,,45,,20,20,38,38,,,45,45,30,,,9,,,,19,19,,,49,',
'24,,,9,24,,,,9,24,,,,,,,,,,,,38,147,,,,,,,,,,20,,,,,57,,,,,,,,,,38,',
'38,38,,20,,,20,,,120,,119,119,119,119,,,,27,27,24,,23,,45,,,,23,,,20',
',,24,,,,,23,,,,45,20,,,,24,20,27,,116,38,,,,,24,24,,20,23,23,152,152',
'152,,,23,,,,38,,,38,,,120,147,,,147,120,147,120,147,,,23,119,,,23,,',
',,23,116,38,,,,,,,,,,,45,,38,,45,45,,38,,,,120,,,,,,45,,38,24,,,38,24',
'24,,,45,,,,,,,,,,,,,147,24,,,,,,,,,,,,,,,45,,,,23,,26,,,,27,,,,,,,147',
'23,147,120,147,,147,,,,,23,23,,24,,23,,,,,120,45,,,27,,,,23,,,,,,,120',
',120,147,120,,24,24,152,152,152,,,152,,,118,,,118,,,,,,,,,,,,,,,,,,116',
',120,,,,,,,,,,23,,,,23,23,27,,27,,24,,,,24,118,,,,,,23,23,152,152,152',
'152,,,,24,,,24,,,,,,56,,,56,,,152,26,,,,,,,,26,,,,24,56,,56,56,56,56',
'56,,,23,,,24,,,,,24,,,,,,,,45,,,29,24,,45,29,29,29,,116,23,23,116,,116',
'45,116,,26,,26,29,29,29,,,26,26,,,,,,,,,29,29,45,45,,,,,,45,,,,,,,,',
',,,,,,,,,23,,,45,23,,,45,,27,,,45,,,,,,,116,23,,,23,,118,,,,,,,,,,56',
'56,,,,,,,,,,,,23,,,,116,,116,,116,,116,,,23,,,,,23,,,,,,,,,,,,23,,,',
',,,,45,,,,,116,,,,,,56,,,45,,,,,,,56,27,,45,45,,,,45,29,29,29,29,,,',
'29,29,,,,45,,,26,118,,,118,,118,29,118,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,,,,,,,,,,29,,29,,,,,,29',
'29,45,,,,45,45,29,29,,,,,,,,29,26,,26,,26,118,45,,,,,,,,,,,,,,,26,,',
',,,,,29,,,,,,,,,118,,118,,118,,118,,,,,,,,45,,,,,,,26,,,26,,,,,,,,,',
',,,56,,118,,,45,45,,,,56,,,,,,,,,,,,,,,56,56,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,45,56,,,45,,,,,,,,56,56,56,56,26,29,,,45,,,45,,56,56,,,,,,,',
',,,,56,,,56,,,,,,,45,26,29,29,26,29,29,29,,,,,,45,26,26,,,45,,,,,,,',
',,,,45,,,,,29,,,29,,29,,29,,,26,,,,,,,,,,,,,,29,,56,,,56,,,,,,56,,,29',
',,29,,,,,,,26,,29,29,29,,,,,,,,,,29,,,29,,,26,,,,,,,,,,,,,,,,,,,26,',
',,,,,,,,,,,,,,,,,,,,29,,,29,,,,,26,29,,,,,,,,,,,,,,,56,,,,,56,,,,,,',
'56,56,,,,,,29,,,29,29,,,,,29,,,29,,,29,29,,,,,56,,56,,,,,,,26,,,29,',
',29,,,,,,,,,,29,29,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,26,29,,,,,,,,,,,,,',
',,,,,,,,,,,,26,,,,,,,56,,,,56,29,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,',
',,,,,29,29,29,,,,,,,,,,,,29,29,29,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,56,,,,,29,29',
'29,,,,,,29,,,,56,,,,,,56,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,29',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29' ]
        racc_goto_check = arr = ::Array.new(2443, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    76,    48,   nil,    57,   -23,    39,    12,  -309,    64,
  -546,  -656,  -760,   nil,    27,    78,    30,  -201,    30,   237,
   154,     0,    11,   591,   452,  -192,  1216,   754,   -14,  1435,
    27,   nil,   106,   nil,  -123,   163,  -261,  -359,   224,    26,
    30,   nil,     7,    -3,  -263,   924,  -356,   -53,   -65,    36,
   nil,    48,    -2,     4,  -143,  -709,  1352,   251,  -226,   101,
  -474,    70,  -156,  -397,  -362,  -224,  -403,  -149,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    72,    85,    85,   nil,    85,
  -352,  -704,  -517,  -361,    80,  -227,    70,  -613,    85,  -238,
   103,    98,  -597,    99,  -594,  -444,  -776,  -445,  -204,  -707,
   112,  -444,  -210,  -444,  -718,  -656,  -733,  -844,  -843,   126,
  -140,   -35,  -393,  -557,   -30,   nil,   573,  -257,   759,   176,
   323,  -406,   166,   -59,   nil,   -86,   -83,  -796,  -410,  -525,
  -644,   nil,   nil,   nil,   131,    -8,    34,   130,  -191,  -267,
   133,  -584,  -417,  -414,   nil,  -563,   nil,   287,  -669,  -352,
   nil,  -607,   371,  -667,  -181,  -533,  -328,  -705,  -630,  -824,
   nil,   nil,  -461 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   364,   282,   nil,   554,
   nil,   869,   nil,   281,   nil,   nil,   nil,    10,    11,    17,
   214,   306,   nil,   212,   213,   nil,   256,    16,   nil,    20,
    21,    22,   nil,    26,   716,   nil,   nil,   nil,   296,    30,
   nil,    32,    35,    34,   nil,   210,   374,   nil,   117,   442,
   116,    70,   823,    43,   nil,   nil,   572,   316,   nil,   317,
   254,   440,   nil,   nil,   657,   499,   nil,   nil,   272,    44,
    45,    46,    47,    48,    49,    50,   nil,   273,    56,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   343,   nil,
   nil,   nil,   329,   328,   735,   331,   332,   nil,   333,   nil,
   334,   335,   nil,   nil,   446,   nil,   nil,   nil,   nil,   nil,
   nil,    69,    71,    72,    73,   nil,   nil,   nil,   nil,   634,
   nil,   nil,   nil,   nil,   406,   783,   339,   341,   785,   342,
   786,   954,   nil,   790,   348,   350,   nil,   590,   591,   794,
   353,   356,   262 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  2, 142, :_reduce_2,
  0, 143, :_reduce_3,
  1, 143, :_reduce_4,
  3, 143, :_reduce_5,
  1, 145, :_reduce_none,
  4, 145, :_reduce_7,
  4, 148, :_reduce_8,
  2, 149, :_reduce_9,
  0, 153, :_reduce_10,
  1, 153, :_reduce_11,
  3, 153, :_reduce_12,
  0, 168, :_reduce_13,
  4, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_none,
  3, 147, :_reduce_17,
  2, 147, :_reduce_18,
  3, 147, :_reduce_19,
  3, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  4, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_26,
  3, 147, :_reduce_27,
  6, 147, :_reduce_none,
  6, 147, :_reduce_none,
  5, 147, :_reduce_30,
  5, 147, :_reduce_none,
  5, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_34,
  3, 147, :_reduce_35,
  3, 147, :_reduce_36,
  1, 147, :_reduce_none,
  3, 157, :_reduce_38,
  3, 157, :_reduce_39,
  1, 167, :_reduce_none,
  3, 167, :_reduce_41,
  3, 167, :_reduce_42,
  2, 167, :_reduce_43,
  2, 167, :_reduce_44,
  1, 167, :_reduce_none,
  1, 156, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_49,
  2, 159, :_reduce_50,
  2, 159, :_reduce_51,
  1, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 176, :_reduce_56,
  2, 170, :_reduce_57,
  3, 170, :_reduce_58,
  4, 170, :_reduce_59,
  5, 170, :_reduce_none,
  4, 170, :_reduce_61,
  5, 170, :_reduce_none,
  4, 170, :_reduce_63,
  5, 170, :_reduce_none,
  2, 170, :_reduce_65,
  2, 170, :_reduce_66,
  1, 158, :_reduce_67,
  3, 158, :_reduce_68,
  1, 180, :_reduce_69,
  3, 180, :_reduce_70,
  1, 179, :_reduce_71,
  2, 179, :_reduce_72,
  3, 179, :_reduce_73,
  5, 179, :_reduce_74,
  2, 179, :_reduce_75,
  4, 179, :_reduce_76,
  2, 179, :_reduce_77,
  4, 179, :_reduce_78,
  1, 179, :_reduce_79,
  3, 179, :_reduce_80,
  1, 182, :_reduce_81,
  3, 182, :_reduce_82,
  2, 181, :_reduce_83,
  3, 181, :_reduce_84,
  1, 184, :_reduce_85,
  3, 184, :_reduce_86,
  1, 183, :_reduce_87,
  4, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  2, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 164, :_reduce_95,
  4, 164, :_reduce_96,
  4, 164, :_reduce_97,
  3, 164, :_reduce_98,
  3, 164, :_reduce_99,
  3, 164, :_reduce_100,
  3, 164, :_reduce_101,
  2, 164, :_reduce_102,
  1, 164, :_reduce_none,
  1, 186, :_reduce_none,
  2, 187, :_reduce_105,
  1, 187, :_reduce_106,
  3, 187, :_reduce_107,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_111,
  1, 188, :_reduce_112,
  1, 154, :_reduce_113,
  1, 154, :_reduce_none,
  1, 155, :_reduce_115,
  3, 155, :_reduce_116,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 169, :_reduce_191,
  5, 169, :_reduce_192,
  3, 169, :_reduce_193,
  6, 169, :_reduce_194,
  6, 169, :_reduce_195,
  5, 169, :_reduce_196,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  4, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_202,
  3, 169, :_reduce_203,
  3, 169, :_reduce_204,
  3, 169, :_reduce_205,
  3, 169, :_reduce_206,
  3, 169, :_reduce_207,
  3, 169, :_reduce_208,
  3, 169, :_reduce_209,
  4, 169, :_reduce_210,
  4, 169, :_reduce_211,
  2, 169, :_reduce_212,
  2, 169, :_reduce_213,
  3, 169, :_reduce_214,
  3, 169, :_reduce_215,
  3, 169, :_reduce_216,
  3, 169, :_reduce_217,
  3, 169, :_reduce_218,
  3, 169, :_reduce_219,
  3, 169, :_reduce_220,
  3, 169, :_reduce_221,
  3, 169, :_reduce_222,
  3, 169, :_reduce_223,
  3, 169, :_reduce_224,
  3, 169, :_reduce_225,
  3, 169, :_reduce_226,
  2, 169, :_reduce_227,
  2, 169, :_reduce_228,
  3, 169, :_reduce_229,
  3, 169, :_reduce_230,
  3, 169, :_reduce_231,
  3, 169, :_reduce_232,
  3, 169, :_reduce_233,
  0, 194, :_reduce_234,
  0, 195, :_reduce_235,
  7, 169, :_reduce_236,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  1, 162, :_reduce_239,
  2, 162, :_reduce_240,
  2, 162, :_reduce_241,
  4, 162, :_reduce_242,
  2, 162, :_reduce_243,
  3, 162, :_reduce_244,
  3, 201, :_reduce_245,
  2, 203, :_reduce_none,
  1, 204, :_reduce_247,
  1, 204, :_reduce_none,
  1, 202, :_reduce_249,
  1, 202, :_reduce_none,
  2, 202, :_reduce_251,
  4, 202, :_reduce_252,
  2, 202, :_reduce_253,
  1, 172, :_reduce_254,
  2, 172, :_reduce_255,
  2, 172, :_reduce_256,
  4, 172, :_reduce_257,
  1, 172, :_reduce_258,
  4, 206, :_reduce_none,
  1, 206, :_reduce_none,
  0, 208, :_reduce_261,
  2, 175, :_reduce_262,
  1, 207, :_reduce_none,
  2, 207, :_reduce_264,
  3, 207, :_reduce_265,
  2, 200, :_reduce_266,
  2, 205, :_reduce_267,
  0, 205, :_reduce_268,
  1, 197, :_reduce_269,
  2, 197, :_reduce_270,
  3, 197, :_reduce_271,
  4, 197, :_reduce_272,
  3, 165, :_reduce_273,
  4, 165, :_reduce_274,
  2, 165, :_reduce_275,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  0, 230, :_reduce_285,
  4, 193, :_reduce_286,
  4, 193, :_reduce_287,
  3, 193, :_reduce_288,
  3, 193, :_reduce_289,
  2, 193, :_reduce_290,
  4, 193, :_reduce_291,
  4, 193, :_reduce_292,
  3, 193, :_reduce_293,
  3, 193, :_reduce_294,
  1, 193, :_reduce_295,
  4, 193, :_reduce_296,
  3, 193, :_reduce_297,
  1, 193, :_reduce_298,
  5, 193, :_reduce_299,
  4, 193, :_reduce_300,
  3, 193, :_reduce_301,
  2, 193, :_reduce_302,
  1, 193, :_reduce_none,
  2, 193, :_reduce_304,
  2, 193, :_reduce_305,
  6, 193, :_reduce_306,
  6, 193, :_reduce_307,
  0, 231, :_reduce_308,
  0, 232, :_reduce_309,
  7, 193, :_reduce_310,
  0, 233, :_reduce_311,
  0, 234, :_reduce_312,
  7, 193, :_reduce_313,
  5, 193, :_reduce_314,
  4, 193, :_reduce_315,
  5, 193, :_reduce_316,
  0, 235, :_reduce_317,
  0, 236, :_reduce_318,
  9, 193, :_reduce_319,
  0, 237, :_reduce_320,
  6, 193, :_reduce_321,
  0, 238, :_reduce_322,
  0, 239, :_reduce_323,
  8, 193, :_reduce_324,
  0, 240, :_reduce_325,
  0, 241, :_reduce_326,
  6, 193, :_reduce_327,
  0, 242, :_reduce_328,
  6, 193, :_reduce_329,
  0, 243, :_reduce_330,
  0, 244, :_reduce_331,
  9, 193, :_reduce_332,
  1, 193, :_reduce_333,
  1, 193, :_reduce_334,
  1, 193, :_reduce_335,
  1, 193, :_reduce_none,
  1, 161, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 245, :_reduce_345,
  4, 245, :_reduce_346,
  1, 246, :_reduce_347,
  3, 246, :_reduce_348,
  1, 247, :_reduce_349,
  1, 247, :_reduce_none,
  2, 219, :_reduce_351,
  3, 249, :_reduce_352,
  2, 249, :_reduce_353,
  1, 249, :_reduce_354,
  1, 249, :_reduce_none,
  3, 250, :_reduce_356,
  3, 250, :_reduce_357,
  1, 221, :_reduce_358,
  5, 221, :_reduce_359,
  1, 151, :_reduce_none,
  2, 151, :_reduce_361,
  1, 252, :_reduce_362,
  3, 252, :_reduce_363,
  3, 253, :_reduce_364,
  1, 177, :_reduce_none,
  3, 177, :_reduce_366,
  1, 177, :_reduce_367,
  4, 177, :_reduce_368,
  4, 254, :_reduce_369,
  2, 254, :_reduce_370,
  2, 254, :_reduce_371,
  1, 254, :_reduce_372,
  2, 259, :_reduce_373,
  1, 259, :_reduce_374,
  6, 251, :_reduce_375,
  8, 251, :_reduce_376,
  4, 251, :_reduce_377,
  6, 251, :_reduce_378,
  4, 251, :_reduce_379,
  2, 251, :_reduce_380,
  6, 251, :_reduce_381,
  2, 251, :_reduce_382,
  4, 251, :_reduce_383,
  6, 251, :_reduce_384,
  2, 251, :_reduce_385,
  4, 251, :_reduce_386,
  2, 251, :_reduce_387,
  4, 251, :_reduce_388,
  1, 251, :_reduce_389,
  0, 263, :_reduce_390,
  5, 262, :_reduce_391,
  2, 173, :_reduce_392,
  4, 173, :_reduce_none,
  4, 173, :_reduce_none,
  4, 173, :_reduce_none,
  2, 218, :_reduce_396,
  4, 218, :_reduce_397,
  4, 218, :_reduce_398,
  3, 218, :_reduce_399,
  4, 218, :_reduce_400,
  3, 218, :_reduce_401,
  2, 218, :_reduce_402,
  1, 218, :_reduce_403,
  0, 265, :_reduce_404,
  5, 217, :_reduce_405,
  0, 266, :_reduce_406,
  5, 217, :_reduce_407,
  0, 268, :_reduce_408,
  6, 223, :_reduce_409,
  1, 267, :_reduce_410,
  1, 267, :_reduce_none,
  6, 150, :_reduce_412,
  0, 150, :_reduce_413,
  1, 269, :_reduce_414,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 270, :_reduce_417,
  1, 270, :_reduce_418,
  2, 152, :_reduce_419,
  1, 152, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_424,
  1, 273, :_reduce_none,
  2, 273, :_reduce_426,
  3, 274, :_reduce_427,
  1, 274, :_reduce_428,
  3, 211, :_reduce_429,
  3, 212, :_reduce_430,
  3, 213, :_reduce_431,
  3, 213, :_reduce_432,
  1, 277, :_reduce_433,
  3, 277, :_reduce_434,
  1, 278, :_reduce_435,
  2, 278, :_reduce_436,
  3, 214, :_reduce_437,
  3, 214, :_reduce_438,
  1, 280, :_reduce_439,
  3, 280, :_reduce_440,
  1, 275, :_reduce_441,
  2, 275, :_reduce_442,
  1, 276, :_reduce_443,
  2, 276, :_reduce_444,
  1, 279, :_reduce_445,
  0, 282, :_reduce_446,
  3, 279, :_reduce_447,
  0, 283, :_reduce_448,
  4, 279, :_reduce_449,
  1, 281, :_reduce_450,
  1, 281, :_reduce_451,
  1, 281, :_reduce_452,
  1, 281, :_reduce_none,
  2, 191, :_reduce_454,
  1, 191, :_reduce_455,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  3, 272, :_reduce_460,
  1, 271, :_reduce_461,
  1, 271, :_reduce_462,
  2, 271, :_reduce_463,
  2, 271, :_reduce_464,
  2, 271, :_reduce_465,
  2, 271, :_reduce_466,
  1, 185, :_reduce_467,
  1, 185, :_reduce_468,
  1, 185, :_reduce_469,
  1, 185, :_reduce_470,
  1, 185, :_reduce_471,
  1, 185, :_reduce_472,
  1, 185, :_reduce_473,
  1, 185, :_reduce_474,
  1, 185, :_reduce_475,
  1, 185, :_reduce_476,
  1, 185, :_reduce_477,
  1, 215, :_reduce_478,
  1, 160, :_reduce_479,
  1, 163, :_reduce_480,
  1, 163, :_reduce_none,
  1, 225, :_reduce_482,
  3, 225, :_reduce_483,
  2, 225, :_reduce_484,
  4, 227, :_reduce_485,
  2, 227, :_reduce_486,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 256, :_reduce_489,
  1, 256, :_reduce_490,
  1, 287, :_reduce_491,
  2, 288, :_reduce_492,
  1, 288, :_reduce_493,
  2, 289, :_reduce_494,
  1, 289, :_reduce_495,
  1, 255, :_reduce_496,
  3, 255, :_reduce_497,
  1, 290, :_reduce_498,
  3, 290, :_reduce_499,
  4, 291, :_reduce_500,
  2, 291, :_reduce_501,
  2, 291, :_reduce_502,
  1, 291, :_reduce_503,
  2, 292, :_reduce_504,
  0, 292, :_reduce_505,
  6, 285, :_reduce_506,
  8, 285, :_reduce_507,
  4, 285, :_reduce_508,
  6, 285, :_reduce_509,
  4, 285, :_reduce_510,
  6, 285, :_reduce_511,
  2, 285, :_reduce_512,
  4, 285, :_reduce_513,
  6, 285, :_reduce_514,
  2, 285, :_reduce_515,
  2, 285, :_reduce_516,
  4, 285, :_reduce_517,
  1, 285, :_reduce_518,
  0, 285, :_reduce_519,
  1, 294, :_reduce_none,
  1, 294, :_reduce_521,
  1, 248, :_reduce_522,
  1, 248, :_reduce_523,
  1, 248, :_reduce_524,
  1, 248, :_reduce_525,
  1, 295, :_reduce_526,
  3, 295, :_reduce_527,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 297, :_reduce_530,
  3, 297, :_reduce_531,
  1, 298, :_reduce_532,
  3, 298, :_reduce_533,
  1, 296, :_reduce_none,
  4, 296, :_reduce_535,
  6, 296, :_reduce_536,
  3, 296, :_reduce_537,
  5, 296, :_reduce_538,
  2, 296, :_reduce_539,
  4, 296, :_reduce_540,
  1, 296, :_reduce_541,
  3, 296, :_reduce_542,
  1, 260, :_reduce_543,
  3, 260, :_reduce_544,
  3, 299, :_reduce_545,
  1, 293, :_reduce_546,
  3, 293, :_reduce_547,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  2, 261, :_reduce_550,
  1, 261, :_reduce_551,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  2, 258, :_reduce_554,
  2, 257, :_reduce_555,
  0, 257, :_reduce_556,
  1, 228, :_reduce_557,
  4, 228, :_reduce_558,
  0, 216, :_reduce_559,
  2, 216, :_reduce_560,
  1, 199, :_reduce_561,
  3, 199, :_reduce_562,
  3, 302, :_reduce_563,
  2, 302, :_reduce_564,
  4, 302, :_reduce_565,
  2, 302, :_reduce_566,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  0, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_none,
  0, 196, :_reduce_590 ]

racc_reduce_n = 591

racc_shift_n = 1043

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :tIDENTIFIER => 50,
  :tFID => 51,
  :tGVAR => 52,
  :tIVAR => 53,
  :tCONSTANT => 54,
  :tLABEL => 55,
  :tCVAR => 56,
  :tNTH_REF => 57,
  :tBACK_REF => 58,
  :tSTRING_CONTENT => 59,
  :tINTEGER => 60,
  :tFLOAT => 61,
  :tREGEXP_END => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tPOW => 65,
  :tCMP => 66,
  :tEQ => 67,
  :tEQQ => 68,
  :tNEQ => 69,
  :tGEQ => 70,
  :tLEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tMATCH => 74,
  :tNMATCH => 75,
  :tJSDOT => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tAWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAMBDA => 129,
  :tLAMBEG => 130,
  :tLBRACK2 => 131,
  :tLBRACK => 132,
  :tJSLBRACK => 133,
  :tDSTAR => 134,
  :tLABEL_END => 135,
  :tEQL => 136,
  :tLOWEST => 137,
  "-@NUM" => 138,
  "+@NUM" => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tJSDOT",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tLBRACK2",
  "tLBRACK",
  "tJSLBRACK",
  "tDSTAR",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "\"-@NUM\"",
  "\"+@NUM\"",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "opt_nl",
  "primary",
  "@2",
  "@3",
  "none",
  "args",
  "trailer",
  "assocs",
  "block_arg",
  "paren_args",
  "opt_call_args",
  "rparen",
  "opt_paren_args",
  "opt_block_arg",
  "call_args2",
  "open_args",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "block_param",
  "f_block_optarg",
  "f_block_opt",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "f_arg",
  "f_rest_arg",
  "do_block",
  "@20",
  "operation3",
  "@21",
  "@22",
  "cases",
  "@23",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "@25",
  "sym",
  "f_args",
  "kwrest_mark",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_kwarg",
  "args_tail",
  "opt_args_tail",
  "f_optarg",
  "f_norm_arg",
  "f_arg_item",
  "f_margs",
  "f_marg",
  "f_marg_list",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_5(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = new_body(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_12(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_13(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_14(val, _values, result)
                      result = new_alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

def _reduce_18(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = new_if(val[1], val[2], val[0], nil)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = new_if(val[1], val[2], nil, val[0])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_while(val[1], val[2], val[0])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = new_until(val[1], val[2], val[0])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_rescue_mod(val[1], val[0], val[2])
                    
    result
end

# reduce 24 omitted

# reduce 25 omitted

def _reduce_26(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_27(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

# reduce 28 omitted

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = new_assign val[0], val[1], s(:svalue, val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:masgn, val[0], val[2])
                    
    result
end

# reduce 37 omitted

def _reduce_38(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = s(:and, val[0], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:or, val[0], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_unary_call(['!', []], val[1])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = new_return(val[0], val[1])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = new_break(val[0], val[1])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = new_next(val[0], val[1])
                    
    result
end

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = new_iter(val[1], val[2])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call(nil, val[0], val[1]) << val[2]
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

# reduce 60 omitted

def _reduce_61(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                    result = new_call(val[0], val[2], val[3])
                  
    result
end

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_72(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0] << s(:splat, val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                     result = (val[0] << s(:splat, val[2])).concat(val[4].children)
                   
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << s(:splat)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = (val[0] << s(:splat)).concat(val[3].children)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:array, s(:splat, val[1])).concat(val[3].children)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:array, s(:splat))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:array, s(:splat)).concat(val[2].children)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_88(val, _values, result)
                      args = val[2] ? val[2] : []
                      result = s(:attrasgn, val[0], :[]=, s(:arglist, *args))
                    
    result
end

def _reduce_89(val, _values, result)
                      result = new_call val[0], val[2], []
                    
    result
end

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = new_js_attrasgn(val[0], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = new_attrasgn(val[0], :[]=, val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_99(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

# reduce 103 omitted

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_112(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = s(:undef, val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

def _reduce_191(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_assign val[0], val[1], s(:rescue_mod, val[2], val[4])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_op_asgn1(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_195(val, _values, result)
                      raise ".JS[...] #{val[4]} is not supported"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

def _reduce_202(val, _values, result)
                      result = new_irange(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_erange(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call new_binary_call(new_int(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call new_binary_call(new_float(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[1], [:"+@", []], []
                      if [:int, :float].include? val[1].type
                        result = val[1]
                      end
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[1], [:"-@", []], []
                      if val[1].type == :int
                        val[1][1] = -val[1][1]
                        result = val[1]
                      elsif val[1].type == :float
                        val[1][1] = -val[1][1].to_f
                        result = val[1]
                      end
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_and(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_or(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_234(val, _values, result)
 lexer.cond_push 1 
    result
end

def _reduce_235(val, _values, result)
 lexer.cond_pop 
    result
end

def _reduce_236(val, _values, result)
                      result = new_if(val[1], val[0], val[3], val[6])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_240(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_242(val, _values, result)
                      val[0] << s(:hash, *val[2])
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [s(:hash, *val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = []
                    
    result
end

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = []
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = val[0]
                      add_block_pass val[0], val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                      add_block_pass result, val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                      result << val[3] if val[3]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                      add_block_pass result, val[0]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      lexer.cmdarg_push 1
                    
    result
end

def _reduce_262(val, _values, result)
                      lexer.cmdarg_pop
                      result = val[1]
                    
    result
end

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_block_pass(val[0], val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [new_splat(val[0], val[1])]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result  = val[0] << new_splat(val[2], val[3])
                    
    result
end

def _reduce_273(val, _values, result)
                      val[0] << val[2]
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_274(val, _values, result)
                      val[0] << s(:splat, val[3])
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

def _reduce_285(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:begin, val[2])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_paren(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_js_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_array(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_hash(val[0], val[1], val[2])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_return(val[0])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_unary_call(['!', []], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_unary_call(['!', []], new_nil(val[0]))
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_call(nil, val[0], [])
                      result << val[1]
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if(val[0], val[1], val[4], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = s(:while, val[2], val[5])
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:until, val[2], val[5])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = s(:case, val[1], *val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = s(:case, nil, *val[2])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = s(:case, nil, val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_318(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_319(val, _values, result)
                      result = s(:for, val[4], val[1], val[7])
                    
    result
end

def _reduce_320(val, _values, result)
                      # ...
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val[0], val[1], val[2], val[4], val[5]
                    
    result
end

def _reduce_322(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_323(val, _values, result)
                      # ...
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass(val[0], val[3], val[6], val[7])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_326(val, _values, result)
                      # ...
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_328(val, _values, result)
                      push_scope
                      lexer.lex_state = :expr_endfn
                    
    result
end

def _reduce_329(val, _values, result)
                      result = new_def(val[0], nil, val[1], val[3], val[4], val[5])
                      pop_scope
                    
    result
end

def _reduce_330(val, _values, result)
                       lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      push_scope
                      lexer.lex_state = :expr_endfn
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_def(val[0], val[1], val[4], val[6], val[7], val[8])
                      pop_scope
                    
    result
end

def _reduce_333(val, _values, result)
                      result = new_break(val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = []
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_shadowarg(val[0])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = new_call nil, [:lambda, []], []
                      result << new_iter(val[0], val[1])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_block_args(*val[0])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_assign(new_assignable(new_ident(
                                  val[0])), val[1], val[2])
                    
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = new_block_args(nil, [val[1]])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_368(val, _values, result)
                      val[1] << val[2]
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [val[0], val[2], val[3]]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [val[0], nil, val[1]]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [nil, val[0], val[1]]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = [nil, nil, val[0]]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_374(val, _values, result)
                      nil
                    
    result
end

def _reduce_375(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg, val[5]]
                    
    result
end

def _reduce_376(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg + val[6], val[7]]
                    
    result
end

def _reduce_377(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg, val[3]]
                    
    result
end

def _reduce_378(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg + val[4], val[5]]
                    
    result
end

def _reduce_379(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg, val[3]]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [val[0], nil]
                    
    result
end

def _reduce_381(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg + val[4], val[5]]
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [val[0], val[1]]
                    
    result
end

def _reduce_383(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg, val[3]]
                    
    result
end

def _reduce_384(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg + val[4], val[5]]
                    
    result
end

def _reduce_385(val, _values, result)
                      optarg= new_optarg(val[0])
                      result = [optarg, val[1]]
                    
    result
end

def _reduce_386(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = [optarg + val[2], val[3]]
                    
    result
end

def _reduce_387(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg, val[1]]
                    
    result
end

def _reduce_388(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg + val[2], val[3]]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [nil, val[0]]
                    
    result
end

def _reduce_390(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_391(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_392(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = new_call(val[0], [:call, []], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = new_call(val[0], val[2])
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_super(val[0], nil)
                    
    result
end

def _reduce_404(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_406(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_408(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_409(val, _values, result)
                      part = s(:when, s(:array, *val[2]), val[4])
                      result = [part]
                      result.push(*val[5]) if val[5]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = [val[0]]
                    
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      exc = val[1] || s(:array)
                      exc << new_assign(val[2], val[2], s(:gvar, '$!'.intern)) if val[2]
                      result = [s(:resbody, exc, val[4])]
                      result.concat val[5] if val[5]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_419(val, _values, result)
                      result = val[1].nil? ? s(:nil) : val[1]
                    
    result
end

# reduce 420 omitted

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      result = new_str val[0]
                    
    result
end

# reduce 425 omitted

def _reduce_426(val, _values, result)
                    result = str_append val[0], val[1]
                  
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = s(:str, value(val[0]))
                    
    result
end

def _reduce_429(val, _values, result)
                      result = new_xstr(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_regexp val[1], val[2]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_434(val, _values, result)
                      part = val[1]
                      part = s(:dstr, "", val[1]) if part.type == :evstr
                      result = val[0] << part
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0].concat([val[1]])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << s(:str, value(val[1]))
                    
    result
end

def _reduce_441(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_442(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_444(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = new_str_content(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = lexer.strterm
                      lexer.strterm = nil
                    
    result
end

def _reduce_447(val, _values, result)
                      lexer.strterm = val[1]
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      lexer.cond_push 0
                      lexer.cmdarg_push 0
                      result = lexer.strterm
                      lexer.strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_449(val, _values, result)
                      lexer.strterm = val[1]
                      lexer.cond_lexpop
                      lexer.cmdarg_lexpop
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = new_sym(val[1])
                      lexer.lex_state = :expr_end
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 456 omitted

# reduce 457 omitted

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      result = new_dsym val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_int(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = new_float(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                    result = negate_num(new_int(val[1]))
                  
    result
end

def _reduce_464(val, _values, result)
                    result = negate_num(new_float(val[1]))
                  
    result
end

def _reduce_465(val, _values, result)
                    result = new_int(val[1])
                  
    result
end

def _reduce_466(val, _values, result)
                    result = new_float(val[1])
                  
    result
end

def _reduce_467(val, _values, result)
                      result = new_ident(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_self(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_true(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_false(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new___FILE__(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = new___LINE__(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = new_var_ref(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      result = s(:nth_ref, value(val[0]))
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0]
                      lexer.lex_state = :expr_beg
                    
    result
end

# reduce 487 omitted

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      result = new_kwrestarg(val[1])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = new_kwrestarg()
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = new_args_tail(val[0], val[2], val[3])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_args_tail(val[0], nil, val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = new_args_tail(nil, val[0], val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = new_args_tail(nil, nil, val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = new_args_tail(nil, nil, nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg, val[5])
                    
    result
end

def _reduce_507(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg + val[6], val[7])
                    
    result
end

def _reduce_508(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg, val[3])
                    
    result
end

def _reduce_509(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg + val[4], val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg, val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg + val[4], val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = new_args(val[0], val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg, val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg + val[4], val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      optarg = new_restarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = new_args(restarg + val[2], val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = new_args(nil, val[0])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = new_args(nil, nil)
                    
    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = value(val[0]).to_sym
                      scope.add_local result
                    
    result
end

def _reduce_522(val, _values, result)
                      raise 'formal argument cannot be a constant'
                    
    result
end

def _reduce_523(val, _values, result)
                      raise 'formal argument cannot be an instance variable'
                    
    result
end

def _reduce_524(val, _values, result)
                      raise 'formal argument cannot be a class variable'
                    
    result
end

def _reduce_525(val, _values, result)
                      raise 'formal argument cannot be a global variable'
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 528 omitted

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = s(:arg, val[0])
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = s(:mlhs, val[0])
                    
    result
end

def _reduce_533(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = val[0].push(s(:restarg, val[3]))
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0].push(s(:restarg, val[3])).concat(val[5][1..-1])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0].push(s(:restarg))
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[0].push(s(:restarg)).concat(val[4][1..-1])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = s(:mlhs, s(:restarg, val[1]))
                    
    result
end

def _reduce_540(val, _values, result)
                      val[3].insert(1, s(:restarg, val[1]))
                      result = val[3]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = s(:mlhs, s(:restarg))
                    
    result
end

def _reduce_542(val, _values, result)
                      val[2].insert(1, s(:restarg))
                      result = val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_544(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = new_assign(new_assignable(new_ident(val[0])), val[1], val[2])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[0]
                      val[0] << val[2]
                    
    result
end

# reduce 548 omitted

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      result = "*#{value(val[1])}".to_sym
                    
    result
end

def _reduce_551(val, _values, result)
                      result = :"*"
                    
    result
end

# reduce 552 omitted

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = "&#{value(val[1])}".to_sym
                    
    result
end

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = []
                    
    result
end

def _reduce_560(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = val[0].concat(val[2])
                    
    result
end

def _reduce_563(val, _values, result)
                      result = [val[0], val[2]]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [new_sym(val[0]), val[1]]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = [s(:sym, source(val[1]).to_sym), val[3]]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = [new_kwsplat(val[1])]
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Opal
