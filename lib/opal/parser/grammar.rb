#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Opal
  class Parser < Racc::Parser


##### State transition tables begin ###

clist = [
'64,65,66,8,52,598,276,568,58,59,-479,276,598,62,276,60,61,63,24,25,67',
'68,-95,467,-103,98,642,23,29,28,91,90,92,93,560,547,18,559,109,677,-102',
'-87,7,42,6,9,95,94,85,51,87,86,88,-98,89,96,97,598,82,83,-95,39,40,-94',
'-100,-70,677,206,207,620,206,207,676,-103,-97,271,560,102,271,562,206',
'207,101,37,598,-102,31,641,598,53,275,55,-95,33,196,275,-103,41,275',
'676,-102,-82,206,207,-99,19,197,-87,-98,567,80,74,76,77,78,79,102,198',
'597,75,81,101,-100,102,-87,597,-94,57,101,-94,54,64,65,66,673,52,38',
'84,205,58,59,-97,-93,-87,62,-101,60,61,63,24,25,67,68,-87,311,-89,840',
'311,23,29,28,91,90,92,93,-94,-91,18,102,-566,597,938,619,101,42,-94',
'-88,95,94,85,51,87,86,88,804,89,96,97,-99,82,83,102,39,40,-93,102,101',
'597,247,102,101,597,302,-95,101,-95,-90,-103,-95,-103,-567,-102,-103',
'-102,211,303,-102,215,216,-98,53,-98,55,-101,-98,-467,630,311,41,758',
'758,-89,-467,-100,-96,-100,19,399,-100,677,677,80,74,76,77,78,79,-92',
'206,207,75,81,-97,-91,-97,758,-88,-97,57,402,-93,54,64,65,66,-566,52',
'38,84,102,58,59,676,676,101,62,-90,60,61,63,24,25,67,68,-92,632,631',
'628,816,23,29,28,91,90,92,93,-93,-89,220,-99,-567,-99,685,630,-99,42',
'-93,74,95,94,85,51,87,86,88,75,89,96,97,-91,82,83,-88,39,40,228,102',
'102,757,757,204,101,101,-89,-101,102,-101,817,-98,-101,101,-566,-90',
'-89,630,211,206,207,215,-567,-92,53,102,55,757,-91,225,101,-88,41,227',
'226,632,631,604,-91,605,219,-88,909,-94,798,80,74,76,77,78,79,-90,413',
'-103,75,81,267,268,952,-92,-100,-90,57,340,269,54,64,65,66,-92,52,38',
'84,337,58,59,632,631,628,62,910,60,61,63,259,260,67,68,560,-564,340',
'562,-96,258,29,28,91,90,92,93,337,426,220,352,351,355,354,630,228,42',
'-479,466,95,94,85,51,87,86,88,263,89,96,97,630,82,83,102,39,40,630,-97',
'101,355,354,843,468,605,203,201,225,-470,-470,338,227,226,202,304,305',
'-470,211,-87,630,215,-564,635,53,469,55,-470,257,-95,255,216,41,500',
'-470,632,631,633,338,102,219,502,-564,504,101,80,261,76,77,78,79,632',
'631,637,75,81,512,632,631,643,-69,199,57,200,-470,54,-470,264,340,-477',
'529,38,84,64,65,66,-477,52,337,632,631,58,59,530,560,531,62,562,60,61',
'63,259,260,67,68,104,105,106,107,108,258,29,28,91,90,92,93,423,547,220',
'355,354,425,424,665,652,42,411,412,95,94,85,51,87,86,88,263,89,96,97',
'311,82,83,997,39,40,228,232,237,238,239,234,236,244,245,240,241,338',
'-93,221,222,653,102,242,243,-89,211,101,-102,215,542,543,53,540,55,-98',
'257,225,255,231,41,227,226,223,224,235,233,229,219,230,206,207,-476',
'80,261,76,77,78,79,-476,280,-91,75,81,311,246,803,-238,-337,-337,57',
'-100,271,54,544,264,-337,-475,548,38,84,64,65,66,-475,52,-472,102,-473',
'58,59,549,101,-472,62,-473,60,61,63,259,260,67,68,355,354,228,-88,311',
'258,29,28,91,90,92,93,563,-97,220,564,-474,867,843,665,-337,42,-337',
'-474,95,94,85,51,87,86,88,263,89,96,97,504,82,83,571,39,40,228,232,237',
'238,239,234,236,244,245,240,241,203,462,221,222,625,574,242,243,463',
'211,575,626,215,867,843,53,578,55,579,257,225,255,231,41,227,226,223',
'224,235,233,229,219,230,581,583,593,80,261,76,77,78,79,594,415,610,75',
'81,611,246,612,636,640,644,57,647,465,54,464,264,-269,649,650,38,84',
'64,65,66,8,52,651,899,900,58,59,901,96,97,62,271,60,61,63,24,25,67,68',
'104,105,106,107,108,23,29,28,91,90,92,93,664,586,18,347,345,344,228',
'346,7,42,228,9,95,94,85,51,87,86,88,228,89,96,97,228,82,83,311,39,40',
'695,586,696,347,345,344,586,346,347,345,344,340,346,586,704,347,345',
'344,706,346,37,337,-82,284,228,707,53,709,55,961,33,347,345,344,41,346',
'553,539,536,589,720,726,19,727,349,537,592,80,74,76,77,78,79,355,354',
'225,75,81,728,227,226,223,224,733,57,747,748,54,64,65,66,750,52,38,84',
'753,58,59,605,761,800,62,-270,60,61,63,259,260,67,68,338,512,535,512',
'538,258,294,298,91,90,92,93,512,819,220,539,550,820,502,504,830,295',
'832,551,95,94,85,51,87,86,88,833,89,96,97,720,82,83,837,330,271,347',
'345,344,340,346,271,539,607,104,105,106,107,108,337,608,586,838,347',
'345,344,292,346,271,289,720,228,53,228,55,465,288,464,843,849,850,851',
'349,325,853,578,856,858,853,352,351,355,354,80,74,76,77,78,79,589,862',
'843,75,81,871,872,592,606,874,609,57,875,-566,54,64,65,66,877,52,299',
'84,886,58,59,578,889,891,62,338,60,61,63,259,260,67,68,893,895,897,-271',
'912,258,294,298,91,90,92,93,913,311,220,539,616,915,916,917,919,295',
'920,614,95,94,85,51,87,86,88,720,89,96,97,922,82,83,-269,330,926,347',
'345,344,340,346,-567,933,935,539,616,941,943,944,337,311,586,746,347',
'345,344,292,346,957,215,-272,963,53,965,55,615,853,538,974,853,853,979',
'349,980,570,985,578,987,989,352,351,355,354,80,74,76,77,78,79,589,991',
'895,75,81,993,1002,864,301,1009,615,57,538,726,54,64,65,66,853,52,299',
'84,1024,58,59,1025,993,993,62,338,60,61,63,259,260,67,68,993,1030,1031',
'993,,258,294,298,91,90,92,93,,,220,-290,-290,,,,,42,,-290,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,961,,347,345,344,586,346,347,345,344',
'340,346,,,,,,,,211,337,,215,228,,53,,55,-290,,-290,,,41,,,539,616,,',
',219,,349,746,,80,74,76,77,78,79,355,354,225,75,81,,227,226,223,224',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,338',
',615,,538,258,294,298,91,90,92,93,,,220,-292,-292,,,,,42,,-292,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,586,,347,345,344,340,346',
',,,,,,,211,337,,215,,,53,,55,-292,,-292,,,41,,,539,1000,,,,219,,349',
'1001,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,259,260,67,68,338,,999,,609,258,294,298,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,228,,,,,,586,,347,345,344,340,346,,,,,242,243,,211,337,,215,,,53',
',55,,,225,,231,41,227,226,223,224,,,229,219,230,349,,,80,74,76,77,78',
'79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,24,25,67,68,338,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340',
'346,,,,,242,243,,211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224',
',,229,19,230,349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64',
'65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,338,,,,,258,29',
'28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82',
'83,,39,40,228,232,237,238,239,234,236,244,245,240,241,-289,-289,221',
'222,,,242,243,-289,211,,,215,-567,,53,,55,,257,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,261,76,77,78,79,,,,75,81,,246,,-238,,',
'57,,-289,54,-289,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,263,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
'245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227',
'226,223,224,235,233,229,219,230,,,,80,261,76,77,78,79,,,,75,81,,246',
'821,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340,346,,,,,242',
'243,,211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224,,,229,19,230',
'349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,24,25,67,68,338,,,,,23,29,28,91,90,92,93,',
',18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,',
',586,,347,345,344,340,346,,,,,242,243,,211,337,,215,,,53,,55,,,225,',
'231,41,227,226,223,224,,,229,19,230,349,,,80,74,76,77,78,79,355,354',
',75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25',
'67,68,338,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340,346,,,,,242',
'243,,211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224,,,,19,,349',
',,80,74,76,77,78,79,355,354,,75,81,102,,,,,101,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,338,,,,,258,294,298,91,90',
'92,93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,330,',
'347,345,344,340,346,,,,,,,,,337,,,,,,,367,,,31,228,,53,,55,,33,,,,,',
'349,,,,,242,243,352,351,355,354,80,74,76,77,78,79,,,225,75,81,,227,226',
'223,224,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338,60,61,63,259,260',
'67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87',
'86,372,,89,96,97,228,82,83,,330,,347,345,344,340,346,,,,,,,242,243,337',
',,,378,,,373,,,215,,225,53,231,55,227,226,223,224,,,,349,,,,,,,352,351',
'355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,-563,-563,-563,,-563',
'299,84,,-563,-563,,,,-563,338,-563,-563,-563,-563,-563,-563,-563,,-563',
',,,-563,-563,-563,-563,-563,-563,-563,,,-563,,,,,,,-563,,,-563,-563',
'-563,-563,-563,-563,-563,-563,-563,-563,-563,,-563,-563,,-563,-563,228',
'232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,-563,,',
'-563,-563,,-563,,-563,,-563,225,-563,231,-563,227,226,223,224,235,233',
'229,-563,230,-563,,,-563,-563,-563,-563,-563,-563,,,,-563,-563,,246',
',,,,-563,,,-563,,-563,,,,-563,-563,-564,-564,-564,,-564,,,,-564,-564',
',,,-564,,-564,-564,-564,-564,-564,-564,-564,,-564,,,,-564,-564,-564',
'-564,-564,-564,-564,,,-564,,,,,,,-564,,,-564,-564,-564,-564,-564,-564',
'-564,-564,-564,-564,-564,,-564,-564,,-564,-564,228,232,237,238,239,234',
'236,244,245,240,241,,,221,222,,,242,243,,-564,,,-564,-564,,-564,,-564',
',-564,225,-564,231,-564,227,226,223,224,235,233,229,-564,230,-564,,',
'-564,-564,-564,-564,-564,-564,,,,-564,-564,,246,,,,,-564,,,-564,,-564',
',,,-564,-564,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,24,25,67,68,,,,',
',23,29,28,91,90,92,93,,,18,,,,,,7,42,6,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,586,,347,345,344,340,346,,,,,,,,37,337,,31,,',
'53,,55,,33,,,,41,,,,,,,,19,,349,,,80,74,76,77,78,79,355,354,,75,81,',
',,,,415,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68',
'338,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,586,,347,345,344,340,346,,,,,,,,211,337,,215',
',,53,,55,,,,,,41,,,,,,,,19,,349,,,80,74,76,77,78,79,355,354,,75,81,',
',,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,338',
',,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233',
'229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93',
',,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232',
'237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,',
',53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76',
'77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
'245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227',
'226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,',
',,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,',
',,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233',
'229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8',
'52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93',
',,18,,,,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,37,,,31',
',,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74',
'76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,',
'62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9',
'95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234',
'236,244,245,240,241,,,221,222,,,242,243,,37,,,31,,,53,,55,,33,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81',
',246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67',
'68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,',
',221,222,,,242,243,,211,,,215,,,53,,55,,431,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29',
'28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243',
',211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230',
',,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,',
',,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,228,232,237',
'238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53',
',55,,257,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,261,76',
'77,78,79,,,,75,81,,246,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,',
',,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,228,232,237',
'238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53',
',55,,257,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,261,76',
'77,78,79,,,,75,81,,246,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,',
',42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239',
'234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225',
',231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,',
'75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241',
',,221,222,,,242,243,,211,,,215,,,53,,55,,431,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29',
'28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,232,237,238,239,234,236,244,245,240,241,,,-587,-587,,,242',
'243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,19',
'230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,',
'58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,-587,-587,,,242,243,,211,,,215,,,53,,55',
',,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,228,-587,-587,-587,-587,234,236,,,-587',
'-587,,,,,,,242,243,,37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224',
'235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'-587,-587,-587,-587,234,236,,,-587,-587,,,,,,,242,243,,211,,,215,,471',
'53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-587,-587,-587,-587,234',
'236,,,-587,-587,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227',
'226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,',
'57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,',
',258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,-587,-587,-587,-587,234,236,,,-587,-587,,,,,,,242',
'243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219',
'230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,',
'58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-587,-587',
'-587,-587,234,236,,,-587,-587,,,,,,,242,243,,211,,,215,,,53,,55,,,225',
',231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260',
'67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,-587,-587,-587,-587,234,236,,,-587,-587',
',,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235',
'233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
'228,232,237,238,239,234,236,,,240,241,,,,,,,242,243,,211,,,215,,,53',
',55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
',240,241,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29',
'28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,255,,41,,,,,',
',,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64',
'65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,521,,55,,257,,255,,41,,,,,,,,219',
',,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,525,53,,55,,257,,255,,41,,,,,,,,219,,,,',
'80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,8,52',
',,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18',
',,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,',
',,,,,,,,,,37,,,284,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,792,,347,345,344,340,346,,,,,,,,,337,,,,',
',,292,,,215,,,53,,55,,,,,,,,349,781,,,,,,352,351,355,354,80,74,76,77',
'78,79,,,,75,81,,,,533,,,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,338',
'60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,284',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,330,,347,345,344,340,346,,,,,,,,,337,,,,,,,292,,,289,,,53,,55',
',,,,,,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,311,52,299,84,,58,59,,,,62,338,60,61,63,259,260,67,68',
',,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,553,,53,,55,,,',
',,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
'8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92',
'93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,',
',,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,792,,347,345,344,340,346,,,,,,,',
',337,,,,,,,585,,,215,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62',
'338,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,',
'57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23',
'29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,',
',,,295,,,95,94,85,51,87,86,372,,89,96,97,,82,83,,330,,347,345,344,340',
'346,,,,,,,,,337,,,,,,,373,,,215,,,53,,55,,,,,,,,349,,,,,,,352,351,355',
'354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58',
'59,,,,62,338,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,',
',,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67',
'68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,',
'41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,-568,-568',
'-568,,-568,38,84,,-568,-568,,,,-568,,-568,-568,-568,-568,-568,-568,-568',
',,,,,-568,-568,-568,-568,-568,-568,-568,,,-568,,,,,,,-568,,,-568,-568',
'-568,-568,-568,-568,-568,-568,-568,-568,-568,,-568,-568,,-568,-568,',
',,,,,,,,,,,,,,,,,,,-568,,,-568,-568,,-568,,-568,,-568,,-568,,-568,,',
',,,,,-568,,,,,-568,-568,-568,-568,-568,-568,,,,-568,-568,,,,,,,-568',
',,-568,,-568,,,,-568,-568,-569,-569,-569,,-569,,,,-569,-569,,,,-569',
',-569,-569,-569,-569,-569,-569,-569,,,,,,-569,-569,-569,-569,-569,-569',
'-569,,,-569,,,,,,,-569,,,-569,-569,-569,-569,-569,-569,-569,-569,-569',
'-569,-569,,-569,-569,,-569,-569,,,,,,,,,,,,,,,,,,,,,-569,,,-569,-569',
',-569,,-569,,-569,,-569,,-569,,,,,,,,-569,,,,,-569,-569,-569,-569,-569',
'-569,,,,-569,-569,,,,,,,-569,,,-569,,-569,,,,-569,-569,64,65,66,,52',
',,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,',
',,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59',
',,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93,,,220,,,,,',
',42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,',
',,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261,76,77,78,79',
',,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,682,',
'255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264',
',,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,255,,41,',
',,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84',
'64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,700,53,,55,,,,255,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68',
',,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,415,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,792,,347',
'345,344,340,346,,,,,,,,,337,,,,,,,292,,,289,,,53,,55,,,,,,,,349,,,,',
',,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,299,84,,58,59,,,,62,338,60,61,63,259,260,67,68,,,,,,258,29,28,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,',
',,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,261',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,792,,347,345,344',
'340,346,,,,,,,,,337,,,,,,,292,,,289,,,53,,55,,,,,,,,349,781,,,,,,352',
'351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299',
'84,,58,59,,,,62,338,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,',
',18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,682,,255,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,',
',,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,',
',54,,264,,,,38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,24,25,67,68',
',,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,792,,347,345,344,340,346,,,,,,,,,337,',
',,,,,585,,,215,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,338,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23',
'29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,',
'82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58',
'59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7',
'42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,',
',,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67',
'68,,,,,,258,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
'263,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257',
',,,41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264',
',,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,',
',,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64',
'65,66,,52,,,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,29,28,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,',
'80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52',
',,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,',
',,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25',
'67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,',
'41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,802,,,,41,,,,,,,,219,,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,',
'23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,',
',,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,',
',,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,',
',,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259',
'260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,',
',,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,',
',,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67',
'68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,',
'41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,',
',,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,',
',,,,,,,,,,,,,,,211,,,215,,,53,,55,,682,,255,,41,,,,,,,,219,,,,,80,261',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97,,82,83,,39,40,,,,,,,,,',
',,,,,,,,,,,211,,,215,,,53,,55,,,,255,,41,,,,,,,,219,,,,,80,261,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,,264,,,,38,84,64,65,66,8,52,,,,58,59,,',
',62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,',
'9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37',
',,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,',
',,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,',
'220,,,,,,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,,,,,,,,,,,,,',
',,,,,,,,,292,,,289,,,53,,55,,,,,,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,,60,61,63,259,260',
'67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,295,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,,,,292,,,289,,,53,,55,,,',
',,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'299,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,431,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68',
',,,,,23,29,28,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38',
'84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18',
',,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,',
',,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,',
',23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,',
',,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,257,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,',
',,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,',
',,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,',
',,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24',
'25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,',
',,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,255',
',41,,,,,,,,219,,,,,80,261,76,77,78,79,,,,75,81,,,,,,,57,,,54,,264,,',
',38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29',
'28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,259,260,67,68,,,,,,258,294,298,91,90,92,93,,,220,,,',
',,,295,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,',
',,970,,,215,,,53,,55,,,,,,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75,81,,',
',,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,,60,61,63,259,260,67,68',
',,,,,258,294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,682,',
',,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
'8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92',
'93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,',
',,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'294,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,682,,255,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55',
',33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,8,52,38,84,,58,59,,,,62,,60,61,63,24,25,67,68,,,,,,23,29,28,91',
'90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62',
',60,61,63,24,25,67,68,,,,,,23,29,28,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,259,260,67,68,,,,,,258',
'29,28,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,263,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,257,,,,41,,,,',
',,,219,,,,-570,80,261,76,77,78,79,-570,-570,-570,75,81,,-570,-570,,-570',
',57,,,54,,264,,-570,,38,84,,,,,,,,-570,-570,,-570,-570,-570,-570,-570',
',,,,,,,,,,,,,,,,,,,,,-570,-570,-570,-570,-570,-570,-570,-570,-570,-570',
'-570,-570,-570,-570,-570,,,-570,-570,-570,,658,,,,-570,,,,,,-570,,-570',
',-570,-570,-570,-570,-570,-570,-570,,-570,-570,-570,,,,,,,,,,,,,-570',
'-570,,-90,,-570,,-289,-570,,-570,,,-99,-289,-289,-289,,,,-289,-289,',
'-289,,,,,,,,,,,,,,,,,,,,-289,-289,,-289,-289,-289,-289,-289,,,,,,,,',
',,,,,,,,,,,,,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,,,-289,-289,-289,,661,,,,-289,,,,,,-289,,-289,,-289',
'-289,-289,-289,-289,-289,-289,,-289,,-289,,,,,,,,,,,,,-289,-289,,-92',
',-289,,-570,-289,,-289,,,-101,-570,-570,-570,,,-570,-570,-570,,-570',
',,,,,,,,-570,-570,-570,,,,,,,,,-570,-570,,-570,-570,-570,-570,-570,',
',,,,,,,,,,,,,,,,,,,,-570,-570,-570,-570,-570,-570,-570,-570,-570,-570',
'-570,-570,-570,-570,-570,,,-570,-570,-570,,818,-570,,,-570,,-570,,-570',
',-570,,-570,,-570,-570,-570,-570,-570,-570,-570,,-570,-570,-570,,,,',
',,,,,,,,-570,-570,-570,-570,,-570,,-289,-570,,-570,,,-99,-289,-289,-289',
',,-289,-289,-289,,-289,,,,,,,,,,-289,-289,,,,,,,,,-289,-289,,-289,-289',
'-289,-289,-289,,,,,,,,,,,,,,,,,,,,,,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,,,-289,-289,-289,,661,-289,',
',-289,,-289,,-289,,-289,,-289,,-289,-289,-289,-289,-289,-289,-289,,-289',
',-289,,,,,,,,,,,,,-289,-289,-289,-289,,-289,,-403,-289,,-289,,,-101',
'-403,-403,-403,,,-403,-403,-403,,-403,,,,,,,,,-403,-403,-403,,,,,,,',
',-403,-403,,-403,-403,-403,-403,-403,,,,,,,,,,,,,,,,,,,,,,-403,-403',
'-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,,,-403',
'-403,-403,,,-403,,271,-403,,-403,,-403,,-403,,-403,,-403,-403,-403,-403',
'-403,-403,-403,,-403,-403,-403,,,,,,,,,,,,,-403,-403,-403,-403,-298',
'-403,,,-403,,-403,-298,-298,-298,,,-298,-298,-298,,-298,,,,,,,,,,-298',
'-298,,,,,,,,,-298,-298,,-298,-298,-298,-298,-298,,,,,,,,,,,,,,,,,,,',
',,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,,,-298,-298,-298,,,-298,,280,-298,,-298,,-298,,-298,,-298,,-298',
'-298,-298,-298,-298,-298,-298,,-298,,-298,,,,,,,,,,,,,-298,-298,-298',
'-298,-284,-298,,,-298,,-298,-284,-284,-284,,,-284,-284,-284,,-284,,',
',,,,,,,-284,-284,-284,,,,,,,,-284,-284,,-284,-284,-284,-284,-284,,,',
',,,,,,,,,,,,,,,,,,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,,,-284,-284,-284,,,-284,,,-284,,-284,,-284',
',-284,,-284,,-284,-284,-284,-284,-284,-284,-284,,-284,,-284,,,,,,,,',
',,,,-284,-284,-284,-284,-586,-284,,-284,-284,,-284,-586,-586,-586,,',
'-586,-586,-586,,-586,,,,,,,,,-586,-586,-586,,,,,,,,,-586,-586,,-586',
'-586,-586,-586,-586,,,,,,,,,,,,,,,,,,,,,,-586,-586,-586,-586,-586,-586',
'-586,-586,-586,-586,-586,-586,-586,-586,-586,,,-586,-586,-586,,,-586',
',271,-586,,-586,,-586,,-586,,-586,,-586,-586,-586,-586,-586,-586,-586',
',-586,-586,-586,,,,,,,,,,,,,-586,-586,-586,-586,-586,-586,,,-586,,-586',
'-586,-586,-586,,,-586,-586,-586,,-586,,,,,,,,,-586,-586,-586,,,,,,,',
',-586,-586,,-586,-586,-586,-586,-586,,,,,,,,,,,,,,,,,,,,,,-586,-586',
'-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,,,-586',
'-586,-586,,,-586,,271,-586,,-586,,-586,,-586,,-586,,-586,-586,-586,-586',
'-586,-586,-586,,-586,-586,-586,,,,,,,,,,,,,-586,-586,-586,-586,-586',
'-586,,,-586,,-586,-586,-586,-586,,,-586,-586,-586,,-586,,,,,,,,,,-586',
',,,,,,,,,-586,-586,,-586,-586,-586,-586,-586,,,,,,,,,,,,-586,,,,,,,-586',
'-586,-586,,,-586,-586,-586,,-586,,,,,-586,-586,,,,-586,,,-586,,,,,271',
'-586,-586,-586,,-586,-586,-586,-586,-586,,,,,,,,,,,,-586,,,,,,,,,,,',
',-586,,-586,,,-586,,,-586,-586,,-586,,,,,-586,,-586,-586,-586,271,-586',
'-586,-586,-586,,-586,,,,,,,,,,-586,,,,,-586,,,,,-586,-586,,-586,-586',
'-586,-586,-586,-586,,-586,,,-586,443,447,,,445,,,,,,,,,143,144,140,122',
'123,124,131,128,130,,,125,126,-586,-586,,,145,146,132,133,-586,,,,,271',
'-586,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,,-586',
'147,,,,,,,,,,,,-586,,-586,,,-586,157,168,158,181,154,174,164,163,189',
'192,179,162,161,156,182,190,191,166,155,169,173,175,167,160,,,,176,183',
'178,177,170,180,165,153,172,171,184,185,186,187,188,152,159,150,151',
'148,149,112,114,111,,113,,,,,,,,,143,144,140,122,123,124,131,128,130',
',,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134',
'135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174',
'164,163,189,192,179,162,161,156,182,190,191,166,155,169,173,175,167',
'160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187,188,152',
'159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123',
'124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121',
'142,139,138,134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168',
'158,181,154,174,164,163,189,192,179,162,161,156,182,190,191,166,155',
'169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185',
'186,187,188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,193,,,,,,,,,',
'81,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190,191',
'166,155,169,173,175,167,160,,,,176,183,178,387,386,388,385,153,172,171',
'184,185,186,187,188,152,159,150,151,383,384,381,114,87,86,382,,89,,',
',,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133',
',,,,,392,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,',
',147,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190',
'191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172',
'171,184,185,186,187,188,152,159,150,151,148,149,112,114,409,408,113',
',410,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146',
'132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141',
'120,,,147,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182',
'190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153',
'172,171,184,185,186,187,188,152,159,150,151,148,149,112,114,409,408',
'113,,410,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145',
'146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119',
'141,120,,,147,157,168,158,181,154,174,164,163,189,192,179,162,161,156',
'182,190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165',
'153,172,171,184,185,186,187,188,152,159,150,151,148,149,112,114,,,113',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'437,441,147,,438,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,450,441,147,,451,,',
',,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,666,441,147,,667,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,668,447,147,,669,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,711,441,147,,712',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'714,447,147,,715,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,666,441,147,,667,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,271,,,,,',
'137,136,,121,142,139,138,134,135,129,127,119,141,120,668,447,147,,669',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'765,441,147,,766,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,767,447,147,,768,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,773,447,147,,771,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,450,441,147,,451,,',
',,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,271,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'773,447,147,,861,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,1018,441,147,,1019,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,271,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,1020,447,147,,1021,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,,,147' ]
        racc_action_table = arr = ::Array.new(26038, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,0,0,358,56,324,0,0,210,27,359,0,296,0,0,0,0,0,0,0,365,212,368',
'1,403,0,0,0,0,0,0,0,316,466,0,316,6,498,610,290,0,0,0,0,0,0,0,0,0,0',
'0,765,0,0,0,873,0,0,210,0,0,293,766,706,512,313,313,377,627,627,498',
'212,874,27,317,3,296,317,470,470,3,0,925,466,0,403,934,0,56,0,968,0',
'9,27,971,0,296,512,1002,706,724,724,767,0,11,290,1018,324,0,0,0,0,0',
'0,358,12,358,0,0,358,1019,359,365,359,368,0,359,293,0,18,18,18,470,18',
'0,0,15,18,18,1031,610,290,18,768,18,18,18,18,18,18,18,290,313,765,724',
'627,18,18,18,18,18,18,18,293,766,18,873,767,873,873,377,873,18,293,874',
'18,18,18,18,18,18,18,651,18,18,18,1020,18,18,377,18,18,540,925,377,925',
'21,934,925,934,35,968,934,968,767,971,968,971,768,1002,971,1002,18,37',
'1002,18,18,1018,18,1018,18,1021,1018,381,506,42,18,600,601,711,381,1019',
'651,1019,18,78,1019,522,523,18,18,18,18,18,18,768,778,778,18,18,1031',
'712,1031,876,837,1031,18,79,540,18,19,19,19,1020,19,18,18,281,19,19',
'522,523,281,19,714,19,19,19,19,19,19,19,715,506,506,506,666,19,19,19',
'19,19,19,19,540,711,19,1020,1021,1020,506,638,1020,19,540,72,19,19,19',
'19,19,19,19,72,19,19,19,712,19,19,837,19,19,474,600,601,600,601,14,600',
'601,711,1021,778,1021,667,666,1021,778,714,714,711,394,19,16,16,19,715',
'715,19,876,19,876,712,474,876,837,19,474,474,638,638,363,712,363,19',
'837,819,14,638,19,19,19,19,19,19,714,98,14,19,19,26,26,891,715,667,714',
'19,891,26,19,23,23,23,715,23,19,19,891,23,23,394,394,394,23,820,23,23',
'23,23,23,23,23,320,372,575,320,819,23,23,23,23,23,23,23,575,194,23,891',
'891,891,891,396,475,23,36,211,23,23,23,23,23,23,23,23,23,23,23,400,23',
'23,362,23,23,405,820,362,575,575,982,213,982,13,13,475,372,372,891,475',
'475,13,38,38,372,23,36,398,23,372,398,23,214,23,382,23,36,23,220,23',
'252,382,396,396,396,575,620,23,253,372,256,620,23,23,23,23,23,23,400',
'400,400,23,23,270,405,405,405,283,13,23,13,372,23,372,23,886,383,285',
'23,23,24,24,24,383,24,886,398,398,24,24,286,729,287,24,729,24,24,24',
'24,24,24,24,5,5,5,5,5,24,24,24,24,24,24,24,111,303,24,886,886,111,111',
'458,437,24,84,84,24,24,24,24,24,24,24,24,24,24,24,959,24,24,959,24,24',
'458,458,458,458,458,458,458,458,458,458,458,886,303,458,458,438,776',
'458,458,437,24,776,303,24,299,299,24,292,24,437,24,458,24,458,24,458',
'458,458,458,458,458,458,24,458,357,357,384,24,24,24,24,24,24,384,294',
'438,24,24,295,458,650,458,43,43,24,438,298,24,300,24,43,385,304,24,24',
'25,25,25,385,25,386,782,387,25,25,305,782,386,25,387,25,25,25,25,25',
'25,25,578,578,308,650,315,25,25,25,25,25,25,25,318,650,25,319,388,752',
'752,672,43,25,43,388,25,25,25,25,25,25,25,25,25,25,25,321,25,25,329',
'25,25,672,672,672,672,672,672,672,672,672,672,672,209,209,672,672,390',
'330,672,672,209,25,331,390,25,1004,1004,25,332,25,334,25,672,25,672',
'25,672,672,672,672,672,672,672,25,672,335,339,353,25,25,25,25,25,25',
'356,364,367,25,25,369,672,373,399,402,421,25,427,209,25,209,25,429,432',
'435,25,25,31,31,31,31,31,436,796,796,31,31,796,796,796,31,444,31,31',
'31,31,31,31,31,282,282,282,282,282,31,31,31,31,31,31,31,455,592,31,592',
'592,592,476,592,31,31,477,31,31,31,31,31,31,31,31,478,31,31,31,479,31',
'31,514,31,31,517,349,518,349,349,349,581,349,581,581,581,581,581,864',
'524,864,864,864,528,864,31,581,529,31,493,532,31,534,31,912,31,912,912',
'912,31,912,541,291,291,349,545,554,31,555,581,291,349,31,31,31,31,31',
'31,581,581,493,31,31,556,493,493,493,493,569,31,585,587,31,32,32,32',
'591,32,31,31,596,32,32,602,603,642,32,648,32,32,32,32,32,32,32,581,654',
'291,659,291,32,32,32,32,32,32,32,662,670,32,306,306,671,679,681,694',
'32,698,306,32,32,32,32,32,32,32,701,32,32,32,708,32,32,710,57,713,57',
'57,57,57,57,716,366,366,705,705,705,705,705,57,366,589,717,589,589,589',
'32,589,718,32,719,722,32,723,32,306,32,306,725,731,732,736,57,57,737',
'739,742,743,745,57,57,57,57,32,32,32,32,32,32,589,749,754,32,32,760',
'762,589,366,764,366,32,769,773,32,33,33,33,774,33,32,32,785,33,33,786',
'788,789,33,57,33,33,33,33,33,33,33,790,792,795,801,822,33,33,33,33,33',
'33,33,823,824,33,375,375,825,829,831,834,33,835,375,33,33,33,33,33,33',
'33,836,33,33,33,841,33,33,844,325,845,325,325,325,325,325,861,865,868',
'584,584,878,881,882,325,883,750,584,750,750,750,33,750,903,33,904,914',
'33,918,33,375,928,375,929,930,931,936,325,937,325,945,947,949,950,325',
'325,325,325,33,33,33,33,33,33,750,951,952,33,33,954,970,750,33,984,584',
'33,584,998,33,39,39,39,1003,39,33,33,1008,39,39,1010,1011,1012,39,325',
'39,39,39,39,39,39,39,1013,1014,1017,1032,,39,39,39,39,39,39,39,,,39',
'612,612,,,,,39,,612,39,39,39,39,39,39,39,,39,39,39,,39,39,,39,39,,997',
',997,997,997,851,997,851,851,851,851,851,,,,,,,,39,851,,39,494,,39,',
'39,612,,612,,,39,,,738,738,,,,39,,851,738,,39,39,39,39,39,39,851,851',
'494,39,39,,494,494,494,494,,39,,,39,40,40,40,,40,39,39,,40,40,,,,40',
',40,40,40,40,40,40,40,851,,738,,738,40,40,40,40,40,40,40,,,40,875,875',
',,,,40,,875,40,40,40,40,40,40,40,,40,40,40,,40,40,,40,40,,,,,,,853,',
'853,853,853,853,853,,,,,,,,40,853,,40,,,40,,40,875,,875,,,40,,,969,969',
',,,40,,853,969,,40,40,40,40,40,40,853,853,,40,40,,,,,,,40,,,40,41,41',
'41,,41,40,40,,41,41,,,,41,,41,41,41,41,41,41,41,853,,969,,969,41,41',
'41,41,41,41,41,,,41,,,,,,,41,,,41,41,41,41,41,41,41,,41,41,41,,41,41',
',41,41,484,,,,,,858,,858,858,858,858,858,,,,,484,484,,41,858,,41,,,41',
',41,,,484,,484,41,484,484,484,484,,,484,41,484,858,,,41,41,41,41,41',
'41,858,858,,41,41,,,,,,,41,,,41,53,53,53,,53,41,41,,53,53,,,,53,,53',
'53,53,53,53,53,53,858,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53',
'53,53,53,53,53,,53,53,53,,53,53,,53,53,485,,,,,,893,,893,893,893,893',
'893,,,,,485,485,,53,893,,53,,,53,,53,,,485,,485,53,485,485,485,485,',
',485,53,485,893,,,53,53,53,53,53,53,893,893,,53,53,,,,,,,53,,,53,54',
'54,54,,54,53,53,,54,54,,,,54,,54,54,54,54,54,54,54,893,,,,,54,54,54',
'54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,,54,54',
',54,54,697,697,697,697,697,697,697,697,697,697,697,771,771,697,697,',
',697,697,771,54,,,54,771,,54,,54,,54,697,,697,54,697,697,697,697,697',
'697,697,54,697,,,,54,54,54,54,54,54,,,,54,54,,697,,697,,,54,,771,54',
'771,54,,,,54,54,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,',
',,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55',
'55,,55,55,,55,55,674,674,674,674,674,674,674,674,674,674,674,,,674,674',
',,674,674,,55,,,55,,,55,,55,,,674,,674,55,674,674,674,674,674,674,674',
'55,674,,,,55,55,55,55,55,55,,,,55,55,,674,674,,,,55,,,55,,55,,,,55,55',
'58,58,58,,58,,,,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58',
'58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58,,58,58,58,,58,58,,58,58,486',
',,,,,974,,974,974,974,974,974,,,,,486,486,,58,974,,58,,,58,,58,,,486',
',486,58,486,486,486,486,,,486,58,486,974,,,58,58,58,58,58,58,974,974',
',58,58,,,,,,,58,,,58,59,59,59,,59,58,58,,59,59,,,,59,,59,59,59,59,59',
'59,59,974,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59',
'59,,59,59,59,,59,59,,59,59,487,,,,,,989,,989,989,989,989,989,,,,,487',
'487,,59,989,,59,,,59,,59,,,487,,487,59,487,487,487,487,,,487,59,487',
'989,,,59,59,59,59,59,59,989,989,,59,59,,,,,,,59,,,59,62,62,62,,62,59',
'59,,62,62,,,,62,,62,62,62,62,62,62,62,989,,,,,62,62,62,62,62,62,62,',
',62,,,,,,,62,,,62,62,62,62,62,62,62,,62,62,62,,62,62,,62,62,480,,,,',
',991,,991,991,991,991,991,,,,,480,480,,62,991,,62,,,62,,62,,,480,,480',
'62,480,480,480,480,,,,62,,991,,,62,62,62,62,62,62,991,991,,62,62,62',
',,,,62,62,,,62,63,63,63,,63,62,62,,63,63,,,,63,,63,63,63,63,63,63,63',
'991,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,,63',
'63,63,,63,63,,571,,571,571,571,571,571,,,,,,,,,571,,,,,,,63,,,63,482',
',63,,63,,63,,,,,,571,,,,,482,482,571,571,571,571,63,63,63,63,63,63,',
',482,63,63,,482,482,482,482,,63,,,63,64,64,64,,64,63,63,,64,64,,,,64',
'571,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64',
'64,64,64,64,64,64,,64,64,64,481,64,64,,579,,579,579,579,579,579,,,,',
',,481,481,579,,,,64,,,64,,,64,,481,64,481,64,481,481,481,481,,,,579',
',,,,,,579,579,579,579,64,64,64,64,64,64,,,,64,64,,,,,,,64,,,64,85,85',
'85,,85,64,64,,85,85,,,,85,579,85,85,85,85,85,85,85,,85,,,,85,85,85,85',
'85,85,85,,,85,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,85,,85,85,,85',
'85,20,20,20,20,20,20,20,20,20,20,20,,,20,20,,,20,20,,85,,,85,85,,85',
',85,,85,20,85,20,85,20,20,20,20,20,20,20,85,20,85,,,85,85,85,85,85,85',
',,,85,85,,20,,,,,85,,,85,,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,,88',
'88,88,88,88,88,88,,88,,,,88,88,88,88,88,88,88,,,88,,,,,,,88,,,88,88',
'88,88,88,88,88,88,88,88,88,,88,88,,88,88,250,250,250,250,250,250,250',
'250,250,250,250,,,250,250,,,250,250,,88,,,88,88,,88,,88,,88,250,88,250',
'88,250,250,250,250,250,250,250,88,250,88,,,88,88,88,88,88,88,,,,88,88',
',250,,,,,88,,,88,,88,,,,88,88,100,100,100,100,100,,,,100,100,,,,100',
',100,100,100,100,100,100,100,,,,,,100,100,100,100,100,100,100,,,100',
',,,,,100,100,100,100,100,100,100,100,100,100,100,,100,100,100,,100,100',
',100,100,,,,,,,993,,993,993,993,993,993,,,,,,,,100,993,,100,,,100,,100',
',100,,,,100,,,,,,,,100,,993,,,100,100,100,100,100,100,993,993,,100,100',
',,,,,100,100,,,100,104,104,104,,104,100,100,,104,104,,,,104,,104,104',
'104,104,104,104,104,993,,,,,104,104,104,104,104,104,104,,,104,,,,,,',
'104,,,104,104,104,104,104,104,104,,104,104,104,,104,104,,104,104,,,',
',,,1025,,1025,1025,1025,1025,1025,,,,,,,,104,1025,,104,,,104,,104,,',
',,,104,,,,,,,,104,,1025,,,104,104,104,104,104,104,1025,1025,,104,104',
',,,,,,104,,,104,105,105,105,,105,104,104,,105,105,,,,105,,105,105,105',
'105,105,105,105,1025,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105',
',,105,105,105,105,105,105,105,,105,105,105,,105,105,,105,105,434,434',
'434,434,434,434,434,434,434,434,434,,,434,434,,,434,434,,105,,,105,',
',105,,105,,,434,,434,105,434,434,434,434,434,434,434,105,434,,,,105',
'105,105,105,105,105,,,,105,105,,434,,,,,105,,,105,106,106,106,,106,105',
'105,,106,106,,,,106,,106,106,106,106,106,106,106,,,,,,106,106,106,106',
'106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,,106,106,106',
',106,106,,106,106,453,453,453,453,453,453,453,453,453,453,453,,,453',
'453,,,453,453,,106,,,106,,,106,,106,,,453,,453,106,453,453,453,453,453',
'453,453,106,453,,,,106,106,106,106,106,106,,,,106,106,,453,,,,,106,',
',106,107,107,107,,107,106,106,,107,107,,,,107,,107,107,107,107,107,107',
'107,,,,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107',
'107,107,107,,107,107,107,,107,107,,107,107,552,552,552,552,552,552,552',
'552,552,552,552,,,552,552,,,552,552,,107,,,107,,,107,,107,,,552,,552',
'107,552,552,552,552,552,552,552,107,552,,,,107,107,107,107,107,107,',
',,107,107,,552,,,,,107,,,107,108,108,108,108,108,107,107,,108,108,,',
',108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108,',
',108,,,,,,108,108,,108,108,108,108,108,108,108,108,,108,108,108,,108',
'108,,108,108,721,721,721,721,721,721,721,721,721,721,721,,,721,721,',
',721,721,,108,,,108,,,108,,108,,108,721,,721,108,721,721,721,721,721',
'721,721,108,721,,,,108,108,108,108,108,108,,,,108,108,,721,,,,,108,',
',108,109,109,109,109,109,108,108,,109,109,,,,109,,109,109,109,109,109',
'109,109,,,,,,109,109,109,109,109,109,109,,,109,,,,,,109,109,109,109',
'109,109,109,109,109,109,109,,109,109,109,,109,109,,109,109,806,806,806',
'806,806,806,806,806,806,806,806,,,806,806,,,806,806,,109,,,109,,,109',
',109,,109,806,,806,109,806,806,806,806,806,806,806,109,806,,,,109,109',
'109,109,109,109,,,,109,109,,806,,,,,109,,,109,196,196,196,196,196,109',
'109,,196,196,,,,196,,196,196,196,196,196,196,196,,,,,,196,196,196,196',
'196,196,196,,,196,,,,,,196,196,,196,196,196,196,196,196,196,196,,196',
'196,196,,196,196,,196,196,808,808,808,808,808,808,808,808,808,808,808',
',,808,808,,,808,808,,196,,,196,,,196,,196,,196,808,,808,196,808,808',
'808,808,808,808,808,196,808,,,,196,196,196,196,196,196,,,,196,196,,808',
',,,,196,,,196,197,197,197,,197,196,196,,197,197,,,,197,,197,197,197',
'197,197,197,197,,,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197',
'197,197,197,197,197,197,,197,197,197,,197,197,,197,197,811,811,811,811',
'811,811,811,811,811,811,811,,,811,811,,,811,811,,197,,,197,,,197,,197',
',197,811,,811,197,811,811,811,811,811,811,811,197,811,,,,197,197,197',
'197,197,197,,,,197,197,,811,,,,,197,,,197,198,198,198,,198,197,197,',
'198,198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198,198,198,198',
'198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,,198,198,198,',
'198,198,,198,198,813,813,813,813,813,813,813,813,813,813,813,,,813,813',
',,813,813,,198,,,198,,,198,,198,,,813,,813,198,813,813,813,813,813,813',
'813,198,813,,,,198,198,198,198,198,198,,,,198,198,,813,,,,,198,,,198',
'199,199,199,,199,198,198,,199,199,,,,199,,199,199,199,199,199,199,199',
',,,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199',
'199,199,199,199,199,199,,199,199,,199,199,815,815,815,815,815,815,815',
'815,815,815,815,,,815,815,,,815,815,,199,,,199,,,199,,199,,199,815,',
'815,199,815,815,815,815,815,815,815,199,815,,,,199,199,199,199,199,199',
',,,199,199,,815,,,,,199,,,199,,199,,,,199,199,200,200,200,,200,,,,200',
'200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200,200,200,200',
'200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,200,200,200,,200',
'200,,200,200,906,906,906,906,906,906,906,906,906,906,906,,,906,906,',
',906,906,,200,,,200,,,200,,200,,200,906,,906,200,906,906,906,906,906',
'906,906,200,906,,,,200,200,200,200,200,200,,,,200,200,,906,,,,,200,',
',200,,200,,,,200,200,204,204,204,,204,,,,204,204,,,,204,,204,204,204',
'204,204,204,204,,,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204',
'204,204,204,204,204,204,,204,204,204,,204,204,,204,204,908,908,908,908',
'908,908,908,908,908,908,908,,,908,908,,,908,908,,204,,,204,,,204,,204',
',,908,,908,204,908,908,908,908,908,908,908,204,908,,,,204,204,204,204',
'204,204,,,,204,204,,908,,,,,204,,,204,205,205,205,,205,204,204,,205',
'205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205,205,205,205,205',
'205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,,205,205,205,,205',
'205,,205,205,958,958,958,958,958,958,958,958,958,958,958,,,958,958,',
',958,958,,205,,,205,,,205,,205,,205,958,,958,205,958,958,958,958,958',
'958,958,205,958,,,,205,205,205,205,205,205,,,,205,205,,958,,,,,205,',
',205,206,206,206,,206,205,205,,206,206,,,,206,,206,206,206,206,206,206',
'206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206',
'206,206,206,,206,206,206,,206,206,,206,206,472,472,472,472,472,472,472',
'472,472,472,472,,,472,472,,,472,472,,206,,,206,,,206,,206,,,472,,472',
'206,472,472,472,472,472,472,472,206,472,,,,206,206,206,206,206,206,',
',,206,206,,,,,,,206,,,206,207,207,207,,207,206,206,,207,207,,,,207,',
'207,207,207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207,',
',,,,,207,,,207,207,207,207,207,207,207,,207,207,207,,207,207,,207,207',
'473,473,473,473,473,473,473,473,473,473,473,,,473,473,,,473,473,,207',
',,207,,,207,,207,,,473,,473,207,473,473,473,473,473,473,473,207,473',
',,,207,207,207,207,207,207,,,,207,207,,,,,,,207,,,207,215,215,215,215',
'215,207,207,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,215,215,,215,215,215,215,215,215,215',
'215,,215,215,215,,215,215,,215,215,483,483,483,483,483,483,483,,,483',
'483,,,,,,,483,483,,215,,,215,,,215,,215,,215,483,,483,215,483,483,483',
'483,483,483,483,215,483,,,,215,215,215,215,215,215,,,,215,215,,,,,,',
'215,,,215,216,216,216,,216,215,215,,216,216,,,,216,,216,216,216,216',
'216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,488,488,488,488,488',
'488,488,,,488,488,,,,,,,488,488,,216,,,216,,216,216,,216,,,488,,488',
'216,488,488,488,488,488,488,488,216,488,,,,216,216,216,216,216,216,',
',,216,216,,,,,,,216,,,216,219,219,219,,219,216,216,,219,219,,,,219,',
'219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,',
',,,,,219,,,219,219,219,219,219,219,219,,219,219,219,,219,219,,219,219',
'489,489,489,489,489,489,489,,,489,489,,,,,,,489,489,,219,,,219,,,219',
',219,,,489,,489,219,489,489,489,489,489,489,489,219,489,,,,219,219,219',
'219,219,219,,,,219,219,,,,,,,219,,,219,221,221,221,,221,219,219,,221',
'221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221',
'221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,,221,221,221,,221',
'221,,221,221,490,490,490,490,490,490,490,,,490,490,,,,,,,490,490,,221',
',,221,,,221,,221,,,490,,490,221,490,490,490,490,490,490,490,221,490',
',,,221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,222,222,222,,222',
'221,221,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222',
'222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,,222,222',
'222,,222,222,,222,222,491,491,491,491,491,491,491,,,491,491,,,,,,,491',
'491,,222,,,222,,,222,,222,,,491,,491,222,491,491,491,491,491,491,491',
'222,491,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,,,222,223,223',
'223,,223,222,222,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223',
'223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223',
',223,223,223,,223,223,,223,223,492,492,492,492,492,492,492,,,492,492',
',,,,,,492,492,,223,,,223,,,223,,223,,,492,,492,223,492,492,492,492,492',
'492,492,223,492,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223',
'224,224,224,,224,223,223,,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,,224,224,224,,224,224,,224,224,495,495,495,495,495,495,495,',
',495,495,,,,,,,495,495,,224,,,224,,,224,,224,,,495,,495,224,495,495',
'495,495,495,495,495,224,495,,,,224,224,224,224,224,224,,,,224,224,,',
',,,,224,,,224,225,225,225,,225,224,224,,225,225,,,,225,,225,225,225',
'225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225',
'225,225,225,225,225,225,,225,225,225,,225,225,,225,225,496,496,496,496',
'496,496,496,496,,496,496,,,,,,,496,496,,225,,,225,,,225,,225,,,496,',
'496,225,496,496,496,496,496,496,496,225,496,,,,225,225,225,225,225,225',
',,,225,225,,,,,,,225,,,225,226,226,226,,226,225,225,,226,226,,,,226',
',226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226',
',,,,,,226,,,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226',
',,,,,,,,,,,,,,,,,,,,226,,,226,,,226,,226,,,,,,226,,,,,,,,226,,,,,226',
'226,226,226,226,226,,,,226,226,,,,,,,226,,,226,227,227,227,,227,226',
'226,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227',
'227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,,227,227,227',
',227,227,,227,227,,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,,227,,,,,,227',
',,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,228',
'228,228,,228,227,227,,228,228,,,,228,,228,228,228,228,228,228,228,,',
',,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228',
'228,228,,228,228,228,,228,228,,228,228,,,,,,,,,,,,,,,,,,,,,228,,,228',
',,228,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228',
',,,,,,228,,,228,229,229,229,,229,228,228,,229,229,,,,229,,229,229,229',
'229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229',
'229,229,229,229,229,229,,229,229,229,,229,229,,229,229,,,,,,,,,,,,,',
',,,,,,,229,,,229,,,229,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229',
'229,229,,,,229,229,,,,,,,229,,,229,230,230,230,,230,229,229,,230,230',
',,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230',
',,230,,,,,,,230,,,230,230,230,230,230,230,230,,230,230,230,,230,230',
',230,230,,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,,230,,,,,,230,,,,,,,,230',
',,,,230,230,230,230,230,230,,,,230,230,,,,,,,230,,,230,231,231,231,',
'231,230,230,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231',
'231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,,231',
'231,231,,231,231,,231,231,,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,,231,',
',,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231',
',,231,232,232,232,,232,231,231,,232,232,,,,232,,232,232,232,232,232',
'232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232',
'232,232,232,232,,232,232,232,,232,232,,232,232,,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,',
'232,232,,,,,,,232,,,232,233,233,233,,233,232,232,,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,,',
',,,,,,,,,,,,,,,,,,233,,,233,,,233,,233,,,,,,233,,,,,,,,233,,,,,233,233',
'233,233,233,233,,,,233,233,,,,,,,233,,,233,234,234,234,,234,233,233',
',234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234',
'234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,,234,234,234,',
'234,234,,234,234,,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,,234,,,,,,234,',
',,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,235',
'235,235,,235,234,234,,235,235,,,,235,,235,235,235,235,235,235,235,,',
',,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,,235,235,235,,235,235,,235,235,,,,,,,,,,,,,,,,,,,,,235,,,235',
',,235,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235',
',,,,,,235,,,235,236,236,236,,236,235,235,,236,236,,,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236',
'236,236,236,236,236,236,,236,236,236,,236,236,,236,236,,,,,,,,,,,,,',
',,,,,,,236,,,236,,,236,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236',
'236,236,,,,236,236,,,,,,,236,,,236,237,237,237,,237,236,236,,237,237',
',,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237',
',,237,,,,,,,237,,,237,237,237,237,237,237,237,,237,237,237,,237,237',
',237,237,,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,,237,,,,,,237,,,,,,,,237',
',,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,,,237,238,238,238,',
'238,237,237,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,,238',
'238,238,,238,238,,238,238,,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,,238,',
',,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238',
',,238,239,239,239,,239,238,238,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,,239,239,239,,239,239,,239,239,,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,',
'239,239,,,,,,,239,,,239,240,240,240,,240,239,239,,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,,240,240,240,,240,240,,240,240,,',
',,,,,,,,,,,,,,,,,,240,,,240,,,240,,240,,,,,,240,,,,,,,,240,,,,,240,240',
'240,240,240,240,,,,240,240,,,,,,,240,,,240,241,241,241,,241,240,240',
',241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,,241,241,241,',
'241,241,,241,241,,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,,241,,,,,,241,',
',,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,242',
'242,242,,242,241,241,,242,242,,,,242,,242,242,242,242,242,242,242,,',
',,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,,242,242,242,,242,242,,242,242,,,,,,,,,,,,,,,,,,,,,242,,,242',
',,242,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242',
',,,,,,242,,,242,243,243,243,,243,242,242,,243,243,,,,243,,243,243,243',
'243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243',
'243,243,243,243,243,243,,243,243,243,,243,243,,243,243,,,,,,,,,,,,,',
',,,,,,,243,,,243,,,243,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243',
'243,243,,,,243,243,,,,,,,243,,,243,244,244,244,,244,243,243,,244,244',
',,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244',
',,244,,,,,,,244,,,244,244,244,244,244,244,244,,244,244,244,,244,244',
',244,244,,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,245,245,245,',
'245,244,244,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,,245,',
',,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245',
',,245,255,255,255,,255,245,245,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,,255,255,255,,255,255,,255,255,,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,',
'255,255,,,,,,,255,,,255,257,257,257,,257,255,255,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,,',
',,,,,,,,,,,,,,,,,,257,,,257,,,257,,257,,,,,,257,,,,,,,,257,,,,,257,257',
'257,257,257,257,,,,257,257,,,,,,,257,,,257,263,263,263,,263,257,257',
',263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263',
'263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,,263,263,263,',
'263,263,,263,263,,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,264',
'264,264,,264,263,263,,264,264,,,,264,,264,264,264,264,264,264,264,,',
',,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264',
'264,264,,264,264,264,,264,264,,264,264,,,,,,,,,,,,,,,,,,,,,264,,,264',
',,264,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264',
',,,,,,264,,,264,271,271,271,,271,264,264,,271,271,,,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,271,271,271,,271,271,,271,271,,,,,,,,,,',
',,,,,,,,,,271,,,271,,,271,,271,,271,,271,,271,,,,,,,,271,,,,,271,271',
'271,271,271,271,,,,271,271,,,,,,,271,,,271,,271,,,,271,271,272,272,272',
',272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272,272',
'272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272,272',
'272,272,,272,272,,272,272,,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,,272,',
'272,,272,,272,,,,,,,,272,,,,,272,272,272,272,272,272,,,,272,272,,,,',
',,272,,,272,,272,,,,272,272,280,280,280,,280,,,,280,280,,,,280,,280',
'280,280,280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,',
',280,,,280,280,280,280,280,280,280,280,280,280,280,,280,280,,280,280',
',,,,,,,,,,,,,,,,,,,,280,,,280,,280,280,,280,,280,,280,,280,,,,,,,,280',
',,,,280,280,280,280,280,280,,,,280,280,,,,,,,280,,,280,,280,,,,280,280',
'284,284,284,284,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,',
',,,,284,284,284,284,284,284,284,,,284,,,,,,284,284,,284,284,284,284',
'284,284,284,284,,284,284,284,,284,284,,284,284,,,,,,,,,,,,,,,,,,,,,284',
',,284,,,284,,284,,284,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284',
',,,284,284,,,,,,,284,,,284,288,288,288,,288,284,284,,288,288,,,,288',
',288,288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288',
',,,,,,288,,,288,288,288,288,288,288,288,,288,288,288,,288,288,,623,',
'623,623,623,623,623,,,,,,,,,623,,,,,,,288,,,288,,,288,,288,,,,,,,,623',
'623,,,,,,623,623,623,623,288,288,288,288,288,288,,,,288,288,,,,288,',
',288,,,288,289,289,289,289,289,288,288,,289,289,,,,289,623,289,289,289',
'289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,289,289',
',289,289,289,289,289,289,289,289,,289,289,289,,289,289,,289,289,,,,',
',,,,,,,,,,,,,,,,289,,,289,,,289,,289,,289,,,,289,,,,,,,,289,,,,,289',
'289,289,289,289,289,,,,289,289,,,,,,,289,,,289,301,301,301,,301,289',
'289,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301',
'301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,,301,301,301',
',301,301,,676,,676,676,676,676,676,,,,,,,,,676,,,,,,,301,,,301,,,301',
',301,,,,,,,,676,,,,,,,676,676,676,676,301,301,301,301,301,301,,,,301',
'301,,,,,,,301,,,301,310,310,310,676,310,301,301,,310,310,,,,310,676',
'310,310,310,310,310,310,310,,,,,,310,310,310,310,310,310,310,,,310,',
',,,,,310,,,310,310,310,310,310,310,310,,310,310,310,,310,310,,310,310',
',,,,,,,,,,,,,,,,,,,,310,,,310,310,,310,,310,,,,,,310,,,,,,,,310,,,,',
'310,310,310,310,310,310,,,,310,310,,,,,,,310,,,310,312,312,312,312,312',
'310,310,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312',
'312,312,312,312,,,312,,,,,,312,312,,312,312,312,312,312,312,312,312',
',312,312,312,,312,312,,312,312,,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,',
'312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,,',
',,,,312,,,312,341,341,341,,341,312,312,,341,341,,,,341,,341,341,341',
'341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341',
'341,341,341,341,341,341,,341,341,341,,341,341,,781,,781,781,781,781',
'781,,,,,,,,,781,,,,,,,341,,,341,,,341,,341,,,,,,,,781,,,,,,,781,781',
'781,781,341,341,341,341,341,341,,,,341,341,,,,,,,341,,,341,360,360,360',
',360,341,341,,360,360,,,,360,781,360,360,360,360,360,360,360,,,,,,360',
'360,360,360,360,360,360,,,360,,,,,,,360,,,360,360,360,360,360,360,360',
',360,360,360,,360,360,,360,360,,,,,,,,,,,,,,,,,,,,,360,,,360,,,360,',
'360,,,,,,360,,,,,,,,360,,,,,360,360,360,360,360,360,,,,360,360,,,,,',
',360,,,360,361,361,361,,361,360,360,,361,361,,,,361,,361,361,361,361',
'361,361,361,,,,,,361,361,361,361,361,361,361,,,361,,,,,,,361,,,361,361',
'361,361,361,361,361,,361,361,361,,361,361,,361,361,,,,,,,,,,,,,,,,,',
',,,361,,,361,,,361,,361,,,,,,361,,,,,,,,361,,,,,361,361,361,361,361',
'361,,,,361,361,,,,,,,361,,,361,380,380,380,,380,361,361,,380,380,,,',
'380,,380,380,380,380,380,380,380,,,,,,380,380,380,380,380,380,380,,',
'380,,,,,,,380,,,380,380,380,380,380,380,380,,380,380,380,,380,380,,856',
',856,856,856,856,856,,,,,,,,,856,,,,,,,380,,,380,,,380,,380,,,,,,,,856',
',,,,,,856,856,856,856,380,380,380,380,380,380,,,,380,380,,,,,,,380,',
',380,392,392,392,,392,380,380,,392,392,,,,392,856,392,392,392,392,392',
'392,392,,,,,,392,392,392,392,392,392,392,,,392,,,,,,,392,,,392,392,392',
'392,392,392,392,,392,392,392,,392,392,,392,392,,,,,,,,,,,,,,,,,,,,,392',
',,392,,,392,,392,,,,,,392,,,,,,,,392,,,,,392,392,392,392,392,392,,,',
'392,392,,,,,,,392,,,392,431,431,431,,431,392,392,,431,431,,,,431,,431',
'431,431,431,431,431,431,,,,,,431,431,431,431,431,431,431,,,431,,,,,',
',431,,,431,431,431,431,431,431,431,,431,431,431,,431,431,,431,431,,',
',,,,,,,,,,,,,,,,,,431,,,431,,,431,,431,,,,,,431,,,,,,,,431,,,,,431,431',
'431,431,431,431,,,,431,431,,,,,,,431,,,431,447,447,447,,447,431,431',
',447,447,,,,447,,447,447,447,447,447,447,447,,,,,,447,447,447,447,447',
'447,447,,,447,,,,,,,447,,,447,447,447,447,447,447,447,447,447,447,447',
',447,447,,447,447,,,,,,,,,,,,,,,,,,,,,447,,,447,447,,447,,447,,447,',
'447,,447,,,,,,,,447,,,,,447,447,447,447,447,447,,,,447,447,,,,,,,447',
',,447,,447,,,,447,447,448,448,448,,448,,,,448,448,,,,448,,448,448,448',
'448,448,448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448',
'448,448,448,448,448,448,448,448,448,448,,448,448,,448,448,,,,,,,,,,',
',,,,,,,,,,448,,,448,448,,448,,448,,448,,448,,448,,,,,,,,448,,,,,448',
'448,448,448,448,448,,,,448,448,,,,,,,448,,,448,,448,,,,448,448,464,464',
'464,,464,,,,464,464,,,,464,,464,464,464,464,464,464,464,,,,,,464,464',
'464,464,464,464,464,,,464,,,,,,,464,,,464,464,464,464,464,464,464,464',
'464,464,464,,464,464,,464,464,,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,,464',
',464,,,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464,464,,,,,,',
'464,,,464,,464,,,,464,464,465,465,465,,465,,,,465,465,,,,465,,465,465',
'465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465,,,,,,,465',
',,465,465,465,465,465,465,465,465,465,465,465,,465,465,,465,465,,,,',
',,,,,,,,,,,,,,,,465,,,465,,,465,,465,,465,,,,465,,,,,,,,465,,,,,465',
'465,465,465,465,465,,,,465,465,,,,,,,465,,,465,,465,,,,465,465,467,467',
'467,,467,,,,467,467,,,,467,,467,467,467,467,467,467,467,,,,,,467,467',
'467,467,467,467,467,,,467,,,,,,,467,,,467,467,467,467,467,467,467,,467',
'467,467,,467,467,,467,467,,,,,,,,,,,,,,,,,,,,,467,,,467,,,467,,467,',
',,,,467,,,,,,,,467,,,,,467,467,467,467,467,467,,,,467,467,,,,,,,467',
',,467,468,468,468,,468,467,467,,468,468,,,,468,,468,468,468,468,468',
'468,468,,,,,,468,468,468,468,468,468,468,,,468,,,,,,,468,,,468,468,468',
'468,468,468,468,,468,468,468,,468,468,,468,468,,,,,,,,,,,,,,,,,,,,,468',
',,468,,,468,,468,,,,,,468,,,,,,,,468,,,,,468,468,468,468,468,468,,,',
'468,468,,,,,,,468,,,468,469,469,469,,469,468,468,,469,469,,,,469,,469',
'469,469,469,469,469,469,,,,,,469,469,469,469,469,469,469,,,469,,,,,',
',469,,,469,469,469,469,469,469,469,,469,469,469,,469,469,,469,469,,',
',,,,,,,,,,,,,,,,,,469,,,469,,,469,,469,,,,,,469,,,,,,,,469,,,,,469,469',
'469,469,469,469,,,,469,469,,,,,,,469,,,469,497,497,497,,497,469,469',
',497,497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497',
'497,497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,,497,497,497,',
'497,497,,497,497,,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,,497,,,,,,497,',
',,,,,,497,,,,,497,497,497,497,497,497,,,,497,497,,,,,,,497,,,497,500',
'500,500,,500,497,497,,500,500,,,,500,,500,500,500,500,500,500,500,,',
',,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500',
'500,500,500,500,500,500,,500,500,,500,500,,,,,,,,,,,,,,,,,,,,,500,,',
'500,,,500,,500,,500,,500,,500,,,,,,,,500,,,,,500,500,500,500,500,500',
',,,500,500,,,,,,,500,,,500,,500,,,,500,500,502,502,502,,502,,,,502,502',
',,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502',
',,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502,,502,502',
',502,502,,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,,502,,,,502,,502,,,,,,',
',502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,,502,,502,,,',
'502,502,504,504,504,,504,,,,504,504,,,,504,,504,504,504,504,504,504',
'504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504,504,504',
'504,504,504,,504,504,504,,504,504,,504,504,,,,,,,,,,,,,,,,,,,,,504,',
',504,,,504,,504,,,,,,504,,,,,,,,504,,,,,504,504,504,504,504,504,,,,504',
'504,,,,,,,504,,,504,521,521,521,,521,504,504,,521,521,,,,521,,521,521',
'521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521',
',,521,521,521,521,521,521,521,,521,521,521,,521,521,,521,521,,,,,,,',
',,,,,,,,,,,,,521,,,521,,521,521,,521,,,,521,,521,,,,,,,,521,,,,,521',
'521,521,521,521,521,,,,521,521,,,,,,,521,,,521,527,527,527,527,527,521',
'521,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527',
'527,527,527,,,527,,,,,,527,527,,527,527,527,527,527,527,527,527,,527',
'527,527,,527,527,,527,527,,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,,527,',
'527,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,,,,,,527',
'527,,,527,533,533,533,,533,527,527,,533,533,,,,533,,533,533,533,533',
'533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533,533',
'533,533,533,533,533,,533,533,533,,533,533,,889,,889,889,889,889,889',
',,,,,,,,889,,,,,,,533,,,533,,,533,,533,,,,,,,,889,,,,,,,889,889,889',
'889,533,533,533,533,533,533,,,,533,533,,,,,,,533,,,533,535,535,535,',
'535,533,533,,535,535,,,,535,889,535,535,535,535,535,535,535,,,,,,535',
'535,535,535,535,535,535,,,535,,,,,,,535,,,535,535,535,535,535,535,535',
'535,535,535,535,,535,535,,535,535,,,,,,,,,,,,,,,,,,,,,535,,,535,,,535',
',535,,535,,,,535,,,,,,,,535,,,,,535,535,535,535,535,535,,,,535,535,',
',,,,,535,,,535,,535,,,,535,535,538,538,538,,538,,,,538,538,,,,538,,538',
'538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,',
',538,,,538,538,538,538,538,538,538,538,538,538,538,,538,538,,538,538',
',,,,,,,,,,,,,,,,,,,,538,,,538,,,538,,538,,538,,,,538,,,,,,,,538,,,,',
'538,538,538,538,538,538,,,,538,538,,,,,,,538,,,538,,538,,,,538,538,544',
'544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544',
'544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544',
',544,544,544,,544,544,,956,,956,956,956,956,956,,,,,,,,,956,,,,,,,544',
',,544,,,544,,544,,,,,,,,956,956,,,,,,956,956,956,956,544,544,544,544',
'544,544,,,,544,544,,,,,,,544,,,544,547,547,547,,547,544,544,,547,547',
',,,547,956,547,547,547,547,547,547,547,,,,,,547,547,547,547,547,547',
'547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,,547,547,547,,547',
'547,,547,547,,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,,547,,,,,,547,,,,,',
',,547,,,,,547,547,547,547,547,547,,,,547,547,,,,,,,547,,,547,548,548',
'548,,548,547,547,,548,548,,,,548,,548,548,548,548,548,548,548,,,,,,548',
'548,548,548,548,548,548,,,548,,,,,,,548,,,548,548,548,548,548,548,548',
',548,548,548,,548,548,,548,548,,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,',
'548,,,,,,548,,,,,,,,548,,,,,548,548,548,548,548,548,,,,548,548,,,,,',
',548,,,548,549,549,549,,549,548,548,,549,549,,,,549,,549,549,549,549',
'549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549',
'549,549,549,549,549,,549,549,549,,549,549,,549,549,,,,,,,,,,,,,,,,,',
',,,549,,,549,,,549,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549,549',
'549,,,,549,549,,,,,,,549,,,549,553,553,553,,553,549,549,,553,553,,,',
'553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553,,',
'553,,,,,,,553,,,553,553,553,553,553,553,553,,553,553,553,,553,553,,553',
'553,,,,,,,,,,,,,,,,,,,,,553,,,553,,,553,,553,,,,,,553,,,,,,,,553,,,',
',553,553,553,553,553,553,,,,553,553,,,,,,,553,,,553,559,559,559,,559',
'553,553,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559,559',
'559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559,559,559,559,559',
'559,559,,559,559,,559,559,,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,,559,',
'559,,559,,559,,,,,,,,559,,,,,559,559,559,559,559,559,,,,559,559,,,,',
',,559,,,559,,559,,,,559,559,562,562,562,,562,,,,562,562,,,,562,,562',
'562,562,562,562,562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,',
',562,,,562,562,562,562,562,562,562,562,562,562,562,,562,562,,562,562',
',,,,,,,,,,,,,,,,,,,,562,,,562,,,562,,562,,,,,,562,,,,,,,,562,,,,,562',
'562,562,562,562,562,,,,562,562,,,,,,,562,,,562,,562,,,,562,562,567,567',
'567,567,567,,,,567,567,,,,567,,567,567,567,567,567,567,567,,,,,,567',
'567,567,567,567,567,567,,,567,,,,,,567,567,,567,567,567,567,567,567',
'567,567,,567,567,567,,567,567,,567,567,,,,,,,,,,,,,,,,,,,,,567,,,567',
',,567,,567,,567,,,,567,,,,,,,,567,,,,,567,567,567,567,567,567,,,,567',
'567,,,,,,,567,,,567,568,568,568,568,568,567,567,,568,568,,,,568,,568',
'568,568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,',
'568,568,,568,568,568,568,568,568,568,568,,568,568,568,,568,568,,568',
'568,,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,,568,,568,,,,568,,,,,,,,568',
',,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,,,568,574,574,574,',
'574,568,568,,574,574,,,,574,,574,574,574,574,574,574,574,,,,,,574,574',
'574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574,574,574,574,,574',
'574,574,,574,574,,987,,987,987,987,987,987,,,,,,,,,987,,,,,,,574,,,574',
',,574,,574,,,,,,,,987,,,,,,,987,987,987,987,574,574,574,574,574,574',
',,,574,574,,,,,,,574,,,574,595,595,595,595,595,574,574,,595,595,,,,595',
'987,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595',
',,,,,595,595,,595,595,595,595,595,595,595,595,,595,595,595,,595,595',
',595,595,,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,,595,,595,,,,595,,,,,,',
',595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,,,595,599,599',
'599,599,599,595,595,,599,599,,,,599,,599,599,599,599,599,599,599,,,',
',,599,599,599,599,599,599,599,,,599,,,,,,599,599,,599,599,599,599,599',
'599,599,599,,599,599,599,,599,599,,599,599,,,,,,,,,,,,,,,,,,,,,599,',
',599,,,599,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,',
',,599,599,,,,,,,599,,,599,604,604,604,604,604,599,599,,604,604,,,,604',
',604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604',
',,,,,604,604,,604,604,604,604,604,604,604,604,,604,604,604,,604,604',
',604,604,,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,,604,,604,,,,604,,,,,,',
',604,,,,,604,604,604,604,604,604,,,,604,604,,,,,,,604,,,604,606,606',
'606,,606,604,604,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606',
'606,606,606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606,606',
'606,606,606,606,,606,606,,606,606,,,,,,,,,,,,,,,,,,,,,606,,,606,,,606',
',606,,606,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,',
',,,,,606,,,606,,606,,,,606,606,609,609,609,,609,,,,609,609,,,,609,,609',
'609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609,,,,,',
',609,,,609,609,609,609,609,609,609,609,609,609,609,,609,609,,609,609',
',,,,,,,,,,,,,,,,,,,,609,,,609,,,609,,609,,609,,,,609,,,,,,,,609,,,,',
'609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,,609,,,,609,609,615',
'615,615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,,615',
'615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615,615,615,615',
'615,615,615,615,,615,615,,615,615,,,,,,,,,,,,,,,,,,,,,615,,,615,,,615',
',615,,615,,,,615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,',
',,,,,615,,,615,,615,,,,615,615,619,619,619,,619,,,,619,619,,,,619,,619',
'619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,',
',619,,,619,619,619,619,619,619,619,,619,619,619,,619,619,,619,619,,',
',,,,,,,,,,,,,,,,,,619,,,619,,,619,,619,,,,,,619,,,,,,,,619,,,,,619,619',
'619,619,619,619,,,,619,619,,,,,,,619,,,619,621,621,621,,621,619,619',
',621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621',
'621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,,621,621,621,',
'621,621,,621,621,,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,,621,,,,,,621,',
',,,,,,621,,,,,621,621,621,621,621,621,,,,621,621,,,,,,,621,,,621,649',
'649,649,,649,621,621,,649,649,,,,649,,649,649,649,649,649,649,649,,',
',,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649',
'649,649,,649,649,649,,649,649,,649,649,,,,,,,,,,,,,,,,,,,,,649,,,649',
',,649,,649,,649,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649',
'649,,,,,,,649,,,649,652,652,652,,652,649,649,,652,652,,,,652,,652,652',
'652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652',
',,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,,,,,,,',
',,,,,,,,,,,,,652,,,652,,,652,,652,,,,,,652,,,,,,,,652,,,,,652,652,652',
'652,652,652,,,,652,652,,,,,,,652,,,652,653,653,653,,653,652,652,,653',
'653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653',
'653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,,653,653,653,,653',
'653,,653,653,,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,,653,,,,,,653,,,,,',
',,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,658,658',
'658,,658,653,653,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658',
'658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658',
',658,658,658,,658,658,,658,658,,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,',
'658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,,,,,',
',658,,,658,661,661,661,,661,658,658,,661,661,,,,661,,661,661,661,661',
'661,661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,,661,,,661,661',
'661,661,661,661,661,,661,661,661,,661,661,,661,661,,,,,,,,,,,,,,,,,',
',,,661,,,661,,,661,,661,,,,,,661,,,,,,,,661,,,,,661,661,661,661,661',
'661,,,,661,661,,,,,,,661,,,661,664,664,664,,664,661,661,,664,664,,,',
'664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,',
'664,,,,,,,664,,,664,664,664,664,664,664,664,,664,664,664,,664,664,,664',
'664,,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,,664,,,,,,664,,,,,,,,664,,,',
',664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,665,665,665,,665',
'664,664,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665,665',
'665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,,665,665',
'665,,665,665,,665,665,,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,,665,,,,,',
'665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665',
'678,678,678,678,678,665,665,,678,678,,,,678,,678,678,678,678,678,678',
'678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,678,678,,678,678,678',
'678,678,678,678,678,,678,678,678,,678,678,,678,678,,,,,,,,,,,,,,,,,',
',,,678,,,678,,,678,,678,,678,,,,678,,,,,,,,678,,,,,678,678,678,678,678',
'678,,,,678,678,,,,,,,678,,,678,682,682,682,,682,678,678,,682,682,,,',
'682,,682,682,682,682,682,682,682,,,,,,682,682,682,682,682,682,682,,',
'682,,,,,,,682,,,682,682,682,682,682,682,682,,682,682,682,,682,682,,682',
'682,,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,,682,,,,,,682,,,,,,,,682,,,',
',682,682,682,682,682,682,,,,682,682,,,,,,,682,,,682,685,685,685,,685',
'682,682,,685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685',
'685,685,685,685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,,685,685',
'685,,685,685,,685,685,,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,,685,,,,,',
'685,,,,,,,,685,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685',
'692,692,692,692,692,685,685,,692,692,,,,692,,692,692,692,692,692,692',
'692,,,,,,692,692,692,692,692,692,692,,,692,,,,,,692,692,,692,692,692',
'692,692,692,692,692,,692,692,692,,692,692,,692,692,,,,,,,,,,,,,,,,,',
',,,692,,,692,,,692,,692,,692,,,,692,,,,,,,,692,,,,,692,692,692,692,692',
'692,,,,692,692,,,,,,,692,,,692,695,695,695,,695,692,692,,695,695,,,',
'695,,695,695,695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,',
'695,,,,,,,695,,,695,695,695,695,695,695,695,695,695,695,695,,695,695',
',695,695,,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,,695,,695,,695,,695,,,',
',,,,695,,,,,695,695,695,695,695,695,,,,695,695,,,,,,,695,,,695,,695',
',,,695,695,696,696,696,,696,,,,696,696,,,,696,,696,696,696,696,696,696',
'696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696,696,696,696',
'696,696,696,696,696,696,696,,696,696,,696,696,,,,,,,,,,,,,,,,,,,,,696',
',,696,,,696,,696,,,,696,,696,,,,,,,,696,,,,,696,696,696,696,696,696',
',,,696,696,,,,,,,696,,,696,,696,,,,696,696,702,702,702,702,702,,,,702',
'702,,,,702,,702,702,702,702,702,702,702,,,,,,702,702,702,702,702,702',
'702,,,702,,,,,,702,702,,702,702,702,702,702,702,702,702,,702,702,702',
',702,702,,702,702,,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,,702,,702,,,,702',
',,,,,,,702,,,,,702,702,702,702,702,702,,,,702,702,,,,,,,702,,,702,703',
'703,703,703,703,702,702,,703,703,,,,703,,703,703,703,703,703,703,703',
',,,,,703,703,703,703,703,703,703,,,703,,,,,,703,703,,703,703,703,703',
'703,703,703,703,,703,703,703,,703,703,,703,703,,,,,,,,,,,,,,,,,,,,,703',
',,703,,,703,,703,,703,,,,703,,,,,,,,703,,,,,703,703,703,703,703,703',
',,,703,703,,,,,,,703,,,703,707,707,707,,707,703,703,,707,707,,,,707',
',707,707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707',
',,,,,,707,,,707,707,707,707,707,707,707,,707,707,707,,707,707,,,,,,',
',,,,,,,,,,,,,,,,,707,,,707,,,707,,707,,,,,,,,,,,,,,,,,,,707,707,707',
'707,707,707,,,,707,707,,,,,,,707,,,707,720,720,720,,720,707,707,,720',
'720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720,720,720,720,720',
'720,,,720,,,,,,,720,,,720,720,720,720,720,720,720,,720,720,720,,720',
'720,,,,,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,,720,,,,,,,,,,,,,,,,,,,720',
'720,720,720,720,720,,,,720,720,,,,,,,720,,,720,726,726,726,,726,720',
'720,,726,726,,,,726,,726,726,726,726,726,726,726,,,,,,726,726,726,726',
'726,726,726,,,726,,,,,,,726,,,726,726,726,726,726,726,726,,726,726,726',
',726,726,,726,726,,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,,726,,726,,,,726',
',,,,,,,726,,,,,726,726,726,726,726,726,,,,726,726,,,,,,,726,,,726,763',
'763,763,,763,726,726,,763,763,,,,763,,763,763,763,763,763,763,763,,',
',,,763,763,763,763,763,763,763,,,763,,,,,,,763,,,763,763,763,763,763',
'763,763,,763,763,763,,763,763,,763,763,,,,,,,,,,,,,,,,,,,,,763,,,763',
',,763,,763,,763,,,,763,,,,,,,,763,,,,,763,763,763,763,763,763,,,,763',
'763,,,,,,,763,,,763,770,770,770,,770,763,763,,770,770,,,,770,,770,770',
'770,770,770,770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770',
',,770,770,770,770,770,770,770,,770,770,770,,770,770,,770,770,,,,,,,',
',,,,,,,,,,,,,770,,,770,,,770,,770,,,,,,770,,,,,,,,770,,,,,770,770,770',
'770,770,770,,,,770,770,,,,,,,770,,,770,775,775,775,775,775,770,770,',
'775,775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775',
'775,775,,,775,,,,,,775,775,,775,775,775,775,775,775,775,775,,775,775',
'775,,775,775,,775,775,,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,,775,,775',
',,,775,,,,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,,,,,,,775,',
',775,779,779,779,779,779,775,775,,779,779,,,,779,,779,779,779,779,779',
'779,779,,,,,,779,779,779,779,779,779,779,,,779,,,,,,779,779,,779,779',
'779,779,779,779,779,779,,779,779,779,,779,779,,779,779,,,,,,,,,,,,,',
',,,,,,,779,,,779,,,779,,779,,779,,,,779,,,,,,,,779,,,,,779,779,779,779',
'779,779,,,,779,779,,,,,,,779,,,779,780,780,780,780,780,779,779,,780',
'780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780,780,780,780,780',
'780,,,780,,,,,,780,780,,780,780,780,780,780,780,780,780,,780,780,780',
',780,780,,780,780,,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,,780,,780,,,,780',
',,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780,,,,,,,780,,,780,783',
'783,783,,783,780,780,,783,783,,,,783,,783,783,783,783,783,783,783,,',
',,,783,783,783,783,783,783,783,,,783,,,,,,,783,,,783,783,783,783,783',
'783,783,,783,783,783,,783,783,,783,783,,,,,,,,,,,,,,,,,,,,,783,,,783',
',,783,,783,,,,,,783,,,,,,,,783,,,,,783,783,783,783,783,783,,,,783,783',
',,,,,,783,,,783,797,797,797,797,797,783,783,,797,797,,,,797,,797,797',
'797,797,797,797,797,,,,,,797,797,797,797,797,797,797,,,797,,,,,,797',
'797,,797,797,797,797,797,797,797,797,,797,797,797,,797,797,,797,797',
',,,,,,,,,,,,,,,,,,,,797,,,797,,,797,,797,,797,,,,797,,,,,,,,797,,,,',
'797,797,797,797,797,797,,,,797,797,,,,,,,797,,,797,802,802,802,,802',
'797,797,,802,802,,,,802,,802,802,802,802,802,802,802,,,,,,802,802,802',
'802,802,802,802,,,802,,,,,,,802,,,802,802,802,802,802,802,802,,802,802',
'802,,802,802,,802,802,,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,,802,,,,,',
'802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802,,,,,,,802,,,802',
'803,803,803,,803,802,802,,803,803,,,,803,,803,803,803,803,803,803,803',
',,,,,803,803,803,803,803,803,803,,,803,,,,,,,803,,,803,803,803,803,803',
'803,803,,803,803,803,,803,803,,803,803,,,,,,,,,,,,,,,,,,,,,803,,,803',
',,803,,803,,,,,,803,,,,,,,,803,,,,,803,803,803,803,803,803,,,,803,803',
',,,,,,803,,,803,804,804,804,,804,803,803,,804,804,,,,804,,804,804,804',
'804,804,804,804,,,,,,804,804,804,804,804,804,804,,,804,,,,,,,804,,,804',
'804,804,804,804,804,804,,804,804,804,,804,804,,804,804,,,,,,,,,,,,,',
',,,,,,,804,,,804,,,804,,804,,,,,,804,,,,,,,,804,,,,,804,804,804,804',
'804,804,,,,804,804,,,,,,,804,,,804,816,816,816,,816,804,804,,816,816',
',,,816,,816,816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816',
',,816,,,,,,,816,,,816,816,816,816,816,816,816,,816,816,816,,816,816',
',816,816,,,,,,,,,,,,,,,,,,,,,816,,,816,,,816,,816,,,,,,816,,,,,,,,816',
',,,,816,816,816,816,816,816,,,,816,816,,,,,,,816,,,816,817,817,817,',
'817,816,816,,817,817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817',
'817,817,817,817,817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,,817',
'817,817,,817,817,,817,817,,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,,817,',
',,,,817,,,,,,,,817,,,,,817,817,817,817,817,817,,,,817,817,,,,,,,817',
',,817,818,818,818,,818,817,817,,818,818,,,,818,,818,818,818,818,818',
'818,818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,,818,,,818,818,818',
'818,818,818,818,,818,818,818,,818,818,,818,818,,,,,,,,,,,,,,,,,,,,,818',
',,818,,,818,,818,,,,,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,',
'818,818,,,,,,,818,,,818,832,832,832,,832,818,818,,832,832,,,,832,,832',
'832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832,,,832,,,,,',
',832,,,832,832,832,832,832,832,832,,832,832,832,,832,832,,832,832,,',
',,,,,,,,,,,,,,,,,,832,,,832,,,832,,832,,832,,,,832,,,,,,,,832,,,,,832',
'832,832,832,832,832,,,,832,832,,,,,,,832,,,832,843,843,843,843,843,832',
'832,,843,843,,,,843,,843,843,843,843,843,843,843,,,,,,843,843,843,843',
'843,843,843,,,843,,,,,,843,843,,843,843,843,843,843,843,843,843,,843',
'843,843,,843,843,,843,843,,,,,,,,,,,,,,,,,,,,,843,,,843,,,843,,843,',
'843,,,,843,,,,,,,,843,,,,,843,843,843,843,843,843,,,,843,843,,,,,,,843',
',,843,867,867,867,,867,843,843,,867,867,,,,867,,867,867,867,867,867',
'867,867,,,,,,867,867,867,867,867,867,867,,,867,,,,,,,867,,,867,867,867',
'867,867,867,867,,867,867,867,,867,867,,867,867,,,,,,,,,,,,,,,,,,,,,867',
',,867,,,867,,867,,,,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,',
'867,867,,,,,,,867,,,867,869,869,869,869,869,867,867,,869,869,,,,869',
',869,869,869,869,869,869,869,,,,,,869,869,869,869,869,869,869,,,869',
',,,,,869,869,,869,869,869,869,869,869,869,869,,869,869,869,,869,869',
',869,869,,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,,869,,869,,,,869,,,,,,',
',869,,,,,869,869,869,869,869,869,,,,869,869,,,,,,,869,,,869,870,870',
'870,870,870,869,869,,870,870,,,,870,,870,870,870,870,870,870,870,,,',
',,870,870,870,870,870,870,870,,,870,,,,,,870,870,,870,870,870,870,870',
'870,870,870,,870,870,870,,870,870,,870,870,,,,,,,,,,,,,,,,,,,,,870,',
',870,,,870,,870,,870,,,,870,,,,,,,,870,,,,,870,870,870,870,870,870,',
',,870,870,,,,,,,870,,,870,895,895,895,,895,870,870,,895,895,,,,895,',
'895,895,895,895,895,895,895,,,,,,895,895,895,895,895,895,895,,,895,',
',,,,,895,,,895,895,895,895,895,895,895,,895,895,895,,895,895,,895,895',
',,,,,,,,,,,,,,,,,,,,895,,,895,,,895,,895,,,,,,895,,,,,,,,895,,,,,895',
'895,895,895,895,895,,,,895,895,,,,,,,895,,,895,909,909,909,,909,895',
'895,,909,909,,,,909,,909,909,909,909,909,909,909,,,,,,909,909,909,909',
'909,909,909,,,909,,,,,,,909,,,909,909,909,909,909,909,909,,909,909,909',
',909,909,,909,909,,,,,,,,,,,,,,,,,,,,,909,,,909,,,909,,909,,,,,,909',
',,,,,,,909,,,,,909,909,909,909,909,909,,,,909,909,,,,,,,909,,,909,910',
'910,910,,910,909,909,,910,910,,,,910,,910,910,910,910,910,910,910,,',
',,,910,910,910,910,910,910,910,,,910,,,,,,,910,,,910,910,910,910,910',
'910,910,,910,910,910,,910,910,,910,910,,,,,,,,,,,,,,,,,,,,,910,,,910',
',,910,,910,,,,,,910,,,,,,,,910,,,,,910,910,910,910,910,910,,,,910,910',
',,,,,,910,,,910,911,911,911,,911,910,910,,911,911,,,,911,,911,911,911',
'911,911,911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,,,911,,,911',
'911,911,911,911,911,911,,911,911,911,,911,911,,911,911,,,,,,,,,,,,,',
',,,,,,,911,,,911,,,911,,911,,,,,,911,,,,,,,,911,,,,,911,911,911,911',
'911,911,,,,911,911,,,,,,,911,,,911,917,917,917,,917,911,911,,917,917',
',,,917,,917,917,917,917,917,917,917,,,,,,917,917,917,917,917,917,917',
',,917,,,,,,,917,,,917,917,917,917,917,917,917,917,917,917,917,,917,917',
',917,917,,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,,917,,,,917,,917,,,,,,',
',917,,,,,917,917,917,917,917,917,,,,917,917,,,,,,,917,,,917,,917,,,',
'917,917,922,922,922,922,922,,,,922,922,,,,922,,922,922,922,922,922,922',
'922,,,,,,922,922,922,922,922,922,922,,,922,,,,,,922,922,,922,922,922',
'922,922,922,922,922,,922,922,922,,922,922,,922,922,,,,,,,,,,,,,,,,,',
',,,922,,,922,,,922,,922,,922,,,,922,,,,,,,,922,,,,,922,922,922,922,922',
'922,,,,922,922,,,,,,,922,,,922,926,926,926,,926,922,922,,926,926,,,',
'926,,926,926,926,926,926,926,926,,,,,,926,926,926,926,926,926,926,,',
'926,,,,,,,926,,,926,926,926,926,926,926,926,,926,926,926,,926,926,,',
',,,,,,,,,,,,,,,,,,,,,926,,,926,,,926,,926,,,,,,,,,,,,,,,,,,,926,926',
'926,926,926,926,,,,926,926,,,,,,,926,,,926,938,938,938,,938,926,926',
',938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938',
'938,938,,,938,,,,,,,938,,,938,938,938,938,938,938,938,,938,938,938,',
'938,938,,938,938,,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,,938,,938,,,,938',
',,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,,938,939',
'939,939,939,939,938,938,,939,939,,,,939,,939,939,939,939,939,939,939',
',,,,,939,939,939,939,939,939,939,,,939,,,,,,939,939,,939,939,939,939',
'939,939,939,939,,939,939,939,,939,939,,939,939,,,,,,,,,,,,,,,,,,,,,939',
',,939,,,939,,939,,939,,,,939,,,,,,,,939,,,,,939,939,939,939,939,939',
',,,939,939,,,,,,,939,,,939,942,942,942,942,942,939,939,,942,942,,,,942',
',942,942,942,942,942,942,942,,,,,,942,942,942,942,942,942,942,,,942',
',,,,,942,942,,942,942,942,942,942,942,942,942,,942,942,942,,942,942',
',942,942,,,,,,,,,,,,,,,,,,,,,942,,,942,,,942,,942,,942,,,,942,,,,,,',
',942,,,,,942,942,942,942,942,942,,,,942,942,,,,,,,942,,,942,965,965',
'965,,965,942,942,,965,965,,,,965,,965,965,965,965,965,965,965,,,,,,965',
'965,965,965,965,965,965,,,965,,,,,,,965,,,965,965,965,965,965,965,965',
',965,965,965,,965,965,,965,965,,,,,,,,,,,,,,,,,,,,,965,,,965,,,965,',
'965,,965,,965,,965,,,,,,,,965,,,,,965,965,965,965,965,965,,,,965,965',
',,,,,,965,,,965,967,967,967,967,967,965,965,,967,967,,,,967,,967,967',
'967,967,967,967,967,,,,,,967,967,967,967,967,967,967,,,967,,,,,,967',
'967,,967,967,967,967,967,967,967,967,,967,967,967,,967,967,,967,967',
',,,,,,,,,,,,,,,,,,,,967,,,967,,,967,,967,,967,,,,967,,,,,,,,967,,,,',
'967,967,967,967,967,967,,,,967,967,,,,,,,967,,,967,978,978,978,978,978',
'967,967,,978,978,,,,978,,978,978,978,978,978,978,978,,,,,,978,978,978',
'978,978,978,978,,,978,,,,,,978,978,,978,978,978,978,978,978,978,978',
',978,978,978,,978,978,,978,978,,,,,,,,,,,,,,,,,,,,,978,,,978,,,978,',
'978,,978,,,,978,,,,,,,,978,,,,,978,978,978,978,978,978,,,,978,978,,',
',,,,978,,,978,983,983,983,983,983,978,978,,983,983,,,,983,,983,983,983',
'983,983,983,983,,,,,,983,983,983,983,983,983,983,,,983,,,,,,983,983',
',983,983,983,983,983,983,983,983,,983,983,983,,983,983,,983,983,,,,',
',,,,,,,,,,,,,,,,983,,,983,,,983,,983,,983,,,,983,,,,,,,,983,,,,,983',
'983,983,983,983,983,,,,983,983,,,,,,,983,,,983,995,995,995,995,995,983',
'983,,995,995,,,,995,,995,995,995,995,995,995,995,,,,,,995,995,995,995',
'995,995,995,,,995,,,,,,995,995,,995,995,995,995,995,995,995,995,,995',
'995,995,,995,995,,995,995,,,,,,,,,,,,,,,,,,,,,995,,,995,,,995,,995,',
'995,,,,995,,,,,,,,995,,,,,995,995,995,995,995,995,,,,995,995,,,,,,,995',
',,995,999,999,999,,999,995,995,,999,999,,,,999,,999,999,999,999,999',
'999,999,,,,,,999,999,999,999,999,999,999,,,999,,,,,,,999,,,999,999,999',
'999,999,999,999,999,999,999,999,,999,999,,999,999,,,,,,,,,,,,,,,,,,',
',,999,,,999,,,999,,999,,999,,,,999,,,,,,,,999,,,,443,999,999,999,999',
'999,999,443,443,443,999,999,,443,443,,443,,999,,,999,,999,,443,,999',
'999,,,,,,,,443,443,,443,443,443,443,443,,,,,,,,,,,,,,,,,,,,,,443,443',
'443,443,443,443,443,443,443,443,443,443,443,443,443,,,443,443,443,,443',
',,,443,,,,,,443,,443,,443,443,443,443,443,443,443,,443,443,443,,,,,',
',,,,,,,443,443,,443,,443,,445,443,,443,,,443,445,445,445,,,,445,445',
',445,,,,,,,,,,,,,,,,,,,,445,445,,445,445,445,445,445,,,,,,,,,,,,,,,',
',,,,,,445,445,445,445,445,445,445,445,445,445,445,445,445,445,445,,',
'445,445,445,,445,,,,445,,,,,,445,,445,,445,445,445,445,445,445,445,',
'445,,445,,,,,,,,,,,,,445,445,,445,,445,,668,445,,445,,,445,668,668,668',
',,668,668,668,,668,,,,,,,,,668,668,668,,,,,,,,,668,668,,668,668,668',
'668,668,,,,,,,,,,,,,,,,,,,,,,668,668,668,668,668,668,668,668,668,668',
'668,668,668,668,668,,,668,668,668,,668,668,,,668,,668,,668,,668,,668',
',668,668,668,668,668,668,668,,668,668,668,,,,,,,,,,,,,668,668,668,668',
',668,,669,668,,668,,,668,669,669,669,,,669,669,669,,669,,,,,,,,,,669',
'669,,,,,,,,,669,669,,669,669,669,669,669,,,,,,,,,,,,,,,,,,,,,,669,669',
'669,669,669,669,669,669,669,669,669,669,669,669,669,,,669,669,669,,669',
'669,,,669,,669,,669,,669,,669,,669,669,669,669,669,669,669,,669,,669',
',,,,,,,,,,,,669,669,669,669,,669,,28,669,,669,,,669,28,28,28,,,28,28',
'28,,28,,,,,,,,,28,28,28,,,,,,,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,',
',,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28',
',28,28,,28,,28,,28,,28,,28,28,28,28,28,28,28,,28,28,28,,,,,,,,,,,,,28',
'28,28,28,29,28,,,28,,28,29,29,29,,,29,29,29,,29,,,,,,,,,,29,29,,,,,',
',,,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,,,29,29,29,,,29,,29,29,,29,,29,,29,,29,,29,29,29',
'29,29,29,29,,29,,29,,,,,,,,,,,,,29,29,29,29,51,29,,,29,,29,51,51,51',
',,51,51,51,,51,,,,,,,,,,51,51,51,,,,,,,,51,51,,51,51,51,51,51,,,,,,',
',,,,,,,,,,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,,,51,51',
'51,,,51,,,51,,51,,51,,51,,51,,51,51,51,51,51,51,51,,51,,51,,,,,,,,,',
',,,51,51,51,51,439,51,,51,51,,51,439,439,439,,,439,439,439,,439,,,,',
',,,,439,439,439,,,,,,,,,439,439,,439,439,439,439,439,,,,,,,,,,,,,,,',
',,,,,,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,,',
'439,439,439,,,439,,439,439,,439,,439,,439,,439,,439,439,439,439,439',
'439,439,,439,439,439,,,,,,,,,,,,,439,439,439,439,449,439,,,439,,439',
'449,449,449,,,449,449,449,,449,,,,,,,,,449,449,449,,,,,,,,,449,449,',
'449,449,449,449,449,,,,,,,,,,,,,,,,,,,,,,449,449,449,449,449,449,449',
'449,449,449,449,449,449,449,449,,,449,449,449,,,449,,449,449,,449,,449',
',449,,449,,449,449,449,449,449,449,449,,449,449,449,,,,,,,,,,,,,449',
'449,449,449,509,449,,,449,,449,509,509,509,,,509,509,509,,509,,,,,,',
',,,509,,,,,,,,,,509,509,,509,509,509,509,509,,,,,,,,,,,,510,,,,,,,510',
'510,510,,,510,510,510,,510,,,,,509,509,,,,510,,,509,,,,,509,509,510',
'510,,510,510,510,510,510,,,,,,,,,,,,509,,,,,,,,,,,,,509,,509,,,509,',
',510,510,,511,,,,,510,,511,511,511,510,510,511,511,511,,511,,,,,,,,',
',511,,,,,510,,,,,511,511,,511,511,511,511,511,510,,510,,,510,202,202',
',,202,,,,,,,,,202,202,202,202,202,202,202,202,202,,,202,202,511,511',
',,202,202,202,202,511,,,,,511,511,,,,,202,202,,202,202,202,202,202,202',
'202,202,202,202,202,,511,202,,,,,,,,,,,,511,,511,,,511,7,7,7,7,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,7,7,7,7,7,,7,,,,,,,,,7,7,7,7,7,7,7,7,7,,,7,7,,,,,7,7,7,7,,,,,',
',,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,,,,,,,,,,7,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,,,8,,,,,,,,,8,8,8,8,8,8,8,8,8,,,8,8,,,,,8,8,8,8,,,,,,,,,,',
',8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,8,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,,,,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,,,422,,,,,,,,,422,422,422,422,422,422,422',
'422,422,,,422,422,,,,,422,422,422,422,,,,,,,,,,,,422,422,,422,422,422',
'422,422,422,422,422,422,422,422,,,422,422,,,,,,,,,,422,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,,,,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,,,426,,,,,,,,,426,426,426,426,426',
'426,426,426,426,,,426,426,,,,,426,426,426,426,,,,,,,,,,,,426,426,,426',
'426,426,426,426,426,426,426,426,426,426,,,426,426,,,,,,,,,,426,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,',
',66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,,66,,,,,,,66,66,66,66,66,66,66,66,66,,,66,66,,,,,66,66,66,66',
',,,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,66,66,,,66,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,,,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,,80,,,,,,,80,80,80,80,80,80,80,80,80,,,80,80,,,,,80,80,80,80,,,,',
',,,,,,,80,80,,80,80,80,80,80,80,80,80,80,80,80,,,80,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,,,,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,,193,,,,,,,193,193,193',
'193,193,193,193,193,193,,,193,193,,,,,193,193,193,193,,,,,,,,,,,,193',
'193,,193,193,193,193,193,193,193,193,193,193,193,,,193,794,794,794,794',
'794,794,794,794,794,794,794,794,794,794,794,794,794,794,794,794,794',
'794,794,794,,,,794,794,794,794,794,794,794,794,794,794,794,794,794,794',
'794,794,794,794,794,794,794,794,794,,,794,,,,,,,,,794,794,794,794,794',
'794,794,794,794,,,794,794,,,,,794,794,794,794,,,,,,,,,,,,794,794,,794',
'794,794,794,794,794,794,794,794,794,794,201,201,794,,201,,,,,,,,,201',
'201,201,201,201,201,201,201,201,,,201,201,,,,,201,201,201,201,,,,,,201',
',,,,,201,201,,201,201,201,201,201,201,201,201,201,201,201,203,203,201',
',203,,,,,,,,,203,203,203,203,203,203,203,203,203,,,203,203,,,,,203,203',
'203,203,,,,,,,,,,,,203,203,,203,203,203,203,203,203,203,203,203,203',
'203,267,267,203,,267,,,,,,,,,267,267,267,267,267,267,267,267,267,,,267',
'267,,,,,267,267,267,267,,,,,,,,,,,,267,267,,267,267,267,267,267,267',
'267,267,267,267,267,268,268,267,,268,,,,,,,,,268,268,268,268,268,268',
'268,268,268,,,268,268,,,,,268,268,268,268,,,,,,,,,,,,268,268,,268,268',
'268,268,268,268,268,268,268,268,268,269,269,268,,269,,,,,,,,,269,269',
'269,269,269,269,269,269,269,,,269,269,,,,,269,269,269,269,,,,,,,,,,',
',269,269,,269,269,269,269,269,269,269,269,269,269,269,462,462,269,,462',
',,,,,,,,462,462,462,462,462,462,462,462,462,,,462,462,,,,,462,462,462',
'462,,,,,,462,,,,,,462,462,,462,462,462,462,462,462,462,462,462,462,462',
'463,463,462,,463,,,,,,,,,463,463,463,463,463,463,463,463,463,,,463,463',
',,,,463,463,463,463,,,,,,,,,,,,463,463,,463,463,463,463,463,463,463',
'463,463,463,463,536,536,463,,536,,,,,,,,,536,536,536,536,536,536,536',
'536,536,,,536,536,,,,,536,536,536,536,,,,,,536,,,,,,536,536,,536,536',
'536,536,536,536,536,536,536,536,536,537,537,536,,537,,,,,,,,,537,537',
'537,537,537,537,537,537,537,,,537,537,,,,,537,537,537,537,,,,,,,,,,',
',537,537,,537,537,537,537,537,537,537,537,537,537,537,539,539,537,,539',
',,,,,,,,539,539,539,539,539,539,539,539,539,,,539,539,,,,,539,539,539',
'539,,,,,,,,,,,,539,539,,539,539,539,539,539,539,539,539,539,539,539',
'550,550,539,,550,,,,,,,,,550,550,550,550,550,550,550,550,550,,,550,550',
',,,,550,550,550,550,,,,,,550,,,,,,550,550,,550,550,550,550,550,550,550',
'550,550,550,550,551,551,550,,551,,,,,,,,,551,551,551,551,551,551,551',
'551,551,,,551,551,,,,,551,551,551,551,,,,,,,,,,,,551,551,,551,551,551',
'551,551,551,551,551,551,551,551,607,607,551,,607,,,,,,,,,607,607,607',
'607,607,607,607,607,607,,,607,607,,,,,607,607,607,607,,,,,,607,,,,,',
'607,607,,607,607,607,607,607,607,607,607,607,607,607,608,608,607,,608',
',,,,,,,,608,608,608,608,608,608,608,608,608,,,608,608,,,,,608,608,608',
'608,,,,,,,,,,,,608,608,,608,608,608,608,608,608,608,608,608,608,608',
'614,614,608,,614,,,,,,,,,614,614,614,614,614,614,614,614,614,,,614,614',
',,,,614,614,614,614,,,,,,,,,,,,614,614,,614,614,614,614,614,614,614',
'614,614,614,614,616,616,614,,616,,,,,,,,,616,616,616,616,616,616,616',
'616,616,,,616,616,,,,,616,616,616,616,,,,,,616,,,,,,616,616,,616,616',
'616,616,616,616,616,616,616,616,616,746,746,616,,746,,,,,,,,,746,746',
'746,746,746,746,746,746,746,,,746,746,,,,,746,746,746,746,,,,,,,,,,',
',746,746,,746,746,746,746,746,746,746,746,746,746,746,1000,1000,746',
',1000,,,,,,,,,1000,1000,1000,1000,1000,1000,1000,1000,1000,,,1000,1000',
',,,,1000,1000,1000,1000,,,,,,1000,,,,,,1000,1000,,1000,1000,1000,1000',
'1000,1000,1000,1000,1000,1000,1000,1001,1001,1000,,1001,,,,,,,,,1001',
'1001,1001,1001,1001,1001,1001,1001,1001,,,1001,1001,,,,,1001,1001,1001',
'1001,,,,,,,,,,,,1001,1001,,1001,1001,1001,1001,1001,1001,1001,1001,1001',
'1001,1001,,,1001' ]
        racc_action_check = arr = ::Array.new(26038, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    25,   nil,   -46,   nil,   514,   -71, 23991, 24112,   -15,
   nil,   -30,    31,   388,   244,     2,   310,   nil,   129,   260,
  2653,   171,   nil,   391,   529,   667,   307,   -14, 23095, 23222,
   nil,   805,   936,  1067,   nil,    76,   351,   161,   413,  1198,
  1329,  1460,   104,   580,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 23349,   nil,  1591,  1722,  1860,   -19,   949,  1998,  2129,
   nil,   nil,  2260,  2391,  2522,   nil, 24475,   nil,   nil,   nil,
   nil,   nil,   194,   nil,   nil,   nil,   nil,   nil,   110,   132,
 24585,   nil,   nil,   nil,   515,  2653,   nil,   nil,  2791,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   379,   nil,
  2929,   nil,   nil,   nil,  3060,  3191,  3322,  3453,  3584,  3715,
   nil,   513,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24695,   302,   nil,  3846,  3977,  4108,  4239,
  4377, 24864, 23864, 24923,  4515,  4646,  4777,  4908,   nil,   667,
   -76,   384,   -63,   326,   397,  5039,  5170,   nil,   nil,  5301,
   400,  5432,  5563,  5694,  5825,  5956,  6087,  6218,  6349,  6480,
  6611,  6742,  6873,  7004,  7135,  7266,  7397,  7528,  7659,  7790,
  7921,  8052,  8183,  8314,  8445,  8576,   nil,   nil,   nil,   nil,
  2791,   nil,   365,   373,   nil,  8707,   414,  8838,   nil,   nil,
   nil,   nil,   nil,  8969,  9100,   nil,   nil, 24982, 25041, 25100,
   420,  9231,  9369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  9507,   146,   790,   428,  9645,   438,   451,   417,  9776,  9907,
    17,   831,   567,    39,   559,   529,   -11,   nil,   571,   558,
   536, 10038,   nil,   480,   601,   614,   899,   nil,   628,   nil,
 10169,   nil, 10300,    31,   nil,   572,   -89,   -47,   611,   596,
   292,   639,   nil,   nil,   -21,  1080,   nil,   nil,   nil,   603,
   612,   627,   633,   nil,   635,   650,   nil,   nil,   nil,   727,
   nil, 10431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   821,
   nil,   nil,   nil,   728,   nil,   nil,   735,   602,    -7,     0,
 10562, 10693,   330,   350,   658,    -2,   931,   733,     0,   766,
   nil,   nil,   391,   738,   nil,  1030,   nil,    68,   nil,   nil,
 10824,   148,   408,   450,   563,   588,   597,   599,   630,   nil,
   670,   nil, 10955,   nil,   285,   nil,   375,   nil,   419,   673,
   391,   nil,   674,   -33,   nil,   397,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   685, 24233,   nil,   nil,   nil, 24354,   687,   nil,   676,
   nil, 11086,   677,   nil,  3191,   712,   720,   487,   523, 23476,
   nil,   nil,   nil, 22575,   732, 22705,   nil, 11217, 11355, 23603,
   nil,   nil,   nil,  3322,   nil,   705,   nil,   nil,   529,   nil,
   nil,   nil, 25159, 25218, 11493, 11631,   -51, 11769, 11900, 12031,
    44,   nil,  4777,  4908,   260,   370,   782,   786,   795,   799,
  2260,  2516,  2415,  5039,  1460,  1591,  1998,  2129,  5170,  5301,
  5432,  5563,  5694,   829,  1222,  5825,  5956, 12162,   -34,   nil,
 12293,   nil, 12431,   nil, 12569,   nil,   167,   nil,   nil, 23730,
 23785, 23864,    -7,   nil,   744,   nil,   nil,   744,   746,   nil,
   nil, 12700,   166,   167,   794,   nil,   nil, 12831,   798,   766,
   nil,   nil,   769, 12962,   807, 13093, 25277, 25336, 13231, 25395,
   170,   817,   nil,   nil, 13369,   784,   nil, 13500, 13631, 13762,
 25454, 25513,  3453, 13893,   904,   904,   838,   nil,   nil, 14024,
   nil,   nil, 14162,   nil,   nil,   nil,   nil, 14300, 14431,   843,
   nil,  2404,   nil,   nil, 14562,   362,   nil,   nil,   594,  2535,
   nil,   826,   nil,   nil,  1064,   881,   nil,   846,   nil,   966,
   nil,   815,   792,   nil,   nil, 14693,   933,   nil,   nil, 14824,
   203,   204,   932,   940, 14955,   nil, 15086, 25572, 25631, 15224,
    16,   nil,  1161,   nil, 25690, 15362, 25749,   nil,   nil, 15500,
   374, 15631,   nil,  9789,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   nil,
   nil,   nil,   823,   nil,   nil,   nil,   nil,   nil,   826, 15762,
   568,    98, 15893, 16024,   867,   nil,   nil,   nil, 16155,   869,
   nil, 16286,   878,   nil, 16417, 16548,   202,   251, 22835, 22965,
   881,   885,   667,   nil,  1860,   nil, 10051,   nil, 16679,   852,
   nil,   892, 16810,   nil,   nil, 16941,   nil,   nil,   nil,   nil,
   nil,   nil, 17072,   nil,   890, 17203, 17341,  1722,   856,   nil,
   nil,   901, 17479, 17610,   nil,   970,   -25, 17741,   869,   nil,
   906,   207,   229,   911,   252,   260,   917,   925,   934,   899,
 17872,  3584,   961,   963,    66,  1019, 18003,   nil,   nil,   419,
   nil,   924,  1026,   nil,   nil,   nil,   910,   913,  1224,   914,
   nil,   nil,   915,   916,   nil,   917, 25808,   nil,   nil,   965,
  1097,   nil,   695,   nil,  1042,   nil,   nil,   nil,   nil,   nil,
  1050,   nil,  1051, 18134,   971,    29,    40,    80,   121,   974,
 18265,  1722,   nil,   978,   980, 18396,   487,   nil,   212, 18527,
 18658, 10444,   552, 18789,   nil,   950,   953,   nil,   954,   955,
   965,   nil,   956,   nil, 24805,  1003,   761, 18920,   nil,   nil,
   nil,   968, 19051, 19182, 19313,   nil,  3715,   nil,  3846,   nil,
   nil,  3977,   nil,  4108,   nil,  4239, 19444, 19575, 19706,   283,
   321,   nil,   967,   997,   981,  1099,   nil,   nil,   nil,   999,
   nil,   984, 19837,   nil,  1001,  1104,   996,   232,   nil,   nil,
   nil,  1118,   nil, 19968,  1003,  1044,   nil,   nil,   nil,   nil,
   nil,  1219,   nil,  1350,   nil,   nil, 10837,   nil,  1481,   nil,
   nil,  1048,   nil,   nil,   833,  1129,   nil, 20099,  1130, 20230,
 20361,   nil,   nil,    45,    50,  1292,   229,   nil,  1133,   nil,
   nil,  1134,  1135,  1023,   nil,   nil,   471,   nil,   nil, 12975,
   nil,   335,   nil,  1612,   nil, 20492,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1044,  1030,   nil,  4377,   nil,  4515, 20623,
 20754, 20885,   849,   nil,  1051,   nil,   nil, 21016,  1033,   nil,
   nil,   nil, 21154,   nil,   nil,    72, 21285,   nil,  1036,  1038,
  1039,  1040,   nil,   nil,    76,   nil,  1158,  1160, 21416, 21547,
   nil,   nil, 21678,   nil,   nil,  1081,   nil,  1046,   nil,  1047,
  1048,  1060,  1051,   nil,  1064,   nil, 13382,   nil,  4646,   465,
   nil,   nil,   nil,   nil,   nil, 21809,   nil, 21940,    80,  1355,
  1137,    84,   nil,   nil,  2019,   nil,   nil,   nil, 22071,   nil,
   nil,   nil,   447, 22202,  1185,   nil,   nil, 14575,   nil,  2150,
   nil,  2281,   nil,  2950,   nil, 22333,   nil,  1214,  1191, 22464,
 25867, 25926,    88,  1077,   743,   nil,   nil,   nil,  1198,   nil,
  1084,  1085,  1086,  1096,  1214,   nil,   nil,  1132,    96,   110,
   176,   211,   nil,   nil,   nil,  3081,   nil,   nil,   nil,   nil,
   nil,   129,  1099,   nil ]

racc_action_default = [
    -3,  -587,    -1,  -575,    -4,    -6,  -587,  -587,  -587,  -587,
   -25,  -587,  -587,  -587,  -283,  -587,   -37,   -40,  -587,  -587,
   -45,   -47,   -48,  -295,  -333,  -334,   -52,  -261,  -261,  -261,
   -67,   -10,   -71,   -79,   -81,  -587,  -478,  -587,  -587,  -587,
  -587,  -587,  -577,  -237,  -276,  -277,  -278,  -279,  -280,  -281,
  -282,  -565,  -285,  -587,  -586,  -555,  -303,  -586,  -587,  -587,
  -308,  -311,  -575,  -587,  -587,  -325,  -587,  -335,  -336,  -421,
  -422,  -423,  -424,  -425,  -586,  -428,  -586,  -586,  -586,  -586,
  -586,  -455,  -461,  -462,  -587,  -467,  -468,  -469,  -470,  -471,
  -472,  -473,  -474,  -475,  -476,  -477,  -480,  -481,  -587,    -2,
  -576,  -582,  -583,  -584,  -587,  -587,  -587,  -587,  -587,    -3,
   -13,  -587,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -117,
  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -587,   -18,  -115,   -10,  -587,  -587,  -586,
  -586,  -587,  -587,  -587,  -587,  -587,  -587,  -587,   -43,  -587,
  -478,  -587,  -283,  -587,  -587,   -10,  -587,   -44,  -227,  -587,
  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
  -587,  -587,  -587,  -587,  -587,  -587,  -234,  -390,  -392,   -49,
  -238,  -254,  -268,  -268,  -258,  -587,  -269,  -587,  -295,  -333,
  -334,  -586,  -557,  -587,  -587,   -50,   -51,  -587,  -587,  -587,
   -57,  -586,  -587,  -302,  -396,  -404,  -406,   -65,  -402,   -66,
  -587,  -575,   -11,   -67,   -10,  -587,  -587,   -72,   -75,   -10,
  -478,  -587,  -587,  -283,  -298,  -577,  -587,  -337,  -403,  -587,
   -77,  -587,   -83,  -290,  -463,  -464,  -587,  -212,  -213,  -228,
  -587,  -578,   -10,  -577,  -239,  -577,  -579,  -579,  -587,  -587,
  -579,  -587,  -304,  -305,  -587,  -587,  -354,  -355,  -362,  -586,
  -521,  -552,  -552,  -372,  -586,  -586,  -389,  -487,  -488,  -490,
  -491,  -495,  -496,  -520,  -522,  -523,  -524,  -525,  -526,  -587,
  -539,  -544,  -545,  -547,  -548,  -549,  -587,   -46,  -587,  -587,
  -587,  -587,  -575,  -587,  -576,  -478,  -587,  -587,  -283,  -587,
  -528,  -529,  -104,  -587,  -106,  -587,  -283,  -587,  -322,  -478,
  -587,  -108,  -109,  -146,  -147,  -163,  -168,  -175,  -178,  -328,
  -587,  -553,  -587,  -426,  -587,  -441,  -587,  -443,  -587,  -587,
  -587,  -433,  -587,  -587,  -439,  -587,  -454,  -456,  -457,  -458,
  -459,  -465,  -466,  1034,    -5,  -585,   -19,   -20,   -21,   -22,
   -23,  -587,  -587,   -15,   -16,   -17,  -587,  -587,   -26,   -35,
   -36,  -587,  -587,   -27,  -193,  -587,  -587,  -566,  -567,  -261,
  -399,  -568,  -569,  -566,  -261,  -567,  -401,  -571,  -572,  -261,
  -566,  -567,   -33,  -201,   -34,  -587,   -38,   -39,  -191,  -269,
   -41,   -42,  -587,  -587,  -586,  -586,  -290,  -587,  -587,  -587,
  -587,  -301,  -202,  -203,  -204,  -205,  -206,  -207,  -208,  -209,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -229,  -230,  -231,  -232,  -587,  -586,  -255,
  -587,  -256,  -587,  -266,  -587,  -270,  -587,  -560,  -562,  -261,
  -261,  -261,  -586,   -58,  -577,  -249,  -250,  -268,  -268,  -262,
  -263,  -587,  -586,  -586,  -587,  -297,    -9,  -576,  -587,   -68,
  -288,   -84,   -73,  -587,  -587,  -586,  -587,  -587,  -586,  -587,
  -290,  -587,  -463,  -464,  -587,   -80,   -85,  -587,  -587,  -587,
  -587,  -587,  -233,  -587,  -413,  -587,  -587,  -240,  -241,  -581,
  -580,  -243,  -581,  -293,  -294,  -556,  -351,   -10,   -10,  -587,
  -353,  -587,  -374,  -385,  -587,  -587,  -370,  -371,  -587,  -380,
  -382,  -587,  -387,  -489,  -494,  -587,  -521,  -587,  -530,  -587,
  -532,  -534,  -538,  -546,  -550,   -10,  -338,  -339,  -340,   -10,
  -587,  -587,  -587,  -587,   -10,  -408,  -586,  -587,  -587,  -586,
  -290,  -317,  -104,  -105,  -587,  -586,  -587,  -320,  -482,  -587,
  -587,  -587,  -326,  -519,  -330,  -573,  -574,  -577,  -427,  -442,
  -445,  -446,  -448,  -429,  -444,  -430,  -431,  -432,  -587,  -435,
  -437,  -438,  -587,  -460,    -7,   -14,  -116,   -24,  -275,  -587,
  -291,  -292,  -587,  -587,   -61,  -247,  -248,  -397,  -587,   -63,
  -400,  -587,   -59,  -398,  -587,  -587,  -566,  -567,  -566,  -567,
  -587,  -587,  -191,  -300,  -587,  -365,  -577,  -367,   -10,  -268,
  -267,  -271,  -587,  -558,  -559,  -587,   -53,  -393,   -54,  -394,
   -55,  -395,   -10,  -245,  -587,  -251,  -253,   -45,  -587,  -260,
  -264,  -587,   -10,   -10,  -296,   -12,   -68,  -587,   -76,   -82,
  -587,  -566,  -567,  -586,  -570,  -289,  -587,  -587,  -586,   -78,
  -587,  -200,  -210,  -211,  -587,  -586,  -586,  -286,  -287,  -579,
  -244,  -587,  -587,  -352,  -363,  -373,  -586,  -586,  -364,  -552,
  -497,  -551,  -586,  -586,  -540,  -586,  -587,  -290,  -527,  -587,
  -587,  -537,  -586,  -341,  -586,  -309,  -342,  -343,  -344,  -312,
  -587,  -315,  -587,  -587,  -587,  -566,  -567,  -570,  -289,  -587,
  -587,  -104,  -107,  -570,  -587,   -10,  -587,  -484,  -587,   -10,
   -10,  -519,  -587,  -493,  -498,  -552,  -552,  -503,  -505,  -505,
  -505,  -518,  -521,  -542,  -587,  -587,  -587,   -10,  -434,  -436,
  -440,  -273,  -587,  -587,  -587,   -30,  -196,   -31,  -197,   -62,
   -32,  -198,   -64,  -199,   -60,  -192,  -587,  -587,  -587,  -292,
  -291,  -235,  -345,  -587,  -577,  -587,  -257,  -272,  -561,  -587,
  -246,  -268,  -587,  -265,  -587,  -587,   -74,  -291,  -292,   -86,
  -299,  -586,  -360,   -10,  -414,  -586,  -415,  -416,  -242,  -356,
  -357,  -587,  -383,  -587,  -386,  -369,  -587,  -377,  -587,  -379,
  -388,  -289,  -531,  -533,  -536,  -587,  -358,  -587,  -587,   -10,
   -10,  -314,  -316,  -587,  -291,   -96,  -587,  -291,  -587,  -483,
  -323,  -587,  -587,  -577,  -486,  -492,  -587,  -501,  -502,  -587,
  -512,  -587,  -515,  -587,  -516,  -587,  -331,  -554,  -447,  -450,
  -451,  -452,  -453,  -587,  -274,   -28,  -194,   -29,  -195,  -587,
  -587,  -587,  -587,  -366,  -587,  -391,   -56,  -252,  -268,  -405,
  -407,    -8,   -10,  -420,  -361,  -587,  -587,  -418,  -586,  -586,
  -586,  -586,  -535,  -306,  -587,  -307,  -587,  -587,  -587,   -10,
  -318,  -321,   -10,  -327,  -329,  -587,  -499,  -552,  -504,  -505,
  -505,  -505,  -587,  -543,  -505,  -541,  -519,  -449,  -236,  -577,
  -347,  -349,  -350,  -368,  -259,  -587,  -419,   -10,  -478,  -587,
  -587,  -283,  -417,  -384,  -587,  -375,  -378,  -381,   -10,  -310,
  -313,  -271,  -586,   -10,  -587,  -485,  -500,  -587,  -508,  -587,
  -510,  -587,  -513,  -587,  -517,   -10,  -346,  -587,  -413,  -586,
  -587,  -587,  -290,  -586,  -586,  -409,  -410,  -411,  -587,  -324,
  -505,  -505,  -505,  -505,  -587,  -348,  -412,  -587,  -566,  -567,
  -570,  -289,  -376,  -359,  -319,  -587,  -506,  -509,  -511,  -514,
  -332,  -291,  -505,  -507 ]

clist = [
'13,389,725,252,252,252,297,297,310,603,555,595,599,287,318,407,217,457',
'209,209,103,545,326,209,209,209,115,115,253,253,253,13,291,291,501,12',
'430,297,297,377,336,683,780,744,454,573,251,251,251,5,580,582,99,209',
'209,576,577,100,209,209,320,300,209,366,375,734,12,791,558,561,358,359',
'565,865,362,755,759,315,513,103,663,110,195,588,823,115,394,118,118',
'587,283,613,953,960,2,841,962,1,414,115,13,683,921,194,209,209,209,209',
'13,13,285,363,678,371,629,422,416,417,418,419,639,249,265,266,868,497',
'692,911,407,514,736,693,680,701,680,12,702,703,743,519,687,689,691,12',
'12,391,396,398,319,5,405,322,323,699,369,617,390,420,5,435,436,624,312',
'360,869,361,870,770,983,775,621,942,380,439,444,449,779,432,1015,623',
'794,962,790,956,959,432,324,566,953,742,248,730,498,522,428,433,13,209',
'209,209,209,452,456,421,209,209,209,209,523,1005,763,845,115,925,393',
'13,209,400,638,403,898,448,315,315,796,791,629,797,883,946,740,12,914',
'949,863,683,,,,509,510,511,,,,,,,760,,12,517,252,708,,,,,,,252,541,297',
',719,274,278,,,,,209,209,506,,297,518,253,,556,209,557,546,,13,253,',
',291,13,569,945,,,251,251,,,103,501,,291,,251,,,,,336,,,,13,,,297,532',
'744,,12,,,,588,12,1023,751,680,680,749,526,,772,,,527,,,,,790,584,208',
'283,270,277,279,12,283,663,734,940,1006,744,297,622,,,799,,209,209,',
'528,,,,,534,516,520,,600,601,,995,,313,524,103,375,,357,357,,27,357',
',,,,,209,,618,,,,,,791,,,27,27,,,,27,27,27,602,,,,929,27,,,,15,,,,670',
'671,,836,357,357,357,357,,,439,444,,,27,27,,115,,27,27,115,1016,27,950',
',951,15,852,854,,,683,744,857,859,826,860,809,855,209,209,,812,,,814',
',,878,,,457,881,882,,694,848,448,370,588,27,,315,315,27,27,27,27,27',
'27,710,645,,717,,646,,118,,,679,118,297,713,887,888,718,,,546,790,,',
'297,,15,209,713,,,546,939,13,15,15,460,461,,291,274,209,278,,209,,470',
',,,291,,1010,,297,680,,,,209,,,448,,315,,,315,12,,729,846,764,13,13',
'769,448,,,,738,774,705,,967,713,,27,27,27,27,27,,978,713,27,27,27,27',
'795,,13,,680,932,13,27,27,12,12,13,,209,,,209,,,826,,,209,15,756,756',
'209,,209,,,,455,,448,1007,315,12,776,315,448,12,15,,777,315,12,984,824',
',,973,975,976,977,,805,807,,209,209,,810,27,27,209,336,,456,,,209,27',
',,,27,,986,,,27,,,656,13,,,297,660,,357,357,,656,546,,,,13,1014,297',
',,27,,964,831,839,13,13,15,,432,291,,15,,,,12,,,627,,,1022,291,,,,,',
',12,,896,,,15,,,,,12,12,,,,,873,,27,27,656,656,656,,,,,,,654,,,,,659',
',,,448,662,,,,209,,,,,13,,27,,13,13,,876,,,,,,,,14,,,879,,880,,13,,884',
'905,907,,209,209,,,,,,12,,918,115,12,12,,,,,,14,293,293,737,,686,688',
'690,,,,12,,745,,,,,,,,,13,,313,,,,27,27,,,368,376,36,,,,,,,,,,739,,209',
',13,13,,,,,,788,724,12,934,,,,286,,,36,290,290,,14,,,756,890,892,894',
',14,14,297,,,783,12,12,27,,,,,,27,786,,,,,365,379,27,379,13,27,,996',
'969,741,,,741,,,,,,,,27,13,,,13,357,,778,,15,,,,656,27,27,660,36,656',
'12,,1017,,,,36,36,,,13,,,,,713,,12,787,,12,13,,27,,,13,27,,14,15,15',
'27,,27,,,27,13,,,,209,27,,12,,27,14,27,,,,,,,12,,15,,,12,15,448,,315',
',15,,,,,,12,,,,788,,,27,27,,,,,27,,,,,427,27,,36,,,,988,990,992,,,994',
'783,,27,,,,286,,,36,786,,,14,,,27,293,14,,,,,455,,,27,27,,,293,,,357',
',,,15,,,,14,,928,,,,,930,,931,15,,,,1026,1027,1028,1029,,,15,15,,,,',
',,,376,,787,,,286,,1033,36,,286,,290,36,,954,,,,,,,,,27,290,,,,27,,',
',27,27,783,36,,783,376,783,,783,,,947,,,786,,786,27,786,,,,,27,27,,357',
',,,15,379,,,15,15,,,,,,,,,788,,,,,,,,15,,,,,,,,,,1003,27,,,,,,,379,783',
',741,,1011,787,1012,787,1013,787,786,,,,,,27,,27,27,,,,,,,,15,,,,783',
',783,,783,,783,,,,786,1032,786,,786,,786,,,,,,15,15,,,,,,,,,,,,,,,783',
',27,787,,,,,,,786,,14,,,,,,293,27,,,27,,,,,,,293,,,,,787,,787,15,787',
',787,972,,,,,,27,,,,,14,14,15,,,15,27,376,,,,27,,,,,,,,,787,,,27,,36',
',27,14,,15,290,14,,,,,14,,,,15,290,,,,15,,,,,,,,,,,314,15,,327,,731',
'732,,36,36,,,,,,379,,,,,395,,397,397,401,404,397,,,,,,,752,,,36,754',
',,36,,762,,,36,,,,,,218,,,14,250,250,250,,,,,,,,,,,14,,,307,308,309',
',,,,14,14,,,,293,,,250,250,,,,,,,,,293,,,,,,,,,,,,,,,,,,,,825,,,36,',
',,,,,,,,,829,,,36,,,,,321,,834,835,,36,36,314,314,,290,,,14,,,,14,14',
',,,,290,,,,,,,,,,,902,14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,395,,,,,,',
',,36,515,,14,36,36,,,,,,,,250,434,250,250,,,903,453,458,36,,,,,,,14',
'14,,,,,218,,472,473,474,475,476,477,478,479,480,481,482,483,484,485',
'486,487,488,489,490,491,492,493,494,495,496,,,429,924,,,36,,,250,459',
'250,,,,,,250,250,,14,,,,971,250,250,,,936,937,,36,36,250,,,14,,,14,',
',,,,,,,,,,,,,,,,,,503,,505,,552,14,,,507,508,,,,,,,14,,,,,14,966,,,36',
',,,968,,,,14,,,,,,982,,,36,,,36,,655,,,,,,,,,,655,,,,,,,,,,998,,,36',
',314,314,,,,,1004,,,36,,1008,,,36,,,,,,,,,,,,36,,,,,,,,675,,,,,,,,,',
',655,655,655,675,,,,,250,,,,,675,675,,,,,,,,,,,,314,,,314,,,,,,,,,,',
',250,250,,453,672,434,,,,,,,,,,,,,648,,,,,,,,,,,,,,,674,,,250,,250,',
'250,,,,,,,,,,,,,,,,314,697,,314,,,,,,314,,,,,,250,,,250,,,,,,,,,721',
'722,723,,681,,321,,684,,,,250,,,250,,,,,,,,,,698,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,250,,,250,681,,,321,,250,,,,,,,,,,,,655,,,,,655,,,,,,',
'842,847,,,,,,,,,250,,,806,808,,,,,811,,,813,,,672,815,842,,842,,,,,',
',,,,,,,,250,,,250,,,,,,,,,,250,250,,,,801,,,,,,,,,,,,,,,,,,,,,,,,,,250',
',,,,,,827,,,828,,,,,,,,,,681,321,,,,,,,,923,,,,927,,,,250,,,,,,,,,,',
',,,844,,,,,,250,,,,,,,,,,,,,,,,,,,250,906,908,,,,,,,,,,459,,806,808',
'811,,,,,,,,,,,,,,250,,885,,,,,,,,,,,,,,,,,,,904,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,459,,,,,,,,,,,,250,842,,,,,,,,,,,,,908,906,958,,314,,,,250',
'842,,,,,,,,,,,,,,,,,,,,250,,,,,,,,955,,,,,,,,,,,,,,,,,,,250,,,321,,',
',,,,,,,,,,,,,,,,,,981,,,,,,,,,,250,,,,,,,,,,,,,,,,,981' ]
        racc_goto_table = arr = ::Array.new(2463, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,48,10,57,57,57,53,53,52,83,8,80,80,42,22,48,19,17,21,21,86,44,111',
'21,21,21,49,49,59,59,59,21,21,21,65,20,25,53,53,47,114,162,87,155,25',
'119,30,30,30,7,119,119,4,21,21,117,117,6,21,21,59,43,21,21,21,113,20',
'151,58,58,16,16,58,81,16,82,82,30,36,86,64,14,14,154,105,49,135,51,51',
'156,39,46,159,107,2,11,108,1,5,49,21,162,12,15,21,21,21,21,21,21,40',
'4,37,18,139,28,16,16,16,16,139,32,32,32,11,54,37,55,48,62,121,63,60',
'66,60,20,37,37,121,67,64,64,64,20,20,75,136,136,76,7,136,77,79,60,84',
'85,88,7,7,22,22,89,90,91,92,93,94,95,96,97,98,99,100,34,34,34,101,57',
'107,102,103,108,121,104,106,57,109,110,159,112,122,60,123,125,19,19',
'21,21,21,21,21,19,19,2,21,21,21,21,126,127,128,129,49,130,134,21,21',
'137,138,140,141,49,30,30,142,151,139,143,145,148,149,20,105,153,157',
'162,,,,34,34,34,,,,,,,83,,20,57,57,44,,,,,,,57,52,53,,44,61,61,,,,,21',
'21,135,,53,59,59,,52,21,52,42,,21,59,,,21,21,111,105,,,30,30,,,86,65',
',21,,30,,,,,114,,,,21,,,53,43,155,,20,,,,154,20,81,154,60,60,156,4,',
'46,,,6,,,,,121,21,27,39,35,35,35,20,39,64,113,82,11,155,53,47,,,139',
',21,21,,40,,,,,40,32,32,,16,16,,87,,27,32,86,21,,27,27,,38,27,,,,,,21',
',86,,,,,,151,,,38,38,,,,38,38,38,4,,,,121,38,,,,24,,,,22,22,,44,27,27',
'27,27,,,34,34,,,38,38,,49,,38,38,49,10,38,121,,121,24,119,119,,,162',
'155,119,119,65,119,36,117,21,21,,36,,,36,,,8,,,17,8,8,,52,58,49,24,154',
'38,,30,30,38,38,38,38,38,38,22,14,,22,,14,,51,,,59,51,53,34,117,117',
'34,,,42,121,,,53,,24,21,34,,,42,80,21,24,24,27,27,,21,61,21,61,,21,',
'27,,,,21,,121,,53,60,,,,21,,,49,,30,,,30,20,,59,25,22,21,21,22,49,,',
',21,22,7,,80,34,,38,38,38,38,38,,80,34,38,38,38,38,52,,21,,60,154,21',
'38,38,20,20,21,,21,,,21,,,65,,,21,24,86,86,21,,21,,,,24,,49,83,30,20',
'16,30,49,20,24,,86,30,20,8,111,,,119,119,119,119,,19,19,,21,21,,19,38',
'38,21,114,,19,,,21,38,,,,38,,117,,,38,,,61,21,,,53,61,,27,27,,61,42',
',,,21,8,53,,,38,,65,59,42,21,21,24,,57,21,,24,,,,20,,,27,,,119,21,,',
',,,,20,,48,,,24,,,,,20,20,,,,,57,,38,38,61,61,61,,,,,,,35,,,,,35,,,',
'49,35,,,,21,,,,,21,,38,,21,21,,16,,,,,,,,23,,,86,,86,,21,,86,19,19,',
'21,21,,,,,,20,,57,49,20,20,,,,,,23,23,23,120,,35,35,35,,,,20,,120,,',
',,,,,,21,,27,,,,38,38,,,23,23,45,,,,,,,,,,116,,21,,21,21,,,,,,120,27',
'20,16,,,,9,,,45,45,45,,23,,,86,152,152,152,,23,23,53,,,147,20,20,38',
',,,,,38,116,,,,,45,45,38,45,21,38,,52,21,118,,,118,,,,,,,,38,21,,,21',
'27,,27,,24,,,,61,38,38,61,45,61,20,,22,,,,45,45,,,21,,,,,34,,20,118',
',20,21,,38,,,21,38,,23,24,24,38,,38,,,38,21,,,,21,38,,20,,38,23,38,',
',,,,,20,,24,,,20,24,49,,30,,24,,,,,,20,,,,120,,,38,38,,,,,38,,,,,9,38',
',45,,,,152,152,152,,,152,147,,38,,,,9,,,45,116,,,23,,,38,23,23,,,,,24',
',,38,38,,,23,,,27,,,,24,,,,23,,120,,,,,120,,120,24,,,,152,152,152,152',
',,24,24,,,,,,,,23,,118,,,9,,152,45,,9,,45,45,,120,,,,,,,,,38,45,,,,38',
',,,38,38,147,45,,147,23,147,,147,,,116,,,116,,116,38,116,,,,,38,38,',
'27,,,,24,45,,,24,24,,,,,,,,,120,,,,,,,,24,,,,,,,,,,120,38,,,,,,,45,147',
',118,,120,118,120,118,120,118,116,,,,,,38,,38,38,,,,,,,,24,,,,147,,147',
',147,,147,,,,116,120,116,,116,,116,,,,,,24,24,,,,,,,,,,,,,,,147,,38',
'118,,,,,,,116,,23,,,,,,23,38,,,38,,,,,,,23,,,,,118,,118,24,118,,118',
'24,,,,,,38,,,,,23,23,24,,,24,38,23,,,,38,,,,,,,,,118,,,38,,45,,38,23',
',24,45,23,,,,,23,,,,24,45,,,,24,,,,,,,,,,,56,24,,56,,9,9,,45,45,,,,',
',45,,,,,56,,56,56,56,56,56,,,,,,,9,,,45,9,,,45,,9,,,45,,,,,,29,,,23',
'29,29,29,,,,,,,,,,,23,,,29,29,29,,,,,23,23,,,,23,,,29,29,,,,,,,,,23',
',,,,,,,,,,,,,,,,,,,9,,,45,,,,,,,,,,,9,,,45,,,,,26,,9,9,,45,45,56,56',
',45,,,23,,,,23,23,,,,,45,,,,,,,,,,,23,23,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,56,,,,,,,,,45,56,,23,45,45,,,,,,,,29,29,29,29,,,9,29,29,45,,,',
',,,23,23,,,,,29,,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,,,26,9,,,45,,,29,26,29,,,,,,29,29,,23,,,,23',
'29,29,,,9,9,,45,45,29,,,23,,,23,,,,,,,,,,,,,,,,,,,,26,,26,,29,23,,,26',
'26,,,,,,,23,,,,,23,9,,,45,,,,45,,,,23,,,,,,9,,,45,,,45,,56,,,,,,,,,',
'56,,,,,,,,,,9,,,45,,56,56,,,,,9,,,45,,9,,,45,,,,,,,,,,,,45,,,,,,,,56',
',,,,,,,,,,56,56,56,56,,,,,29,,,,,56,56,,,,,,,,,,,,56,,,56,,,,,,,,,,',
',29,29,,29,29,29,,,,,,,,,,,,,26,,,,,,,,,,,,,,,29,,,29,,29,,29,,,,,,',
',,,,,,,,,56,29,,56,,,,,,56,,,,,,29,,,29,,,,,,,,,29,29,29,,26,,26,,26',
',,,29,,,29,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,29,26,',
',26,,29,,,,,,,,,,,,56,,,,,56,,,,,,,56,56,,,,,,,,,29,,,29,29,,,,,29,',
',29,,,29,29,56,,56,,,,,,,,,,,,,,29,,,29,,,,,,,,,,29,29,,,,26,,,,,,,',
',,,,,,,,,,,,,,,,,,29,,,,,,,26,,,26,,,,,,,,,,26,26,,,,,,,,56,,,,56,,',
',29,,,,,,,,,,,,,,26,,,,,,29,,,,,,,,,,,,,,,,,,,29,29,29,,,,,,,,,,26,',
'29,29,29,,,,,,,,,,,,,,29,,26,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,26,,,,,,,,,,,,29,56,,,,,,,,,,,,,29,29,29,,56,,,,29,56,,,',
',,,,,,,,,,,,,,,,29,,,,,,,,26,,,,,,,,,,,,,,,,,,,29,,,26,,,,,,,,,,,,,',
',,,,,,,26,,,,,,,,,,29,,,,,,,,,,,,,,,,,26' ]
        racc_goto_check = arr = ::Array.new(2463, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    97,    94,   nil,    49,    -2,    54,    49,  -302,   852,
  -552,  -630,  -739,   nil,    74,    95,    12,  -188,    50,    -3,
    35,     0,   -40,   790,   420,  -161,  1497,   324,     5,  1446,
    23,   nil,    98,   nil,   -28,   317,  -192,  -386,   385,    59,
    79,   nil,   -19,    28,  -280,   855,  -282,   -25,   -65,    19,
   nil,    80,   -34,   -26,  -121,  -694,  1360,   -20,  -248,     5,
  -368,   238,  -142,  -383,  -369,  -219,  -388,  -133,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,    93,    95,   nil,    95,
  -347,  -679,  -525,  -354,    91,  -222,    17,  -581,    90,  -229,
   110,   103,  -591,   104,  -593,  -444,  -772,  -448,  -208,  -709,
   107,  -446,  -210,  -444,  -713,  -592,  -728,  -819,  -816,   129,
  -137,   -35,  -390,  -506,   -17,   nil,   290,  -276,   352,  -284,
   253,  -441,   169,   -55,   nil,   -82,   -68,  -773,  -395,  -515,
  -632,   nil,   nil,   nil,   142,    12,    70,   139,  -182,  -280,
   140,  -576,  -407,  -405,   nil,  -553,   nil,   280,  -657,  -345,
   nil,  -556,   106,  -656,  -266,  -536,  -260,  -516,   nil,  -799,
   nil,   nil,  -461 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   364,   282,   nil,   554,
   nil,   866,   nil,   281,   nil,   nil,   nil,    10,    11,    17,
   214,   306,   nil,   212,   213,   nil,   256,    16,   nil,    20,
    21,    22,   nil,    26,   716,   nil,   nil,   nil,   296,    30,
   nil,    32,    35,    34,   nil,   210,   374,   nil,   117,   442,
   116,    70,   822,    43,   nil,   nil,   572,   316,   nil,   317,
   254,   440,   nil,   nil,   657,   499,   nil,   nil,   272,    44,
    45,    46,    47,    48,    49,    50,   nil,   273,    56,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   343,   nil,
   nil,   nil,   329,   328,   735,   331,   332,   nil,   333,   nil,
   334,   335,   nil,   nil,   446,   nil,   nil,   nil,   nil,   nil,
   nil,    69,    71,    72,    73,   nil,   nil,   nil,   nil,   634,
   nil,   nil,   nil,   nil,   406,   782,   339,   341,   784,   342,
   785,   948,   nil,   789,   348,   350,   nil,   590,   591,   793,
   353,   356,   262 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  2, 142, :_reduce_2,
  0, 143, :_reduce_3,
  1, 143, :_reduce_4,
  3, 143, :_reduce_5,
  1, 145, :_reduce_none,
  4, 145, :_reduce_7,
  4, 148, :_reduce_8,
  2, 149, :_reduce_9,
  0, 153, :_reduce_10,
  1, 153, :_reduce_11,
  3, 153, :_reduce_12,
  0, 168, :_reduce_13,
  4, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_none,
  3, 147, :_reduce_17,
  2, 147, :_reduce_18,
  3, 147, :_reduce_19,
  3, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  4, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_26,
  3, 147, :_reduce_27,
  6, 147, :_reduce_none,
  6, 147, :_reduce_none,
  5, 147, :_reduce_30,
  5, 147, :_reduce_none,
  5, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_34,
  3, 147, :_reduce_35,
  3, 147, :_reduce_36,
  1, 147, :_reduce_none,
  3, 157, :_reduce_38,
  3, 157, :_reduce_39,
  1, 167, :_reduce_none,
  3, 167, :_reduce_41,
  3, 167, :_reduce_42,
  2, 167, :_reduce_43,
  2, 167, :_reduce_44,
  1, 167, :_reduce_none,
  1, 156, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_49,
  2, 159, :_reduce_50,
  2, 159, :_reduce_51,
  1, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 176, :_reduce_56,
  2, 170, :_reduce_57,
  3, 170, :_reduce_58,
  4, 170, :_reduce_59,
  5, 170, :_reduce_none,
  4, 170, :_reduce_61,
  5, 170, :_reduce_none,
  4, 170, :_reduce_63,
  5, 170, :_reduce_none,
  2, 170, :_reduce_65,
  2, 170, :_reduce_66,
  1, 158, :_reduce_67,
  3, 158, :_reduce_68,
  1, 180, :_reduce_69,
  3, 180, :_reduce_70,
  1, 179, :_reduce_71,
  2, 179, :_reduce_72,
  3, 179, :_reduce_73,
  5, 179, :_reduce_74,
  2, 179, :_reduce_75,
  4, 179, :_reduce_76,
  2, 179, :_reduce_77,
  4, 179, :_reduce_78,
  1, 179, :_reduce_79,
  3, 179, :_reduce_80,
  1, 182, :_reduce_81,
  3, 182, :_reduce_82,
  2, 181, :_reduce_83,
  3, 181, :_reduce_84,
  1, 184, :_reduce_85,
  3, 184, :_reduce_86,
  1, 183, :_reduce_87,
  4, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  2, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 164, :_reduce_95,
  4, 164, :_reduce_96,
  4, 164, :_reduce_97,
  3, 164, :_reduce_98,
  3, 164, :_reduce_99,
  3, 164, :_reduce_100,
  3, 164, :_reduce_101,
  2, 164, :_reduce_102,
  1, 164, :_reduce_none,
  1, 186, :_reduce_none,
  2, 187, :_reduce_105,
  1, 187, :_reduce_106,
  3, 187, :_reduce_107,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_111,
  1, 188, :_reduce_112,
  1, 154, :_reduce_113,
  1, 154, :_reduce_none,
  1, 155, :_reduce_115,
  3, 155, :_reduce_116,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 169, :_reduce_191,
  5, 169, :_reduce_192,
  3, 169, :_reduce_193,
  6, 169, :_reduce_194,
  6, 169, :_reduce_195,
  5, 169, :_reduce_196,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  4, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_202,
  3, 169, :_reduce_203,
  3, 169, :_reduce_204,
  3, 169, :_reduce_205,
  3, 169, :_reduce_206,
  3, 169, :_reduce_207,
  3, 169, :_reduce_208,
  3, 169, :_reduce_209,
  4, 169, :_reduce_210,
  4, 169, :_reduce_211,
  2, 169, :_reduce_212,
  2, 169, :_reduce_213,
  3, 169, :_reduce_214,
  3, 169, :_reduce_215,
  3, 169, :_reduce_216,
  3, 169, :_reduce_217,
  3, 169, :_reduce_218,
  3, 169, :_reduce_219,
  3, 169, :_reduce_220,
  3, 169, :_reduce_221,
  3, 169, :_reduce_222,
  3, 169, :_reduce_223,
  3, 169, :_reduce_224,
  3, 169, :_reduce_225,
  3, 169, :_reduce_226,
  2, 169, :_reduce_227,
  2, 169, :_reduce_228,
  3, 169, :_reduce_229,
  3, 169, :_reduce_230,
  3, 169, :_reduce_231,
  3, 169, :_reduce_232,
  3, 169, :_reduce_233,
  0, 194, :_reduce_234,
  0, 195, :_reduce_235,
  7, 169, :_reduce_236,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  1, 162, :_reduce_239,
  2, 162, :_reduce_240,
  2, 162, :_reduce_241,
  4, 162, :_reduce_242,
  2, 162, :_reduce_243,
  3, 162, :_reduce_244,
  3, 201, :_reduce_245,
  2, 203, :_reduce_none,
  1, 204, :_reduce_247,
  1, 204, :_reduce_none,
  1, 202, :_reduce_249,
  1, 202, :_reduce_none,
  2, 202, :_reduce_251,
  4, 202, :_reduce_252,
  2, 202, :_reduce_253,
  1, 172, :_reduce_254,
  2, 172, :_reduce_255,
  2, 172, :_reduce_256,
  4, 172, :_reduce_257,
  1, 172, :_reduce_258,
  4, 206, :_reduce_none,
  1, 206, :_reduce_none,
  0, 208, :_reduce_261,
  2, 175, :_reduce_262,
  1, 207, :_reduce_none,
  2, 207, :_reduce_264,
  3, 207, :_reduce_265,
  2, 200, :_reduce_266,
  2, 205, :_reduce_267,
  0, 205, :_reduce_268,
  1, 197, :_reduce_269,
  2, 197, :_reduce_270,
  3, 197, :_reduce_271,
  4, 197, :_reduce_272,
  3, 165, :_reduce_273,
  4, 165, :_reduce_274,
  2, 165, :_reduce_275,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  0, 230, :_reduce_285,
  4, 193, :_reduce_286,
  4, 193, :_reduce_287,
  3, 193, :_reduce_288,
  3, 193, :_reduce_289,
  2, 193, :_reduce_290,
  4, 193, :_reduce_291,
  4, 193, :_reduce_292,
  3, 193, :_reduce_293,
  3, 193, :_reduce_294,
  1, 193, :_reduce_295,
  4, 193, :_reduce_296,
  3, 193, :_reduce_297,
  1, 193, :_reduce_298,
  5, 193, :_reduce_299,
  4, 193, :_reduce_300,
  3, 193, :_reduce_301,
  2, 193, :_reduce_302,
  1, 193, :_reduce_none,
  2, 193, :_reduce_304,
  2, 193, :_reduce_305,
  6, 193, :_reduce_306,
  6, 193, :_reduce_307,
  0, 231, :_reduce_308,
  0, 232, :_reduce_309,
  7, 193, :_reduce_310,
  0, 233, :_reduce_311,
  0, 234, :_reduce_312,
  7, 193, :_reduce_313,
  5, 193, :_reduce_314,
  4, 193, :_reduce_315,
  5, 193, :_reduce_316,
  0, 235, :_reduce_317,
  0, 236, :_reduce_318,
  9, 193, :_reduce_319,
  0, 237, :_reduce_320,
  6, 193, :_reduce_321,
  0, 238, :_reduce_322,
  0, 239, :_reduce_323,
  8, 193, :_reduce_324,
  0, 240, :_reduce_325,
  0, 241, :_reduce_326,
  6, 193, :_reduce_327,
  0, 242, :_reduce_328,
  6, 193, :_reduce_329,
  0, 243, :_reduce_330,
  0, 244, :_reduce_331,
  9, 193, :_reduce_332,
  1, 193, :_reduce_333,
  1, 193, :_reduce_334,
  1, 193, :_reduce_335,
  1, 193, :_reduce_none,
  1, 161, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 245, :_reduce_345,
  4, 245, :_reduce_346,
  1, 246, :_reduce_347,
  3, 246, :_reduce_348,
  1, 247, :_reduce_349,
  1, 247, :_reduce_none,
  2, 219, :_reduce_351,
  3, 249, :_reduce_352,
  2, 249, :_reduce_353,
  1, 249, :_reduce_354,
  1, 249, :_reduce_none,
  3, 250, :_reduce_356,
  3, 250, :_reduce_357,
  1, 221, :_reduce_358,
  5, 221, :_reduce_359,
  1, 151, :_reduce_none,
  2, 151, :_reduce_361,
  1, 252, :_reduce_362,
  3, 252, :_reduce_363,
  3, 253, :_reduce_364,
  1, 177, :_reduce_none,
  3, 177, :_reduce_366,
  1, 177, :_reduce_367,
  4, 177, :_reduce_368,
  4, 254, :_reduce_369,
  2, 254, :_reduce_370,
  2, 254, :_reduce_371,
  1, 254, :_reduce_372,
  2, 259, :_reduce_373,
  1, 259, :_reduce_374,
  6, 251, :_reduce_375,
  8, 251, :_reduce_376,
  4, 251, :_reduce_377,
  6, 251, :_reduce_378,
  4, 251, :_reduce_379,
  2, 251, :_reduce_380,
  6, 251, :_reduce_381,
  2, 251, :_reduce_382,
  4, 251, :_reduce_383,
  6, 251, :_reduce_384,
  2, 251, :_reduce_385,
  4, 251, :_reduce_386,
  2, 251, :_reduce_387,
  4, 251, :_reduce_388,
  1, 251, :_reduce_389,
  0, 263, :_reduce_390,
  5, 262, :_reduce_391,
  2, 173, :_reduce_392,
  4, 173, :_reduce_none,
  4, 173, :_reduce_none,
  4, 173, :_reduce_none,
  2, 218, :_reduce_396,
  4, 218, :_reduce_397,
  4, 218, :_reduce_398,
  3, 218, :_reduce_399,
  4, 218, :_reduce_400,
  3, 218, :_reduce_401,
  2, 218, :_reduce_402,
  1, 218, :_reduce_403,
  0, 265, :_reduce_404,
  5, 217, :_reduce_405,
  0, 266, :_reduce_406,
  5, 217, :_reduce_407,
  0, 268, :_reduce_408,
  6, 223, :_reduce_409,
  1, 267, :_reduce_410,
  1, 267, :_reduce_none,
  6, 150, :_reduce_412,
  0, 150, :_reduce_413,
  1, 269, :_reduce_414,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 270, :_reduce_417,
  1, 270, :_reduce_418,
  2, 152, :_reduce_419,
  1, 152, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_424,
  1, 273, :_reduce_none,
  2, 273, :_reduce_426,
  3, 274, :_reduce_427,
  1, 274, :_reduce_428,
  3, 211, :_reduce_429,
  3, 212, :_reduce_430,
  3, 213, :_reduce_431,
  3, 213, :_reduce_432,
  1, 277, :_reduce_433,
  3, 277, :_reduce_434,
  1, 278, :_reduce_435,
  2, 278, :_reduce_436,
  3, 214, :_reduce_437,
  3, 214, :_reduce_438,
  1, 280, :_reduce_439,
  3, 280, :_reduce_440,
  1, 275, :_reduce_441,
  2, 275, :_reduce_442,
  1, 276, :_reduce_443,
  2, 276, :_reduce_444,
  1, 279, :_reduce_445,
  0, 282, :_reduce_446,
  3, 279, :_reduce_447,
  0, 283, :_reduce_448,
  4, 279, :_reduce_449,
  1, 281, :_reduce_450,
  1, 281, :_reduce_451,
  1, 281, :_reduce_452,
  1, 281, :_reduce_none,
  2, 191, :_reduce_454,
  1, 191, :_reduce_455,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  3, 272, :_reduce_460,
  1, 271, :_reduce_461,
  1, 271, :_reduce_462,
  2, 271, :_reduce_463,
  2, 271, :_reduce_464,
  2, 271, :_reduce_465,
  2, 271, :_reduce_466,
  1, 185, :_reduce_467,
  1, 185, :_reduce_468,
  1, 185, :_reduce_469,
  1, 185, :_reduce_470,
  1, 185, :_reduce_471,
  1, 185, :_reduce_472,
  1, 185, :_reduce_473,
  1, 185, :_reduce_474,
  1, 185, :_reduce_475,
  1, 185, :_reduce_476,
  1, 185, :_reduce_477,
  1, 215, :_reduce_478,
  1, 160, :_reduce_479,
  1, 163, :_reduce_480,
  1, 163, :_reduce_none,
  1, 225, :_reduce_482,
  3, 225, :_reduce_483,
  2, 225, :_reduce_484,
  4, 227, :_reduce_485,
  2, 227, :_reduce_486,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 256, :_reduce_489,
  1, 256, :_reduce_490,
  1, 287, :_reduce_491,
  2, 288, :_reduce_492,
  1, 288, :_reduce_493,
  2, 289, :_reduce_494,
  1, 289, :_reduce_495,
  1, 255, :_reduce_496,
  3, 255, :_reduce_497,
  1, 290, :_reduce_498,
  3, 290, :_reduce_499,
  4, 291, :_reduce_500,
  2, 291, :_reduce_501,
  2, 291, :_reduce_502,
  1, 291, :_reduce_503,
  2, 292, :_reduce_504,
  0, 292, :_reduce_505,
  6, 285, :_reduce_506,
  8, 285, :_reduce_507,
  4, 285, :_reduce_508,
  6, 285, :_reduce_509,
  4, 285, :_reduce_510,
  6, 285, :_reduce_511,
  2, 285, :_reduce_512,
  4, 285, :_reduce_513,
  6, 285, :_reduce_514,
  2, 285, :_reduce_515,
  2, 285, :_reduce_516,
  4, 285, :_reduce_517,
  1, 285, :_reduce_518,
  0, 285, :_reduce_519,
  1, 294, :_reduce_none,
  1, 294, :_reduce_521,
  1, 248, :_reduce_522,
  1, 248, :_reduce_523,
  1, 248, :_reduce_524,
  1, 248, :_reduce_525,
  1, 295, :_reduce_526,
  3, 295, :_reduce_527,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 297, :_reduce_530,
  3, 297, :_reduce_none,
  1, 298, :_reduce_532,
  3, 298, :_reduce_533,
  1, 296, :_reduce_none,
  4, 296, :_reduce_none,
  3, 296, :_reduce_none,
  2, 296, :_reduce_none,
  1, 296, :_reduce_none,
  1, 260, :_reduce_539,
  3, 260, :_reduce_540,
  3, 299, :_reduce_541,
  1, 293, :_reduce_542,
  3, 293, :_reduce_543,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  2, 261, :_reduce_546,
  1, 261, :_reduce_547,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  2, 258, :_reduce_550,
  2, 257, :_reduce_551,
  0, 257, :_reduce_552,
  1, 228, :_reduce_553,
  4, 228, :_reduce_554,
  0, 216, :_reduce_555,
  2, 216, :_reduce_556,
  1, 199, :_reduce_557,
  3, 199, :_reduce_558,
  3, 302, :_reduce_559,
  2, 302, :_reduce_560,
  4, 302, :_reduce_561,
  2, 302, :_reduce_562,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  0, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_none,
  0, 196, :_reduce_586 ]

racc_reduce_n = 587

racc_shift_n = 1034

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :tIDENTIFIER => 50,
  :tFID => 51,
  :tGVAR => 52,
  :tIVAR => 53,
  :tCONSTANT => 54,
  :tLABEL => 55,
  :tCVAR => 56,
  :tNTH_REF => 57,
  :tBACK_REF => 58,
  :tSTRING_CONTENT => 59,
  :tINTEGER => 60,
  :tFLOAT => 61,
  :tREGEXP_END => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tPOW => 65,
  :tCMP => 66,
  :tEQ => 67,
  :tEQQ => 68,
  :tNEQ => 69,
  :tGEQ => 70,
  :tLEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tMATCH => 74,
  :tNMATCH => 75,
  :tJSDOT => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tAWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAMBDA => 129,
  :tLAMBEG => 130,
  :tLBRACK2 => 131,
  :tLBRACK => 132,
  :tJSLBRACK => 133,
  :tDSTAR => 134,
  :tLABEL_END => 135,
  :tEQL => 136,
  :tLOWEST => 137,
  "-@NUM" => 138,
  "+@NUM" => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tJSDOT",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tLBRACK2",
  "tLBRACK",
  "tJSLBRACK",
  "tDSTAR",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "\"-@NUM\"",
  "\"+@NUM\"",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "opt_nl",
  "primary",
  "@2",
  "@3",
  "none",
  "args",
  "trailer",
  "assocs",
  "block_arg",
  "paren_args",
  "opt_call_args",
  "rparen",
  "opt_paren_args",
  "opt_block_arg",
  "call_args2",
  "open_args",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "block_param",
  "f_block_optarg",
  "f_block_opt",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "f_arg",
  "f_rest_arg",
  "do_block",
  "@20",
  "operation3",
  "@21",
  "@22",
  "cases",
  "@23",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "@25",
  "sym",
  "f_args",
  "kwrest_mark",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_kwarg",
  "args_tail",
  "opt_args_tail",
  "f_optarg",
  "f_norm_arg",
  "f_arg_item",
  "f_margs",
  "f_marg",
  "f_marg_list",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_5(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = new_body(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_12(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_13(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_14(val, _values, result)
                      result = new_alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

def _reduce_18(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = new_if(val[1], val[2], val[0], nil)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = new_if(val[1], val[2], nil, val[0])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_while(val[1], val[2], val[0])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = new_until(val[1], val[2], val[0])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_rescue_mod(val[1], val[0], val[2])
                    
    result
end

# reduce 24 omitted

# reduce 25 omitted

def _reduce_26(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_27(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

# reduce 28 omitted

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = new_assign val[0], val[1], s(:svalue, val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:masgn, val[0], val[2])
                    
    result
end

# reduce 37 omitted

def _reduce_38(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = s(:and, val[0], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:or, val[0], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_unary_call(['!', []], val[1])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = new_return(val[0], val[1])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = new_break(val[0], val[1])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = new_next(val[0], val[1])
                    
    result
end

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = new_iter(val[1], val[2])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call(nil, val[0], val[1]) << val[2]
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

# reduce 60 omitted

def _reduce_61(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                    result = new_call(val[0], val[2], val[3])
                  
    result
end

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_72(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0] << s(:splat, val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                     result = (val[0] << s(:splat, val[2])).concat(val[4].children)
                   
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << s(:splat)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = (val[0] << s(:splat)).concat(val[3].children)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:array, s(:splat, val[1])).concat(val[3].children)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:array, s(:splat))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:array, s(:splat)).concat(val[2].children)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_88(val, _values, result)
                      args = val[2] ? val[2] : []
                      result = s(:attrasgn, val[0], :[]=, s(:arglist, *args))
                    
    result
end

def _reduce_89(val, _values, result)
                      result = new_call val[0], val[2], []
                    
    result
end

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = new_js_attrasgn(val[0], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = new_attrasgn(val[0], :[]=, val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_99(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

# reduce 103 omitted

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_112(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = s(:undef, val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

def _reduce_191(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_assign val[0], val[1], s(:rescue_mod, val[2], val[4])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_op_asgn1(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_195(val, _values, result)
                      raise ".JS[...] #{val[4]} is not supported"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

def _reduce_202(val, _values, result)
                      result = new_irange(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_erange(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call new_binary_call(new_int(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call new_binary_call(new_float(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[1], [:"+@", []], []
                      if [:int, :float].include? val[1].type
                        result = val[1]
                      end
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[1], [:"-@", []], []
                      if val[1].type == :int
                        val[1][1] = -val[1][1]
                        result = val[1]
                      elsif val[1].type == :float
                        val[1][1] = -val[1][1].to_f
                        result = val[1]
                      end
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_and(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_or(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_234(val, _values, result)
 lexer.cond_push 1 
    result
end

def _reduce_235(val, _values, result)
 lexer.cond_pop 
    result
end

def _reduce_236(val, _values, result)
                      result = new_if(val[1], val[0], val[3], val[6])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_240(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_242(val, _values, result)
                      val[0] << s(:hash, *val[2])
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [s(:hash, *val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = []
                    
    result
end

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = []
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = val[0]
                      add_block_pass val[0], val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                      add_block_pass result, val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                      result << val[3] if val[3]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                      add_block_pass result, val[0]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      lexer.cmdarg_push 1
                    
    result
end

def _reduce_262(val, _values, result)
                      lexer.cmdarg_pop
                      result = val[1]
                    
    result
end

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_block_pass(val[0], val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [new_splat(val[0], val[1])]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result  = val[0] << new_splat(val[2], val[3])
                    
    result
end

def _reduce_273(val, _values, result)
                      val[0] << val[2]
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_274(val, _values, result)
                      val[0] << s(:splat, val[3])
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

def _reduce_285(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:begin, val[2])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_paren(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_js_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_array(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_hash(val[0], val[1], val[2])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_return(val[0])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_unary_call(['!', []], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_unary_call(['!', []], new_nil(val[0]))
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_call(nil, val[0], [])
                      result << val[1]
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if(val[0], val[1], val[4], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = s(:while, val[2], val[5])
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:until, val[2], val[5])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = s(:case, val[1], *val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = s(:case, nil, *val[2])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = s(:case, nil, val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_318(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_319(val, _values, result)
                      result = s(:for, val[4], val[1], val[7])
                    
    result
end

def _reduce_320(val, _values, result)
                      # ...
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val[0], val[1], val[2], val[4], val[5]
                    
    result
end

def _reduce_322(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_323(val, _values, result)
                      # ...
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass(val[0], val[3], val[6], val[7])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_326(val, _values, result)
                      # ...
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_328(val, _values, result)
                      push_scope
                      lexer.lex_state = :expr_endfn
                    
    result
end

def _reduce_329(val, _values, result)
                      result = new_def(val[0], nil, val[1], val[3], val[4], val[5])
                      pop_scope
                    
    result
end

def _reduce_330(val, _values, result)
                       lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      push_scope
                      lexer.lex_state = :expr_endfn
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_def(val[0], val[1], val[4], val[6], val[7], val[8])
                      pop_scope
                    
    result
end

def _reduce_333(val, _values, result)
                      result = new_break(val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = []
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_shadowarg(val[0])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = new_call nil, [:lambda, []], []
                      result << new_iter(val[0], val[1])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_block_args(*val[0])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_assign(new_assignable(new_ident(
                                  val[0])), val[1], val[2])
                    
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = new_block_args(nil, [val[1]])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_368(val, _values, result)
                      val[1] << val[2]
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [val[0], val[2], val[3]]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [val[0], nil, val[1]]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [nil, val[0], val[1]]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = [nil, nil, val[0]]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_374(val, _values, result)
                      nil
                    
    result
end

def _reduce_375(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg, val[5]]
                    
    result
end

def _reduce_376(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg + val[6], val[7]]
                    
    result
end

def _reduce_377(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg, val[3]]
                    
    result
end

def _reduce_378(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg + val[4], val[5]]
                    
    result
end

def _reduce_379(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg, val[3]]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [val[0], nil]
                    
    result
end

def _reduce_381(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg + val[4], val[5]]
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [val[0], val[1]]
                    
    result
end

def _reduce_383(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg, val[3]]
                    
    result
end

def _reduce_384(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg + val[4], val[5]]
                    
    result
end

def _reduce_385(val, _values, result)
                      optarg= new_optarg(val[0])
                      result = [optarg, val[1]]
                    
    result
end

def _reduce_386(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = [optarg + val[2], val[3]]
                    
    result
end

def _reduce_387(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg, val[1]]
                    
    result
end

def _reduce_388(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg + val[2], val[3]]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [nil, val[0]]
                    
    result
end

def _reduce_390(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_391(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_392(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = new_call(val[0], [:call, []], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = new_call(val[0], val[2])
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_super(val[0], nil)
                    
    result
end

def _reduce_404(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_406(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_408(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_409(val, _values, result)
                      part = s(:when, s(:array, *val[2]), val[4])
                      result = [part]
                      result.push(*val[5]) if val[5]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = [val[0]]
                    
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      exc = val[1] || s(:array)
                      exc << new_assign(val[2], val[2], s(:gvar, '$!'.intern)) if val[2]
                      result = [s(:resbody, exc, val[4])]
                      result.concat val[5] if val[5]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_419(val, _values, result)
                      result = val[1].nil? ? s(:nil) : val[1]
                    
    result
end

# reduce 420 omitted

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      result = new_str val[0]
                    
    result
end

# reduce 425 omitted

def _reduce_426(val, _values, result)
                    result = str_append val[0], val[1]
                  
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = s(:str, value(val[0]))
                    
    result
end

def _reduce_429(val, _values, result)
                      result = new_xstr(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_regexp val[1], val[2]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_434(val, _values, result)
                      part = val[1]
                      part = s(:dstr, "", val[1]) if part.type == :evstr
                      result = val[0] << part
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0].concat([val[1]])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << s(:str, value(val[1]))
                    
    result
end

def _reduce_441(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_442(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_444(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = new_str_content(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = lexer.strterm
                      lexer.strterm = nil
                    
    result
end

def _reduce_447(val, _values, result)
                      lexer.strterm = val[1]
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      lexer.cond_push 0
                      lexer.cmdarg_push 0
                      result = lexer.strterm
                      lexer.strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_449(val, _values, result)
                      lexer.strterm = val[1]
                      lexer.cond_lexpop
                      lexer.cmdarg_lexpop
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = new_sym(val[1])
                      lexer.lex_state = :expr_end
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 456 omitted

# reduce 457 omitted

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      result = new_dsym val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_int(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = new_float(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                    result = negate_num(new_int(val[1]))
                  
    result
end

def _reduce_464(val, _values, result)
                    result = negate_num(new_float(val[1]))
                  
    result
end

def _reduce_465(val, _values, result)
                    result = new_int(val[1])
                  
    result
end

def _reduce_466(val, _values, result)
                    result = new_float(val[1])
                  
    result
end

def _reduce_467(val, _values, result)
                      result = new_ident(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_self(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_true(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_false(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new___FILE__(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = new___LINE__(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = new_var_ref(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      result = s(:nth_ref, value(val[0]))
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0]
                      lexer.lex_state = :expr_beg
                    
    result
end

# reduce 487 omitted

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      result = new_kwrestarg(val[1])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = new_kwrestarg()
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = new_args_tail(val[0], val[2], val[3])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_args_tail(val[0], nil, val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = new_args_tail(nil, val[0], val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = new_args_tail(nil, nil, val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = new_args_tail(nil, nil, nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg, val[5])
                    
    result
end

def _reduce_507(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg + val[6], val[7])
                    
    result
end

def _reduce_508(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg, val[3])
                    
    result
end

def _reduce_509(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg + val[4], val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg, val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg + val[4], val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = new_args(val[0], val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg, val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg + val[4], val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      optarg = new_restarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = new_args(restarg + val[2], val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = new_args(nil, val[0])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = new_args(nil, nil)
                    
    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = value(val[0]).to_sym
                      scope.add_local result
                    
    result
end

def _reduce_522(val, _values, result)
                      raise 'formal argument cannot be a constant'
                    
    result
end

def _reduce_523(val, _values, result)
                      raise 'formal argument cannot be an instance variable'
                    
    result
end

def _reduce_524(val, _values, result)
                      raise 'formal argument cannot be a class variable'
                    
    result
end

def _reduce_525(val, _values, result)
                      raise 'formal argument cannot be a global variable'
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 528 omitted

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = s(:arg, val[0])
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = s(:mlhs, val[0])
                    
    result
end

def _reduce_533(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_540(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = new_assign(new_assignable(new_ident(val[0])), val[1], val[2])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[0]
                      val[0] << val[2]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      result = "*#{value(val[1])}".to_sym
                    
    result
end

def _reduce_547(val, _values, result)
                      result = :"*"
                    
    result
end

# reduce 548 omitted

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      result = "&#{value(val[1])}".to_sym
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = []
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0].concat(val[2])
                    
    result
end

def _reduce_559(val, _values, result)
                      result = [val[0], val[2]]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = [new_sym(val[0]), val[1]]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = [s(:sym, source(val[1]).to_sym), val[3]]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = [new_kwsplat(val[1])]
                    
    result
end

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Opal
